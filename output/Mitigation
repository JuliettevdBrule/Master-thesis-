 1/1: 1+1
 3/1:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_True_p50.0_3a6d1e122.csv')
 3/2:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_True_p50.0_3a6d1e122.csv')
 3/3: print(data)
 4/1:
df.loc [114:140,[2020,2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070,2075,2080,2085,2090,2095,2100,2105,2110,2115,2120, 2125, 2130,2135,2140,2145,2150
]]
print(df.loc)
 4/2:
damage_costs = df.loc [114:140,[2020,2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070,2075,2080,2085,2090,2095,2100,2105,2110,2115,2120, 2125, 2130,2135,2140,2145,2150
]]
print(damage_costs)
 4/3:
damage_costs = df.loc [114:140,[2020,2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070,2075,2080,2085,2090,2095,2100,2105,2110,2115,2120, 2125, 2130,2135,2140,2145,2150
]]
print(damage_costs)
 4/4:
damage_costs = data.loc[114:140,[2020,2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070,2075,2080,2085,2090,2095,2100,2105,2110,2115,2120, 2125, 2130,2135,2140,2145,2150
]]
print(damage_costs)
 4/5:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_True_p50.0_3a6d1e122.csv')
 4/6:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_True_p50.0_3a6d1e122.csv')
 4/7: print(data)
 4/8:
damage_costs = data.loc[114:140,[2020,2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060, 2065, 2070,2075,2080,2085,2090,2095,2100,2105,2110,2115,2120, 2125, 2130,2135,2140,2145,2150
]]
print(damage_costs)
 4/9:
damage_costs = data.iloc[114:140, 3:27]
print(damage_costs)
4/10: data
4/11: data.set_index(["Variable", "Region"])
4/12: data.set_index(["Variable", "Region"]).loc["population"]
4/13: data.drop(columns="Unit").set_index(["Variable", "Region"]).loc["population"]
4/14: data.drop(columns="Unit").set_index(["Variable", "Region"])]
4/15: data.drop(columns="Unit").set_index(["Variable", "Region"])
4/16: data = data.drop(columns="Unit").set_index(["Variable", "Region"])
4/17: data
4/18: data.loc["damage_costs"]
4/19:
damage_costs_relative = data.loc["damage_costs"]
damage_costs_relative * data.loc["GDP_gross"]
4/20:
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
4/21: import plotly
4/22:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
4/23:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
4/24: data = data.drop(columns="Unit").set_index(["Variable", "Region"])
4/25:
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
4/26:
damage_costs = data.iloc[114:140, 3:27]
print(damage_costs)
4/27:
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
4/28:
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
print(damage_costs)
 5/1: import numpy as np
 5/2:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
 5/3: print(data)
 5/4: data = data.drop(columns="Unit").set_index(["Variable", "Region"])
 5/5:
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
print(damage_costs)
 5/6: import numpy as np
 5/7: damage_costs.DataFrame
 5/8: arr = damage_costs.values
 5/9:
arr = damage_costs.values
print(arr)
 6/1:
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
 6/2: data = data.drop(columns="Unit").set_index(["Variable", "Region"])
 6/3:
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
print(damage_costs)
 6/4: import numpy as np
 6/5:
arr = damage_costs.values
print(arr)
 6/6:
# data import
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read.csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
 6/7:
# data import
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
 6/8:
data = data.drop(columns="Unit").set_index(["Variable", "Region"])
data_mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
 6/9:
# puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
print(damage_costs)
6/10:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars
damage_costs_relative_mitigation = data_mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_relative_mitigation * data_mitigation.loc["GDP_gross"]
print(damage_costs_mitigation)
6/11:
# calculation of mitigation costs minus the damage costs in the mitigation scenario 

# selection of the mitigation costs data 

mitigation_costs_coach = data_mitigation.loc["abatement_costs"]
print(mitigation_costs_coach)
 7/1:
# calculation of mitigation costs minus the damage costs in the mitigation scenario 

# selection of the mitigation costs data 

mitigation_costs_coach = data_mitigation.loc["abatement_costs"]
 7/2:
# data import
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
 7/3:
data = data.drop(columns="Unit").set_index(["Variable", "Region"])
data_mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
 7/4:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
print(damage_costs)
 7/5:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_relative_mitigation = data_mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_relative_mitigation * data_mitigation.loc["GDP_gross"]
print(damage_costs_mitigation)

# the  damage costs do remain the same which makes sense
 7/6:
# calculation of mitigation costs minus the damage costs in the mitigation scenario 

# selection of the mitigation costs data 

mitigation_costs_coach = data_mitigation.loc["abatement_costs"]
 7/7:
# susbstraction of the damage costs to the mitigation costs

#turn into an array, is each line turned into an array 
damage_costs = damage_costs.values
mitigation_costs= mitigation_costs_coach.values

avoided_damages = mitigation_costs - damage_costs
print(avoided_damages)
 7/8:
# susbstraction of the damage costs to the mitigation costs

#turn into an array, is each line turned into an array 
damage_costs = damage_costs
mitigation_costs= mitigation_costs_coach

avoided_damages = mitigation_costs - damage_costs
print(avoided_damages)
 8/1:
# data import
import pandas as pd

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
 8/2:
data = data.drop(columns="Unit").set_index(["Variable", "Region"])
data_mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
 8/3:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
 8/4:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_relative_mitigation = data_mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_relative_mitigation * data_mitigation.loc["GDP_gross"]


# the  damage costs do remain the same which makes sense
 8/5:
# calculation of mitigation costs minus the damage costs in the mitigation scenario 

# selection of the mitigation costs data 

mitigation_costs_coach = data_mitigation.loc["abatement_costs"]
 8/6:
# data import
import pandas as pd
import numpy as np

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
 8/7:
data = data.drop(columns="Unit").set_index(["Variable", "Region"])
data_mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
 8/8:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs = damage_costs_relative * data.loc["GDP_gross"]
 8/9:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_relative_mitigation = data_mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_relative_mitigation * data_mitigation.loc["GDP_gross"]


# the  damage costs do remain the same which makes sense
8/10:
# calculation of mitigation costs minus the damage costs in the mitigation scenario 

# selection of the mitigation costs data 

mitigation_costs_coach = data_mitigation.loc["abatement_costs"]
8/11:
# susbstraction of the damage costs to the mitigation costs to get the avoided damages 

#turn into an array, is each line turned into an array 
damage_costs = damage_costs
mitigation_costs= mitigation_costs_coach

avoided_damages = mitigation_costs - damage_costs
print(avoided_damages)
8/12:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03
avoided_damages = avoided_damages.values 

NPV_benefits = np.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/13:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03
avoided_damages = avoided_damages.values 

import numpy_financial as npf

NPV_benefits = np.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/14:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03
avoided_damages = avoided_damages.values 

import numpy_financial as npf

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/15:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03
avoided_damages = avoided_damages.values 

import numpy_financial as npf

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/16:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03


import numpy_financial as npf

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/17:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03


import numpy_financial as npf

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/18:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03


import numpy_financial as npf

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
8/19:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
8/20:
# data import
import pandas as pd
import numpy as np
import numpy-financial as npf

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
8/21:
# data import
import pandas as pd
import numpy as np
import numpy financial as npf

data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
8/22:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
11/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
11/2:
# data import
import pandas as pd
import numpy as np
#import numpy_financial as npf
import plotly.express as px


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
11/3:
# data import
import pandas as pd
import numpy as np
#import numpy_financial as npf
import plotly.express as px


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
12/1: import plotly
13/1:
# data import
import pandas as pd
import numpy as np
#import numpy_financial as npf
import plotly.express as px


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
13/2:
# data import
import pandas as pd
import numpy as np
#import numpy_financial as npf
import plotly.express as px


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
13/3:
data = data.drop(columns="Unit").set_index(["Variable", "Region"])
data_mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
13/4:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs_bl = damage_costs_relative * data.loc["GDP_gross"]

#print(damage_costs)
13/5:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_relative_mitigation = data_mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_relative_mitigation * data_mitigation.loc["GDP_gross"]



# the  damage costs do remain the same which makes sense
13/6:
# data import
import pandas as pd
import numpy as np
#import numpy_financial as npf
import plotly.express as px


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
13/7:
data = data.drop(columns="Unit").set_index(["Variable", "Region"])
data_mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
13/8:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs_bl = damage_costs_relative * data.loc["GDP_gross"]

print(damage_costs)
13/9:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs_bl = damage_costs_relative * data.loc["GDP_gross"]

print(damage_costs_bl)
13/10:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs_bl = damage_costs_relative * data.loc["GDP_gross"]

print(damage_costs_bl.head())
13/11:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_relative = data.loc["damage_costs"]
damage_costs_bl = damage_costs_relative * data.loc["GDP_gross"]

damage_costs_bl.head()
13/12:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_relative_mitigation = data_mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_relative_mitigation * data_mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()


# the  damage costs do remain the same which makes sense
13/13:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
13/14:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


data = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
data_mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
13/15:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
13/16:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, damage_costs_bl)
print(NPV_benefits)
13/17:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, damage_costs_bl.T)
print(NPV_benefits)
13/18:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, damage_costs_bl.loc["USA"])
print(NPV_benefits)
13/19: npf.npv(discount_rate, damage_costs_bl.loc["USA"])
13/20: damage_costs_bl.loc["USA"]
13/21: damage_costs_bl
13/22:
for region, row in damage_costs_bl.iterrows():
    print(region)
13/23:
for region, row in damage_costs_bl.iterrows():
    print(row)
13/24:
for region, row in damage_costs_bl.iterrows():
    ...
13/25:
for region, row in damage_costs_bl.iterrows():
    npv_row = npf.npv(discount_rate, row)
13/26:
[
    npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
    ]
13/27:
{
    region: npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
}
13/28:
pd.Series({
    region: npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
})
13/29:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_bl.head()
13/30:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
13/31:
baseline = data.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
13/32:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_bl.head()
13/33:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()


# the  damage costs do remain the same which makes sense
13/34:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
13/35:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
print(avoided_damages)
13/36:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
13/37:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, avoided_damages.loc["USA"])
print(NPV_benefits)
13/38:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
13/39:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

avoided_damages = avoided_damages.values


NPV_benefits = npf.npv(discount_rate, avoided_damages)
print(NPV_benefits)
13/40:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

avoided_damages = avoided_damages.values


NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes(lambda x: npv(discount_rate, x), 0, avoided_damages)
print(NPV_benefits)
print(NPV_axes)
13/41:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

avoided_damages = avoided_damages.values


NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes(lambda x: npv(discount_rate, x), 0, avoided_damages)
print(NPV_benefits)
#print(NPV_axes)
13/42:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

avoided_damages = avoided_damages.values


NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes(lambda x: npv(discount_rate, x), 0, avoided_damages)
print(NPV_benefits)
#print(NPV_axes)
13/43:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#avoided_damages = avoided_damages.values


NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes(lambda x: npv(discount_rate, x), 0, avoided_damages)
print(NPV_benefits)
#print(NPV_axes)
13/44:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#avoided_damages = avoided_damages.values


#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes(lambda x: npv(discount_rate, x), 0, avoided_damages)
print(NPV_benefits)
#print(NPV_axes)
13/45:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#avoided_damages = avoided_damages.values


#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes =(lambda x: npv(discount_rate, x), 0, avoided_damages)
print(NPV_benefits)
#print(NPV_axes)
13/46:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#avoided_damages = avoided_damages.values


#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes =(lambda x: npv(discount_rate, x), 0, avoided_damages)
#print(NPV_benefits)
print(NPV_axes)
13/47:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

avoided_damages = avoided_damages.values


#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes=(lambda x: npv(discount_rate, x), 0, avoided_damages)
#print(NPV_benefits)
print(NPV_axes)
13/48:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes=(lambda x: npv(discount_rate, x), 0, avoided_damages.loc["USA"])
#print(NPV_benefits)
print(NPV_axes)
13/49:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes=(lambda x: npv(discount_rate, x), 0, avoided_damages.)
#print(NPV_benefits)
print(NPV_axes)
13/50:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes=(lambda x: npv(discount_rate, x), 0, avoided_damages)
#print(NPV_benefits)
print(NPV_axes)
13/51:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes=(lambda x: npv(discount_rate, x), 0, avoided_damages)
#print(NPV_benefits)
NPV_axes
14/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
14/2:
baseline = data.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = data_mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
14/3:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
14/4:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
14/5:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
14/6:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
14/7:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages)

NPV_axes=(lambda x: npv(discount_rate, x), 0, avoided_damages)
#print(NPV_benefits)
NPV_axes
15/1:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
15/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
15/3:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
15/4:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
15/5:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
15/6:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
15/7:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
15/8:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
for npf.npv(discount_rate, row): 
    return row ["CAN"]

avoided_damages[result] = avoided_damages.apply(npf.npv, axis= 1)

print (avoided_damages )
15/9:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def npf.npv(discount_rate, row): 
    return row ["CAN"]

avoided_damages[result] = avoided_damages.apply(npf.npv, axis= 1)

print (avoided_damages )
15/10:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV_ad

avoided_damages['NPV_ad'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1) axis= 1)

print (avoided_damages)
15/11:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV_ad

avoided_damages['NPV_ad'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (avoided_damages)
15/12:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row['region']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV_ad

avoided_damages['NPV_ad'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (avoided_damages)
15/13:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row['Region']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV_ad

avoided_damages['NPV_ad'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (avoided_damages)
15/14:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row.loc["Region"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV_ad

avoided_damages['NPV_ad'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (avoided_damages)
15/15:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row.loc["Region"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV_ad.loc["Region"]

avoided_damages['NPV_ad'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (avoided_damages)
15/16:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (avoided_damages)
15/17:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(row, discount_rate):
    avoided_damages = row
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (NPV_regions)
15/18:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(avoided_damages, discount_rate):
    avoided_damages = row.loc["Region"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (NPV_regions)
15/19:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc["Region"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (NPV_regions)
15/20:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(avoided_damages, discount_rate):
    avoided_damages = avoided_damages["Region"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (NPV_regions)
15/21:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def NPV_ad(avoided_damages, discount_rate):
    avoided_damages = avoided_damages["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV_ad, args=(discount_rate,), axis =1)

print (NPV_regions)
15/22: npf.npv
15/23:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def npv.npf(discount_rate, avoided_damages):
    NPV= 0 
    for i,  in range(len(avoided_damages))
     npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

print (NPV_regions)
15/24:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def npf.npv(discount_rate, avoided_damages):
    NPV= 0 
    for i,  in range(len(avoided_damages))
     npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

print (NPV_regions)
15/25:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
15/26:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
15/27:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
15/28:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
15/29:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
15/30:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
15/31:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
15/32:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def npf.npv(discount_rate, avoided_damages):
    NPV= 0 
    for i,  in range(len(avoided_damages))
     npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

print (NPV_regions)
                                    
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, row) # does this select the rows? 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/33:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, row) # does this select the rows? 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/34:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, row) 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/35:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, row) 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/36:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, row): 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/37:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, region): 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/38:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate, avoided_damages): 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/39:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate): 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/40:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate): 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
15/41:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate): 
        npf.npv(discount_rate, avoided_damages.loc["CAN"])
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
15/42:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate): 
        npf.npv(discount_rate, avoided_damages)
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
15/43:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate): 
        npf.npv(discount_rate, avoided_damages.loc("region")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
15/44:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(discount_rate): 
        npf.npv(discount_rate, avoided_damages.loc("region")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
15/45:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damage) 
        npf.npv(discount_rate, avoided_damages.loc("CAN")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
15/46:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damage): 
        npf.npv(discount_rate, avoided_damages.loc("CAN")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
16/1:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damage): 
        npf.npv(discount_rate, avoided_damages.loc("CAN")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
16/2:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages.loc("CAN")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
16/3:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages.loc("CAN")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(avoided damages), axis =1) 

print(NPV_regions)
16/4:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages.loc("region")
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(avoided damages), axis =1) 

print(NPV_regions)
16/5:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages) 
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(avoided damages), axis =1) 

print(NPV_regions)
16/6:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages) 
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(avoided_damages), axis =1) 

print(NPV_regions)
16/7:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages) 
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
16/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
16/9:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
16/10:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
16/11:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
16/12:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
16/13:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
16/14:
# new version
# option for writting the code: write out the formula, find a way to apply the npv function (lambda)    
                                    
def NPV(avoided_damages): 
        npf.npv(discount_rate, avoided_damages) 
        return NPV

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
16/15:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row['CAN']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return npv


NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/16:
# new version 2 

def npv_function(row):
    avoided_damages = row['CAN']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(avoided_damages)])
    return npv


NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/17:
# new version 2 

def npv_function(row):
    avoided_damages = row['CAN']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate('CAN')])
    return npv


NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/18:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row['CAN']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate('CAN')])
    return npv


NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/19:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row['CAN']
    discount rate = 0.03
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate('CAN')])
    return npv


NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/20:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row['CAN']
    discount_rate = 0.03
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate('CAN')])
    return npv


NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/21:
# Create a sample DataFrame
data = {'Cash_Flows': [[-100, 50, 75, 30, 40]]}
df = pd.DataFrame(data)

# Define the NPV function to be applied to every row
def npv_function(row, discount_rate):
    cash_flows = row['Cash_Flows']
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate(cash_flows)])
    return npv

# Define the discount rate
discount_rate = 0.10

# Apply the NPV function to every row of the DataFrame along the rows axis (axis=1)
df['NPV'] = df.apply(npv_function, discount_rate=discount_rate, axis=1)

# Print the DataFrame with the NPV column
print(df)
16/22:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row['CAN']
    discount_rate = 0.03
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate('CAN')])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions['NPV'] = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/23:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("CAN")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions['NPV'] = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/24:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row["region"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions['NPV'] = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/25:
# new version 2 

def npv_function(row, discount_rate):
    avoided_damages = row
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions['NPV'] = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/26:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions['NPV'] = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/27:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/28:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/29:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv


#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

print(NPV_regions)
16/30:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.iloc("CAN")
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv
16/31:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.iloc("CAN")
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv
16/32:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.iloc("CAN")
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)
16/33:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.iloc(2)
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)
16/34:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc(2)
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)
16/35:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc[1]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)
16/36:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc[2]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)
16/37:
# new version 2 

def npv_function(avoided_damages, discount_rate):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)
16/38:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
print(avoided_damages)
16/39:
# new version 2 

def npv_function(avoided_damages)
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
16/40:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1)
16/41:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: NPV(x), axis =1) 

print(NPV_regions)
16/42:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/43:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/44:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

#NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/45:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["CAN"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/46:
# new version 2 

def npv_function(avoided_damages):
    avoided_damages = avoided_damages.loc["USA"]
    npv = sum([cf / (1 + discount_rate)**i for i, cf in enumerate("region")])
    return npv

#NPV_regions = avoided_damages.apply(npv_function, discount_rate=discount_rate, axis=1)

NPV_regions = avoided_damages.apply(lambda x: npv_function(x), axis =1) 

print(NPV_regions)
16/47: NPV_regions = avoided_damages.apply(lambda x: npv.npf(x), axis =1)
16/48: NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/49: NPV_regions = avoided_damages.apply(lambda x: npf.npv("CAN"), axis =1)
16/50: NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/51:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/52:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/53:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/54:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
#NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/55:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(lambda x: npf.npv(x), axis =1)
16/56:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(npf.npv(x), axis =1)
16/57:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(npf.npv, axis =1)
16/58:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(npf.npv(discount_rate, avoided damages), axis =1)
16/59:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(npf.npv(discount_rate, avoided_damages), axis =1)
16/60:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(npf.npv(discount_rate), axis =1)
16/61:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()
NPV_regions = avoided_damages.apply(npf.npv(discount_rate, avoided_damages), axis =1)
16/62:
avoided_damages = pd.DataFrame(avoided_damages)
avoided_damages.to_numpy()

len(avoided_damages)

#NPV_regions = avoided_damages.apply(npf.npv(discount_rate, avoided_damages), axis =1)
16/63:
avoided_damages = pd.DataFrame(avoided_damages)
len(avoided_damages)

NPV_regions = avoided_damages.apply(npf.npv(discount_rate, avoided_damages), axis =1)
16/64:
avoided_damages = pd.DataFrame(avoided_damages)
len(avoided_damages)

NPV_regions = avoided_damages.apply(npf.npv(discount_rate, avoided_damages), axis =0)
16/65:
avoided_damages = pd.DataFrame(avoided_damages)
len(avoided_damages)

NPV_regions = avoided_damages.apply(npf.npv(avoided_damages), axis =0)
16/66:
avoided_damages = pd.DataFrame(avoided_damages)
len(avoided_damages)

NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =0)
16/67:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

for NPV(discount_rate, avoided damages): 
    values = np.asarray(values)
    return NPV =(values / (1+rate)**np.arange(0, len(values)-1)).sum(axis=0)
16/68:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

for NPV(discount_rate, avoided_damages): 
    values = np.asarray(values)
    return NPV =(values / (1+rate)**np.arange(0, len(values)-1)).sum(axis=0)
16/69:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

def npv_function(discount_rate, avoided_damages): 
    values = np.asarray(values)
    return NPV =(values / (1+rate)**np.arange(0, len(values)-1)).sum(axis=0)
16/70:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

def npv_function(discount_rate, avoided_damages): 
    values = np.asarray(values)
    NPV = (values / (1+rate)**np.arange(0, len(values)-1)).sum(axis=0)
    return NPV
16/71:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

def npv_function(discount_rate, avoided_damages): 
    values = avoided_damages
    NPV = (values / (1+rate)**np.arange(0, len(values)-1)).sum(axis=0)
    return NPV
16/72:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

def npv_function(discount_rate, avoided_damages): 
    values = avoided_damages
    NPV = (values / (1+rate)**np.arange(0, len(values))).sum(axis=0)
    return NPV
16/73:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

def npv_function(discount_rate, avoided_damages): 
    values = avoided_damages
    NPV = (values / (1+rate)**np.arange(0, size(values))).sum(axis=0)
    return NPV
16/74:
avoided_damages = pd.DataFrame(avoided_damages)
NPV_regions = avoided_damages.apply(npf.npv(avoided_damages, discount_rate), axis =1)

def npv_function(discount_rate, avoided_damages): 
    values = avoided_damages.loc["CAN"]
    NPV = (values / (1+rate)**np.arange(0, size(values))).sum(axis=0)
    return NPV
17/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
17/2:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
17/3:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
17/4:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline
17/5:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
17/6:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
17/7:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
17/8:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
17/9:
#pd.Series({
   # region: npf.npv(discount_rate, row)
    #for region, row in damage_costs_bl.iterrows()
#})

# write this in a function
def npf.npv(avoided_damages):
    NPV= 0 
    for i,  in range(len(avoided_damages))
     npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

print (NPV_regions)
17/10:
pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
})

# write this in a function
def npf.npv(avoided_damages):
    NPV= 0 
    for i,  in range(len(avoided_damages))
     npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    return NPV

NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

print (NPV_regions)
17/11:
pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
})

# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
17/12:
pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
    return NPV 
})
# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
17/13: avoided_damages.apply(npf.npv)
17/14: avoided_damages.apply(npf.npv(avoided_damages), axis =1, args= 0,3)
17/15:
AD = pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in damage_costs_bl.iterrows()
})

AD
# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
17/16:
AD = pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in avoided_damages.iterrows()
})

AD
# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
17/17:
mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs.head()
17/18:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
17/19:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
Mit.head()
17/20:
CBR = DT/Mit 
print(CBR)
17/21:
CBR = AD/Mit 
print(CBR)
17/22:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
print.(Mit)
17/23:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
print(Mit)
17/24:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
Mit
18/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
18/2:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
18/3:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
18/4:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
18/5:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
18/6:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
18/7:
AD = pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in avoided_damages.iterrows()
})

AD
# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
18/8: npf.npv(discount_rate, damage_costs_bl.loc["USA"])
18/9: npf.npv(discount_rate, avoided_damages.loc["USA"])
18/10:
mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs.head()
18/11:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
Mit
18/12:
CBR = AD/Mit 
print(CBR)
18/13: AD.to_csv
19/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
19/2:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
19/3:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
19/4:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
damage_costs_mitigation.head()
19/5:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.head()
19/6:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
19/7:
AD = pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in avoided_damages.iterrows()
})

AD
# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
19/8: AD.to_csv
19/9: AD.to_csv("C:\Users\jujul\OneDrive - Universiteit Utrecht\thesis\Python\AD.csv", index= False)
19/10: AD.to_csv("C:\Users\jujul\OneDrive - Universiteit Utrecht\thesis\Python\AD.csv",index= False)
19/11:
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
19/12:
# Cost benefit ratio plot 

Fig1= px.scatter(AD, x="region", y = "CBR", color="size")
Fig1.show
19/13:
CBR = AD/Mit
CBR.columns = ['region','CBR']
print(CBR)
19/14:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
Mit
19/15:
mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs.head()
19/16:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
Mit
19/17:
CBR = AD/Mit
CBR.columns = ['region','CBR']
print(CBR)
19/18:
# Cost benefit ratio plot 

Fig1= px.scatter(AD, x="region", y = "CBR", color="size")
Fig1.show
19/19:
CBR = AD/Mit
CBR.DataFrame
CBR.columns = ['region','CBR']
print(CBR)
19/20:
CBR = AD/Mit
CBR.to_csv
CBR.columns = ['region','CBR']
print(CBR)
19/21:
CBR = AD/Mit
CBR.to_csv
CBR.DataFrame
print(CBR)
19/22:
CBR = AD/Mit
CBR = CBR.DataFrame(data=CBR, index=["region", "CBR"])
print(CBR)
19/23:
CBR = AD/Mit
CBR.dtypes
19/24:
# Cost benefit ratio plot 

Fig1= px.scatter(AD, x="region", y = "CBR",)
Fig1.show
19/25:
# Cost benefit ratio plot 

Fig1= px.scatter(AD, x="region", y = "CBR")
Fig1.show
19/26:
CBR = AD/Mit
CBR = pd.DataFrame(CBR, columns = ['Region', 'CBR']
19/27:
CBR = AD/Mit
CBR = pd.DataFrame(CBR, columns = ['Region', 'CBR'])
print(CBR)
19/28: CBR.to_csv
19/29:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
print(CBR)
19/30:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
print(CBR)
19/31:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
CBR.rename(columns = {'0':'CBR'},
          inplace = True)
print(CBR)
19/32: CBR.to_csv
19/33:
# Cost benefit ratio plot 

Fig1= px.scatter(AD, x="region", y = "0")
Fig1.show
19/34:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="region", y = "0")
Fig1.show
19/35:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y = "0")
Fig1.show
19/36:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region")
Fig1.show
19/37:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
print(CBR)
19/38: CBR.to_csv
19/39:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region")
Fig1.show
19/40:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="0")
Fig1.show
19/41:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
19/42:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)

CBR
19/43:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'}, {'0':'CBR'}
          inplace = True)

CBR
19/44:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'}, {'0':'CBR'},
          inplace = True)

CBR
19/45:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'}, {'0':'CBR'},
          inplace = False)

CBR
19/46:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = False)
19/47:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
19/48:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = False)
19/49:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
19/50:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True)
CBR
19/51:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = False)
CBR
19/52:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = False)
CBR.rename(columns = {'0':'CBR'},
          inplace = False)
CBR
19/53: CBR.to_csv
19/54:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.rename(columns = {'0':'CBR'},
          inplace = True)
CBR
19/55:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
19/56:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#print(data_mitigation)
19/57:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline.head()
19/58:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]
19/59:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
19/60:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
19/61:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
19/62:
AD = pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in avoided_damages.iterrows()
})

AD
# write this in a function
#def npf.npv(avoided_damages):
 #   NPV= 0 
  #  for i,  in range(len(avoided_damages))
   #  npv += avoided_damages[i] sum([cf / (1 + discount_rate)**i 
    #avoided_damages = avoided_damages["CAN"]
   
    #return NPV

#NPV_regions['NPV'] = avoided_damages.apply(NPV, args=(discount_rate,), axis =1)

#print (NPV_regions)
19/63:
Mit= pd.Series({
   region: npf.npv(discount_rate, row)
    for region, row in mitigation_costs.iterrows()
})
Mit
19/64:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR
19/65:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR
19/66: CBR.to_csv
19/67:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="0")
Fig1.show
19/68:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="CBR")
Fig1.show
19/69:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="CBR")
Fig1.show()
19/70:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="CBR", color = color_continuous_scale=scale)
Fig1.show()
19/71:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="CBR",)
Fig1.show()
19/72:
# Cost benefit ratio plot 

Fig1= px.bar(CBR, x="Region", y="CBR",)
Fig1.show()
19/73: avoided_damages
19/74:
def npv(dataframe):
    return pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })

Mit= npv(mitigation_costs)


AD = npv(avoided_damages)

Mit
19/75: CBR.to_csv("output/cbr.csv")
19/76: CBR.to_csv("output/cbr.csv")
19/77:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/78:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
19/79:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
19/80:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/81:
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/82:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/83:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/84:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/85:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/86:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/87:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/88:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/89:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/90:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/91:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/92:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/93:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
19/94:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
19/95: mitigation
19/96: mitigation["Variable"]
19/97: mitigation.reset_index()["Variable"]
19/98: mitigation.reset_index()["Variable"].unique()
19/99: mitigation.reset_index()
19/100: mitigation#.reset_index()
19/101: mitigation.reset_index()
19/102: mitigation.reset_index()["Variable"]
19/103: mitigation.reset_index()["Variable"].unique()
19/104: Mit
19/105: mitigation_costs
19/106: mitigation_costs.sum(axis=0)
19/107: mitigation_costs.sum(axis=1)
19/108: mitigation_costs.sum(axis=0)
19/109:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
19/110:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]
19/111:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]
19/112:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
19/113:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
19/114:
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
19/115:
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mit
19/116:
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

AD
19/117:
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

AD
Mit
19/118:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR
20/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation
20/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation.head()
21/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]})
mitigation.head()
21/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]})
21/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc("regional_emissions")
21/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
21/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement"]
mitigation_population = mitigation.loc["population"]
21/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
21/7:
global_emissions = mitigation_emissions.sum(axis=1)
global_emissions
21/8:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
21/9:
## world population 

global_population = mitigation_population.sum(axis=0)
21/10:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
21/11:
## calculatin of the regional emissions allowance according to the burden sharing regime Immediate per capita convergence 

def Allowance(dataframe):
    regional_allowance=pd.Series({
        region: mitigation_population/global_population*global_emissions
        for region, row in dataframe.iterrows()
    })
    return regional_allowance
21/12:
## calculatin of the regional emissions allowance according to the burden sharing regime Immediate per capita convergence 

def Allowance(dataframe):
    regional_allowance=pd.Series({
        region: mitigation_population/global_population*global_emissions
        for region, row in dataframe.iterrows()
    })
    return regional_allowance
regional_allowance
21/13:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

mitigation_emissions
21/14: regional_allowance= mitigation_population/global_population*global_emissions
21/15:
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
21/16:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.([2020])
21/17:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.loc([:,"2020"])
21/18:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.iloc([:,"2020"])
21/19:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.iloc(["2020"])
21/20:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.loc(["2020"])
21/21:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.loc["2020"]
21/22:
#piechart current emissions distribution 

current_emissions = mitigation_emissions.loc[;,"2020"]
21/23:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
21/24:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions
21/25:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'Region'},
          inplace = True )
global_emissions.columns = ['Region','emissions']

fig = px.pie(global_emissions, values='emissions', names='region', title='emissions per region in 2020')
fig.show()
21/26:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'Region'},
          inplace = True )
global_emissions.columns = ['Region','emissions']

fig = px.pie(global_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/27:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/28:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
21/29:
allowance_2020 = regional_allowance["2020"]

regional_allowance= cregional_allowance.to_frame().reset_index()
regional_allowance.rename(columns = {'index':'Region'},
          inplace = True )
regional_allowance.columns = ['Region','emissions']

fig = px.pie(regional_allowance, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/30:
allowance_2020 = regional_allowance["2020"]

regional_allowance= regional_allowance.to_frame().reset_index()
regional_allowance.rename(columns = {'index':'Region'},
          inplace = True )
regional_allowance.columns = ['Region','emissions']

fig = px.pie(regional_allowance, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/31:
allowance_2020 = regional_allowance["2020"]

#regional_allowance= regional_allowance.to_frame().reset_index()
#regional_allowance.rename(columns = {'index':'Region'},
          inplace = True )
#regional_allowance.columns = ['Region','emissions']

fig = px.pie(regional_allowance, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/32:
allowance_2020 = regional_allowance["2020"]

#regional_allowance= regional_allowance.to_frame().reset_index()
#regional_allowance.rename(columns = {'index':'Region'},
         # inplace = True )
#regional_allowance.columns = ['Region','emissions']

fig = px.pie(regional_allowance, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/33:
allowance_2020 = regional_allowance["2020"]

#regional_allowance= regional_allowance.to_frame().reset_index()
#regional_allowance.rename(columns = {'index':'Region'},
         # inplace = True )
#regional_allowance.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/34:
allowance_2020 = regional_allowance["2020"]

allowance_2020= regional_allowance.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/35:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
21/36:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance
EAG
21/37:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
22/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
22/2:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]
22/3:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline
22/4:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]


damage_costs_mitigation
22/5:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

avoided_damages
22/6:
mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs.head()
22/7:
mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs
23/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

mitigation_emissions
23/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
23/3:
#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
23/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
23/5:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
23/6:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
23/7:
#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
23/8:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
24/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

mitigation_emissions
24/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
24/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
24/4:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
24/5:
#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
24/6:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
24/7:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance
EAG
24/8:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
24/9:
#total emission reduction (does it have to be per region or year?)

global_emission_reduction = Emission_reduction.sum(axis=0)
global_emission_reduction
24/10:
#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC
24/11:
#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER
24/12:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
24/13:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 
IPC_mitigationcosts
25/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
25/2:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline
25/3:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]


damage_costs_mitigation
25/4:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

avoided_damages.to_csv("output/avoided_damages.csv")

avoided_damages
24/14:
#NPV 

avoided_damages = pd.read_csv('avoided_damages.csv')

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/15:
#NPV 

avoided_damages = pd.read_csv('avoided_damages.csv')

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/16:
#NPV 

discocunt_rate= 0.03 
avoided_damages = pd.read_csv('avoided_damages.csv')

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/17:
#NPV 

discount_rate= 0.03 
avoided_damages = pd.read_csv('avoided_damages.csv')

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/18:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages
24/19:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/20:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages.drop(columns="Unit").
avoided_damages
24/21:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages.drop(columns="Unit")
avoided_damages
24/22:
avoided_damages = pd.read_csv('avoided_damages.csv')
type(avoided_damages)
24/23:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages
24/24:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages = avoided_damages.to_frame().reset_index()
avoided_damages.rename(columns = {'index':'Region'},
          inplace = True )
24/25:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages = avoided_damages.reset_index()
avoided_damages.rename(columns = {'index':'Region'},
          inplace = True )
24/26:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages = avoided_damages.reset_index()
avoided_damages.rename(columns = {'index':'Region'},
          inplace = True )
avoided_damages
24/27:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages = avoided_damages.reset_index()
avoided_damages.rename(columns = {'index':'Region'},
          inplace = False )
avoided_damages
24/28:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages.set_index('Region')
24/29:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/30:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages.set_index('Region')
type(avoided_damages)
24/31:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages.set_index('Region')
avoided_damages = float(avoided_damages)
24/32:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

avoided_damages.set_index('Region')
avoided_damages.astype(float)
24/33:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

# avoided_damages.set_index('Region')
24/34:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages["Region"]

# avoided_damages.set_index('Region')
24/35:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

# avoided_damages.set_index('Region')
24/36:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages["2020"]

# avoided_damages.set_index('Region')
24/37:
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages

# avoided_damages.set_index('Region')
24/38:
avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages

avoided_damages.set_index('Region')
24/39:
avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
24/40:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
24/41:
CBR_IPC = AD/IPC_NPV
CBR_IPC = CBR.to_frame().reset_index()
CBR_IPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IPC.columns = ['Region','CBR']

CBR_IPC
24/42:
CBR_IPC = AD/IPC_NPV
CBR_IPC = CBR_IPC.to_frame().reset_index()
CBR_IPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IPC.columns = ['Region','CBR']

CBR_IPC
26/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
27/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
27/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
27/3:
#regional allowance ATP
regional_allowance_cube = regional_gdp/mitigation_population/global_gdp/global_population
regional_allowance
27/4:
#regional allowance ATP
regional_allowance_cube = regional_gdp/mitigation_population/global_gdp/global_population
numpy.cbrt(regional_allowance_cube)
27/5:
#regional allowance ATP
regional_allowance_cube = regional_gdp/mitigation_population/global_gdp/global_population
np.cbrt(regional_allowance_cube)
27/6:
#regional allowance ATP
regional_allowance_cube = regional_gdp/mitigation_population/global_gdp/global_population
cube = np.cbrt(regional_allowance_cube)
regional_allowance = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
27/7:
#regional allowance ATP
regional_allowance_cube = regional_gdp/mitigation_population/global_gdp/global_population
cube = np.cbrt(regional_allowance_cube)
regional_allowance = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
27/8:
#regional allowance ATP
regional_allowance_cube = regional_gdp/mitigation_population/global_gdp/global_population
cube = np.cbrt(regional_allowance_cube)
regional_allowance = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
regional_allowance
28/1:
Names= ["rebecca", "naomi" "Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette,
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria', ]

random.shuffle(Names)
random.shuffle (Countries)
28/2:
Names= ["rebecca", "naomi" "Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria', ]

random.shuffle(Names)
random.shuffle (Countries)
28/3:
import random

Names= ["rebecca", "naomi" "Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria', ]

random.shuffle(Names)
random.shuffle (Countries)
28/4:
import random

Names= ["rebecca", "naomi" "Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria', ]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)
28/5:
import random

Names= ["rebecca", "naomi" "Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria',]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)
28/6:
import random

Names= ["rebecca", "naomi" ,"Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria',]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)
28/7:
import random

Names= ["rebecca", "naomi" ,"Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria',]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

country_allocation.to_csv("output/country_allocation.csv")
28/8:
import random

Names= ["rebecca", "naomi" ,"Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria',]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

dict = {'name': Names, 'Country': Countries}  
       
df = pd.DataFrame(dict) 
    
# saving the dataframe 
df.to_csv("output/country_allocation.csv")
28/9:
import random

Names= ["rebecca", "naomi" ,"Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria',]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

dict = {'name': Names, 'Country': Countries}  
       
Country_allocation = pd.DataFrame(dict) 
    
# saving the dataframe 
Country_allocation.to_csv("output/country_allocation.csv")
28/10:
import random
import pandas as pd

Names= ["rebecca", "naomi" ,"Jorn", "Nora", 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria',]

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

dict = {'name': Names, 'Country': Countries}  
       
Country_allocation = pd.DataFrame(dict) 
    
# saving the dataframe 
Country_allocation.to_csv("output/country_allocation.csv")
28/11:
import random
import pandas as pd

Names= ['rebecca', 'naomi' ,'Jorn', 'Nora', 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria']

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

dict = {'name': Names, 'Country': Countries}  
       
Country_allocation = pd.DataFrame(dict) 
    
# saving the dataframe 
Country_allocation.to_csv("output/country_allocation.csv")
28/12:
import random
import pandas as pd

Names= ['rebecca', 'naomi' ,'Jorn', 'Nora', 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria']

len(Names)
len(Countries)
28/13:
import random
import pandas as pd

Names= ['rebecca', 'naomi' ,'Jorn', 'Nora', 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'slovenia',
'norway',
'United Kingdom', 
'Netherlands' ,
'Iceland' ,
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria']

len(Names)
#len(Countries)
28/14:
import random
import pandas as pd

Names= ['rebecca', 'naomi' ,'Jorn', 'Nora', 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'France','Germany','slovenia',
'norway',
'United Kingdom', 
'Netherlands',
'Iceland',
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria']

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

dict = {'name': Names, 'Country': Countries}  
       
Country_allocation = pd.DataFrame(dict) 
    
# saving the dataframe 
Country_allocation.to_csv("output/country_allocation.csv")
28/15:
import random
import pandas as pd

Names= ['rebecca', 'naomi' ,'Jorn', 'Nora', 
"Manou",
"trvana",
"Pascalle", 
"bogi",
'Pia Hanson', 
'Shreyash',
'Juliette',
'Chiara',
'viri',
'eva',
'Amy',
'Corina', 
'Frans',
'Jelle',
'Legarda',
]

Countries = [ 'France','Germany','slovenia',
'norway',
'United Kingdom', 
'Netherlands',
'Iceland',
'ukraine',
'Israel' ,
'Denmark', 
'finland',
'czechia',
'Greece', 
'portugal', 
'italy',
'sweden',
'Ireland',
'spain',
'austria']

random.shuffle(Names)
random.shuffle (Countries)

list_countries =zip(Names,Countries)
country_allocation = list(list_countries)

print(country_allocation)

dict = {'name': Names, 'Country': Countries}  
       
Country_allocation = pd.DataFrame(dict) 
    
# saving the dataframe 
Country_allocation.to_csv("output/country_allocation2.csv")
30/1:
#regional allowance ATPcube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(reduction_cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

ATP = mitigation_baseline- reduction_cube/correction
30/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
30/3:
#regional allowance ATPcube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(reduction_cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

ATP = mitigation_baseline- reduction_cube/correction
30/4:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

ATP = mitigation_baseline- reduction_cube/correction
32/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
32/2:
# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline
32/3:
#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]


damage_costs_mitigation
32/4:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

avoided_damages.to_csv("output/avoided_damages.csv")

avoided_damages
32/5:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?
32/6:
mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs
32/7:
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
32/8:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR
32/9: CBR.to_csv("output/cbr_inequal_aversion.csv")
32/10:
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
32/11:
# Cost benefit ratio plot 

Fig1= px.bar(CBR, x="Region", y="CBR",)
Fig1.show()
33/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

mitigation_emissions
33/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
33/3:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
33/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
33/5:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
33/6:
#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
33/7:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
33/8:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance
EAG
33/9:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
33/10:
#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC
33/11:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
33/12:
#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER
33/13:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
33/14:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 
IPC_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
33/15:
avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
33/16:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
33/17:
CBR_IPC = AD/IPC_NPV
CBR_IPC = CBR_IPC.to_frame().reset_index()
CBR_IPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IPC.columns = ['Region','CBR']

CBR_IPC
31/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
31/2:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

ATP = mitigation_baseline- reduction_cube/correction
31/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance
EAG
34/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
34/2:
## total emissions per year  

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
34/3:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
34/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
34/5:
## total emissions per year  

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
34/6:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
31/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
31/5:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
31/6:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance
EAG
31/7:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP
EAG
31/8:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
31/9:
#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC
31/10:
#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER
31/11:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
31/12:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
31/13:
avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
32/12:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

avoided_damages.to_csv("output/avoided_damages_ineqav.csv")

avoided_damages
33/18:
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
32/13:
# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

avoided_damages.to_csv("output/avoided_damages_ineqav.csv")

avoided_damages
33/19:
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
33/20:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
33/21:
CBR_IPC = AD/IPC_NPV
CBR_IPC = CBR_IPC.to_frame().reset_index()
CBR_IPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IPC.columns = ['Region','CBR']

CBR_IPC
31/14:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)
31/15:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)
31/16:
CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP
34/7: np.min(5, 10)
34/8: np.minimum(5, 10)
34/9: np.minimum([1, 5, 11, 100], 10)
34/10: min([1,5,11,100])
35/1:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
35/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
35/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
35/4:
#regional allowance GF
regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline.sum(axis=0) 
regional_allowance
35/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance
EAG
35/6:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
35/7:
#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC
35/8:
#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER
35/9:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
35/10:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
35/11:
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
35/12:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)
35/13:
CBR_GF = AD/IPC_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF
35/14:
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF
36/1:
#regional allowance GF

t2050= mitigation['2050']
t2020= mitigation['2020']
t2150= mitigation['2150']

#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline.sum(axis=0) 
#regional_allowance

#check if this was the right way
36/2:
#regional allowance GF

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline.sum(axis=0) 
#regional_allowance

#check if this was the right way
36/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
36/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
36/5:
#regional allowance GF

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline.sum(axis=0) 
#regional_allowance

#check if this was the right way
36/6:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020


#regional_allowance 




#check if this was the right way
36/7:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020
rate

#regional_allowance 




#check if this was the right way
36/8:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

np.minimum([rate])

#regional_allowance 




#check if this was the right way
36/9:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

np.minimum('rate')

#regional_allowance 




#check if this was the right way
36/10:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

np.asarray(rate)

#regional_allowance 




#check if this was the right way
36/11:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

np.minimum(rate)

#regional_allowance 




#check if this was the right way
36/12:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

np.asarray(rate)

#regional_allowance 




#check if this was the right way
36/13:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

rate = np.asarray(rate)

#regional_allowance 




#check if this was the right way
36/14:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

rate = np.asarray(rate)
np.minimum(rate)

#regional_allowance 




#check if this was the right way
36/15:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

rate = np.asarray(rate)
np.minimum([rate])

#regional_allowance 




#check if this was the right way
36/16:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

rate = np.asarray(rate)
np.minimum([rate],1)

#regional_allowance 




#check if this was the right way
36/17:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
np.minimum([rate],1)

#regional_allowance 




#check if this was the right way
36/18:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MAX = np.maximum([rate],1)
#regional_allowance 




#check if this was the right way
36/19:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MAX = np.maximum([rate],1)
#regional_allowance 




#check if this was the right way
36/20:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MAX = np.maximum([rate],1)
MAX
#regional_allowance 




#check if this was the right way
36/21:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
36/22:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MAX = np.maximum([rate],0)
MAX
#regional_allowance 




#check if this was the right way
40/1:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
40/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
40/4:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/5:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MIN
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/6:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020
rate

#rate = np.asarray(rate)
#MIN = np.minimum([rate],1)
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/7:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020
rate
len(rate)

#rate = np.asarray(rate)
#MIN = np.minimum([rate],1)
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/8:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020
rate
len(rate)

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
len(MIN)
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/9:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020
rate
len(rate)

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
len(MIN)
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
40/10:
#data selection

t2050= mitigation_emissions['2050']
t2020= mitigation_emissions['2020']
t2150= mitigation_emissions['2150']

rate = t2150 - t2020/ t2050- t2020
rate
len(rate)

#rate = np.asarray(rate)
MIN = np.minimum([rate],1)
MIN
#MAX = np.maximum([rate],0)

#regional_allowance 




#check if this was the right way
42/1:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline[:,2:8]

GDR_2050 = 




#correction factor
42/2:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline[:,2:8]
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
42/4:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline[:,2:8]
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/5:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline(:,2:8)
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/6:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,2:8]
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/7:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,1:8]
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/8:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:8]
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/9:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:7]
regional_baseline_2050
#GDR_2050 = 




#correction factor
42/10:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:7]
global_baseline_2050 = global_baseline.iloc[:,0:7]
rci = 0,5 
mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
RA_2050

#GDR_2050 = 




#correction factor
42/11:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:7]
global_baseline_2050 = global_baseline.iloc[:,0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/12:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:7]
#global_baseline_2050 = global_baseline.iloc[:,0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/13:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:7]
global_baseline_2050 = global_baseline.iloc[:,0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/14: global_baseline_2050 = global_baseline.iloc[:,0:7]
42/15: global_baseline_2050 = global_baseline.iloc[:,:7]
42/16:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.iloc[:,0:7]

rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/17: global_baseline_2050 = global_baseline.iloc[:,:7]
42/18:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.loc[:,0:7]
global_baseline_2050 = global_baseline.loc[:,0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/19:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline[mitigation_baseline.columns[0:7]]
global_baseline_2050 = global_baseline[global_baseline.columns[0:7]]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/20:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline[mitigation_baseline.columns[0:7]]
global_baseline_2050 = global_baseline[global_baseline.columns[0:7]]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/21:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.loc[:, '2020':'2050']
global_baseline_2050 = global_baseline.loc[:, '2020':'2050']
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/22:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.loc(axis=0)[:, '2020':'2050']
global_baseline_2050 = global_baseline.loc(axis=0)[:, '2020':'2050']
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/23:
#regional allowance GDR for t< 2051 

regional_baseline_2050= mitigation_baseline.loc(axis=0)[:,0:7]
global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/24:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,0:7]]
#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/25:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/26:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/27:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/28:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
#rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/29:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
global_emissions
42/30:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
42/31:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions[0,5]
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/32:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.iloc[0,5]
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/33:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc[idx[0:5,:]]
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/34:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc[idx[0:5,:]]
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/35:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc[idx[0:5]]
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/36:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc[0:5]
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/37:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050']
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/38:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050']
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
#rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/39:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050']
global_emissions_2050

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
#rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/40:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']

#global_baseline_2050 = global_baseline.loc(axis=0)[:, 0:7]
#rci = 0,5 
#mitigation_emissions_2050 =mitigation_emissions.iloc[:,0:7]

#RA_2050 = regional_baseline_2050-(global_baseline_2050- mitigation_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/41:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 


RA_2050 = regional_baseline_2050-(global_baseline_2050- global_emissions_2050)*rci
RA_2050

#GDR_2050 =

#correction factor
42/42:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

regional_baseline_2050


#RA_2050 = regional_baseline_2050-(global_baseline_2050- global_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/43:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

regional_baseline_2050
global_baseline_2050


#RA_2050 = regional_baseline_2050-(global_baseline_2050- global_emissions_2050)*rci
#RA_2050

#GDR_2050 =

#correction factor
42/44:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

regional_baseline_2050
global_baseline_2050


factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/45:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/46:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050 = global_baseline_2050.to_frame().reset_index()
global_baseline_2050.rename(columns = {'index':'year'},
         inplace = True )
global_baseline_2050.columns = ['year','emissions']
global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/47:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050.to_frame().reset_index()
global_baseline_2050.rename(columns = {'index':'year'},
         inplace = True )
global_baseline_2050.columns = ['year','emissions']
global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/48:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050.reset_index()
global_baseline_2050.rename(columns = {'index':'year'},
         inplace = True )
global_baseline_2050.columns = ['year','emissions']
global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/49:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/50:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/51:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/52:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline.reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/53:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline.reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/54:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/55:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline.set_index('year')

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/56:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline.set_index('year')
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050
#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/57:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline = global_baseline.set_index('year')
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050
#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/58:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline = global_baseline.set_index('year')
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_emissions_2050
#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/59:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline = global_baseline.set_index('year')
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_emissions_2050
#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/60:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_baseline
42/61:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
#global_baseline = global_baseline.set_index('year')
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_emissions_2050
#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/62:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline = global_baseline.set_index('year')
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_emissions_2050
#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/63:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'Year'},
         inplace = True )
allowance_2020.columns = ['year','emissions']
42/64:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions.to_frame().reset_index()
global_emissions
42/65:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions.to_frame().reset_index()
global_emissions.set_index('year')
42/66:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.set_index('year')
38/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
38/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
38/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
38/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
38/5:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
38/6:
#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
38/7:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
38/8:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
         inplace = True )
allowance_2020.columns = ['Region','emissions']

allowance_2020
#fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
#fig.show()
38/9:
allowance_2020 = regional_allowance["2020"]

#allowance_2020= allowance_2020.to_frame().reset_index()
#allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
#allowance_2020.columns = ['Region','emissions']

allowance_2020
#fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
#fig.show()
42/67:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions
42/68:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
42/69:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions
42/70:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')
42/71:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = _baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')
42/72:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')
42/73:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/74:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc['2020':'2050']
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

regional_baseline_2050


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/75:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050 = global_baseline.loc[2020:2050]
global_emissions_2050 = global_emissions.loc['2020':'2050']
rci = 0,5 

global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/76:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline.loc[2020:2050]
#global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/77:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline.loc[2020:2050]
#global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/78:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_baseline.loc[2020:2050]
#global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/79:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')
42/80:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

#above_35 = titanic[titanic["Age"] > 35]
global_baseline.loc[2020:2050]
#global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
42/81:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

global_baseline_2050 = global_baseline[global_baseline["year"] < 2051]
global_baseline_2050
#global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')
44/2:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050
#global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/3:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]
global_baseline_2050
global_emissions_2050 = global_emissions.loc['2020':'2050']
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/4:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050']
global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/5:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[:,'2020':'2050']
global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
#global_baseline.set_index('year')
44/7:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[:,'2020':'2050']
global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/8:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]

#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

#global_emissions_2050 = global_emissions.loc[:,'2020':'2050']
#global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/9:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

#global_emissions_2050 = global_emissions.loc[:,'2020':'2050']
#global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/10:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')
44/12:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/13:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_emissions_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/14:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

#global_emissions_2050 = global_emissions.loc['2020':'2050',:]
#global_emissions_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/15:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')

global_emissions
44/16:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
#rci = 0,5 

#global_baseline

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/17:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
#rci = 0,5 

global_baseline_2050 = global_baseline.loc[0:6,:]
global_baseline_2050

#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/18:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
#rci = 0,5 

global_baseline_2050 = global_baseline.loc[0:6,:]
global_baseline_2050

RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/19:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
rci = 0,5 

global_baseline_2050 = global_baseline.loc[0:6,:]
global_baseline_2050

RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/20:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')
44/21:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
rci = 0,5 

global_baseline_2050 = global_baseline.loc[0:6,:]
global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/22:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
rci = 0,5 

global_baseline_2050 = global_baseline.loc['2020':'2050',:]
global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/23:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions_2050
44/24:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')

global_emissions_2050 = global_emissions.loc[0:6,:]
global_emissions
44/25:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline.set_index('year')

global_emissions_2050 = global_emissions.loc[0:6,:]
global_baseline
38/10:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
38/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
38/12:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
38/13:
## world population 

global_population = mitigation_population.sum(axis=0)
global_population
38/14:
#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
38/15:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

allowance_2020
#fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
#fig.show()
38/16:
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

allowance_2020
fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
44/26:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions = global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline = global_baseline.set_index('year')

global_baseline
44/27:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions = global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline = global_baseline.set_index('year')
44/28:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_emissions_2050
rci = 0,5 

global_baseline_2050 = global_baseline.loc['2020':'2050',:]
global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/29:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_emissions_2050
rci = 0,5 

global_baseline_2050 = global_baseline.loc['2020':'2050',:]
global_baseline_2050

RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/30:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_emissions_2050
rci = 0,5 

global_baseline_2050 = global_baseline.loc['2020':'2050',:]
global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/31:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_emissions_2050
#rci = 0,5 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/32:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_emissions_2050.reshape(2,1)
#rci = 0,5 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/33:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]
type(global_emissions_2050)
#rci = 0,5 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/34:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050


#rci = 0,5 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/35:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050


#rci = 0,5 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/36:
#regional allowance GDR for t< 2051 

idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050

sub1= sub*rci

#rci = 0,5 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/37:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050

sub1= sub*rci

 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/38:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/39:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub.pop('year')
sub
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/40:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub.reset_index()
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/41:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub.reset_index()
sub.drop(['year'], axis=1)
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/42:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub.reset_index()
sub.drop(['year'])
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/43:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub.reset_index()
sub.drop('year')
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/44:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub.reset_index()
sub
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/45:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/46:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop('year')
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/47:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub
#sub.drop('year')
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/48:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns['year'])
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/49:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0])
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/50:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/51:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
regional_baseline_2050
#global_baseline_2050 = global_baseline.loc[idx[:,'2020':'2050']]

global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)
sub
 

#global_baseline_2050 = global_baseline.loc['2020':'2050',:]
#global_baseline_2050

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/52:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub *rci
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/53:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA['emissions'].multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/54:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub['emissions'].multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/55:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub['emissions'].multiply(0,5)
sub

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/56:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub.multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/57:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub(0).multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/58:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub('emissions').multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/59:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub('emissions').multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
44/60:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions = global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline = global_baseline.set_index('year')
46/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions = global_emissions.to_frame().reset_index()
global_emissions.rename(columns = {'index':'year'},
         inplace = True )
global_emissions.columns = ['year','emissions']
global_emissions = global_emissions.set_index('year')

global_baseline = global_baseline.to_frame().reset_index()
global_baseline.rename(columns = {'index':'year'},
         inplace = True )
global_baseline.columns = ['year','emissions']
global_baseline = global_baseline.set_index('year')
46/2:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]

sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub('emissions').multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/3:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub('emissions').multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/4:
#regional allowance GDR for t< 2051 
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

sub

#RA = sub('emissions').multiply(0,5)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/5:
rci = np.array([1, 0,5])
rci
46/6:
#regional allowance GDR for t< 2051 

rci
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub*rci[:,None]
RA

#RA = sub('emissions').multiply(0,5)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/7:
rci = np.array([1, 0.5])
rci
46/8:
#regional allowance GDR for t< 2051 

rci
rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub*rci[:,None]
RA

#RA = sub('emissions').multiply(0,5)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/9:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

#RA = sub('emissions').multiply(0,5)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/10:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub.multiply(0,5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/11:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = sub.multiply(0.5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/12:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = regional_baseline_2050 - sub.multiply(0.5)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/13:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = regional_baseline_2050.substract (sub.multiply(0.5), axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/14:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)

RA = regional_baseline_2050.subtract (sub.multiply(0.5), axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/15:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)
sub = sub.multiply(0.5)

RA = regional_baseline_2050.subtract (sub.multiply(0.5), axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/16:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)
sub = sub.multiply(0.5)

RA = regional_baseline_2050.subtract(sub,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/17:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]



sub = global_baseline_2050- global_emissions_2050
sub = sub.reset_index()
sub.drop(sub.columns[0], axis =1, inplace = True)
sub = sub.multiply(0.5)
sub
#RA = regional_baseline_2050.subtract(sub,axis =1)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/18:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]

#twee allowances berekening met de volledige formule 

sub = global_baseline_2050- global_emissions_2050
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline_2050.subtract(sub * 0.5,axis =1)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/19:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',:]
global_baseline_2050= global_baseline.loc['2020':'2050',:]

#twee allowances berekening met de volledige formule 

sub = global_baseline_2050- global_emissions_2050
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline_2050.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/20: global_baseline
46/21: global_baseline["emissions"]
46/22:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050',"emissions"]

#twee allowances berekening met de volledige formule 

#sub = global_baseline_2050- global_emissions_2050
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline_2050.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/23: global_emissions_2050
46/24:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050',"emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline_2050- global_emissions_2050
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline_2050.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
48/1: global_emissions.index - 2020
48/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
48/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
48/4: global_emissions.index - 2020
48/5: global_emissions.index
48/6: global_emissions.index.astype(int)
48/7: (global_emissions.index.astype(int) - 2020)
48/8: (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
48/9:
tijd_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
np.minimum(tijd_in_percentage,1)
46/25:
#regional allowance GDR for t< 2051 

rci = 0,5
global_emissions = global_emissions.loc['"emissions"]
global_baseline_2050= global_baseline.loc["emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/26:
#regional allowance GDR for t< 2051 

rci = 0,5
global_emissions = global_emissions.loc["emissions"]
global_baseline_2050= global_baseline.loc["emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/27:
#regional allowance GDR for t< 2051 

rci = 0,5

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
sub
RA = regional_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/28:
#regional allowance GDR for t< 2051 

rci = 0,5

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
sub
RA = mitigation_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/29:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline_2050- global_emissions_2050
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline_2050.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/30:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[:, "emissions"]
global_emissions_2050 = global_emissions.loc[:,"emissions"]
global_baseline_2050= global_baseline.loc[:, "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = regional_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/31:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = mitigation_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/32:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)

RA = mitigation_baseline.subtract(sub * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/33:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
#RA = mitigation_baseline.subtract(sub * 0.5,axis =1)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/34:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = mitigation_baseline.subtract(sub(["emissions"]) * 0.5,axis =1)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/35:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = mitigation_baseline.subtract(sub("emissions") * 0.5,axis =1)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/36:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
46/37:
#regional allowance GDR for t< 2051 

rci = 0,5
idx = pd.IndexSlice
regional_baseline_2050= mitigation_baseline.loc[idx[:,'2020':'2050']]
global_emissions_2050 = global_emissions.loc['2020':'2050',"emissions"]
global_baseline_2050= global_baseline.loc['2020':'2050', "emissions"]

#twee allowances berekening met de volledige formule 

sub = global_baseline- global_emissions
# sub = sub.reset_index()
# sub.drop(sub.columns[0], axis =1, inplace = True)
# sub = sub.multiply(0.5)
sub
RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA

#RA_2050 = regional_baseline_2050 - (global_baseline_2050- global_emissions_2050)*rci


#factor_RA_2050 = (global_baseline_2050- global_emissions_2050)*rci
#RA_2050= regional_baseline_2050- factor_RA_2050

#werkt nog niet aangezien ze niet dezelfde grote zijn 

#GDR_2050 =

#correction factor
52/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
52/2:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv(regional_allowance_ATP.csv)
52/3:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv('regional_allowance_ATP.csv')
46/38:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_alllowance_ATP.csv')
46/39:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')
46/40:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70)*mitigation_baseline-(sub)*0.5+(((2150-2020)/70))*regional_alllowance_ATP
GDR_2150
46/41:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70)*mitigation_baseline-(sub)*0.5+(((2150-2020)/70))*regional_allowance_ATP
GDR_2150
46/42:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 

#*mitigation_baseline-(sub)*0.5+(((2150-2020)/70))*regional_allowance_ATP
#GDR_2150
46/43:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
#*mitigation_baseline-(sub)*0.5+(((2150-2020)/70))*regional_allowance_ATP
#GDR_2150
46/44:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = *mitigation_baseline-(sub)*0.5+(((2150-2020)/70)) 
part

#*regional_allowance_ATP
#GDR_2150
46/45:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub)*0.5+(((2150-2020)/70)) 
part

#*regional_allowance_ATP
#GDR_2150
46/46:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
part

#*regional_allowance_ATP
#GDR_2150
46/47:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 

#*regional_allowance_ATP
#GDR_2150
46/48:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 
#*regional_allowance_ATP
#GDR_2150
46/49:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
46/50:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
#GDR_2150
46/51:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP(['emissions'])
GDR_2150
#GDR_2150
46/52:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP['emissions']
GDR_2150
#GDR_2150
53/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')
53/2:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA

#twee allowances berekening met de volledige formule
53/3:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA

#twee allowances berekening met de volledige formule
53/4:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub['emissions'])*0.5+(((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP['emissions']
GDR_2150
#GDR_2150
53/5:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/6:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
sub
#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/7:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
sub
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)
#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/8:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
sub
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)
RA
#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/9:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP['emissions']
GDR_2150
#GDR_2150
53/10:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
#GDR_2150
53/11:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
sub
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP
53/13:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP.set_index('Region')
53/14:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/15:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/16:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/17:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/18:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 

type(GDR_2150)
#GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/19:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 

#GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/20:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/21:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part.to_frame()
GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/22:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/23:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/24:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/25:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
GDR_2150

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/26:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
GDR_2150

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/27:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_frame()
GDR_2150.astype(int)
GDR_2150

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/28:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame()
#GDR_2150.astype(int)
GDR_2150

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/29:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame()
#GDR_2150.astype(int)
GDR_2150

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/30:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame()
#GDR_2150.astype(int)
GDR_2150

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/31:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame()
#GDR_2150.astype(int)
GDR_2150

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/32:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame()
#GDR_2150.astype(int)
GDR_2150

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/33:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/34:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/35:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/36:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
sub
#RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/37:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions

#RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/38:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions

global_emissions 
#RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/39:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150.drop(axis =1)

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/40:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150.drop(axis =1, columns = 0)

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/41:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150.drop(axis =0, columns = 0)

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/42:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =0, columns = 0)

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/43:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =0, columns = 0)
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/44:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =0, columns(0))
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/45:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =0, columns = '0')
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/46:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =1, columns = '0')
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/47:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =1, columns = '1')
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/48:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
GDR_2150 = GDR_2150.drop(axis =1, columns = 1)
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/49:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/50:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_series()
GDR_2150

#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/51:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame()
GDR_2150

#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/52:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()

#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/53:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/54:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(['index'])
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/55:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(['index'],axos=1)
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/56:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(['index'],axis=1)
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/57:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(['0'],axis=1)
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/58:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(['0'],axis=0)
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/59:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(columns = ['0'])
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/60:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(columns = ['index'])
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/61:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.drop(columns = ['0'])
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/62:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/63:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150.drop("Region")
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/64:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150.drop(columns = ["Region"])
#GDR_2150.astype(int)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/65:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150.drop(columns = ["Region"])

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/66:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150.drop(columns = ["Region"])

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/67:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150.drop(columns = ["Region"])

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/68:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150.drop(columns = ["Region"])

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
part
53/69:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150 =GDR_2150.drop(columns = ["Region"])

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = GDR_2150 * part 
GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/70:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150 
#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/71:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150 
#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/72:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150 
#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/73:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150 
#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/74:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150 

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/75:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
print(GDR_2150)

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/76:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
GDR_2150

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/77:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/78:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'}, {'0': 'count'}
          inplace = False )
GDR_2150

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/79:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'}, {'0': 'count'},
          inplace = False )
GDR_2150

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/80:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150

#=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/81:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["0"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/82:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(column = ["0"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/83:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/84:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/85:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/86:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
#GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/87:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/88:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = GDR_2150 * part 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/89:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = GDR_2150.mul(part) 
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/90:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/91:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions

global_emissions 
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
#RA

#twee allowances berekening met de volledige formule
53/92:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions

global_emissions 
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA

#twee allowances berekening met de volledige formule
53/93:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/94:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150.to_series
GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/95:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150.to_series
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/96:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150.ix[:,0]
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/97:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 = GDR_2150.ix[:,0]
print("\n1st column as a Series:\n")

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/98:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150.squeeze()
GDR_2150 = GDR_2150.ix[:,0]
print("\n1st column as a Series:\n")

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/99:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
#GDR_2150 = GDR_2150.ix[:,0]
print("\n1st column as a Series:\n")

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/100:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
#GDR_2150 = GDR_2150.ix[:,0]

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/101:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
type(GDR)_2150)
#GDR_2150 = GDR_2150.ix[:,0]

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/102:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
type(GDR_2150)
#GDR_2150 = GDR_2150.ix[:,0]

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/103:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/104:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/105:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150, axis = 0 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/106:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
#GDR_2150 = part.mul(GDR_2150, axis = 0 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/107:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150, axis = 0 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
#GDR_2150
53/108:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/109:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
len(GDR_2150)
53/110:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/111:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
#GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/112:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()
len(GDR_2150)
GDR_2150
#GDR_2150 = GDR_2150.ix[:,0]

#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/113:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 =GDR_2150.squeeze()

GDR_2150 = GDR_2150.ix[:,0]
GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/114:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150 = GDR_2150.ix[:,0]
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/115:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/116:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
#part
#GDR_2150 = part.mul(GDR_2150, axis = 1 )
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/117:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150, axis = 1 , fill_value =1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
53/118:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
part
GDR_2150 = part.mul(GDR_2150, axis = 1 , fill_value =1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/119:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = part.mul(GDR_2150, axis = 0 , fill_value =1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/120:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = part.mul(GDR_2150, axis = 0)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/121:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/122:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)) 
GDR_2150 = part.mul(GDR_2150, axis=1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
53/123:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150, axis=1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
part 
GDR_2150
53/124:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])
GDR_2150

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150, axis=1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
part 
GDR_2150
part
53/125:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150, axis=1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
part 
GDR_2150
part
53/126:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150, axis=1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
53/127:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150, axis=0)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
53/128:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part* GDR_2150
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
53/129:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = GDR_2150.mul(part, axis = 0)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
53/130:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = GDR_2150.mul(part, axis = 1)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
53/131:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150 ['0'])
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
53/132:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150(['0']))
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
58/1:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
type(global_emissions)
58/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
58/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
type(global_emissions)
58/4:
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions(2020)/ global_emissions(2020) * mitigation_baseline(2020)
regional_allowance

#check if this was the right way
58/5:
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions(2020)/ global_emissions(2020) * mitigation_baseline
regional_allowance

#check if this was the right way
58/6:
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
regional_allowance

#check if this was the right way
58/7:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
58/8:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
58/9:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.loc[2020]
58/10:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.loc['2020']
58/11: mitigation_emissions
58/12: mitigation_emissions.loc['2020']
58/13: mitigation_emissions.loc[:,'2020']
58/14: mitigation_emissions = mitigation_emissions.loc[:,'2020']
58/15:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = global_emissions.loc['2020']
58/16:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
#global_emissions = global_emissions.loc['2020']
58/17:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
#global_emissions = global_emissions.loc['2020']
58/18:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
mitigation_emissions
58/19:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
#global_emissions = global_emissions.loc['2020']
58/20:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = global_emissions.loc['2020']
58/21: mitigation_emissions = mitigation_emissions.loc[:,'2020']
58/22:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
mitigation_baseline
58/23:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
58/24:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
58/25:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
regional_allowance

#check if this was the right way
58/26:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
58/27:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
mitigation_baseline
59/2:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/3:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/4:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/5:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/6:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/7:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
type(global_emission)
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/8:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
type(global_emission)
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/9:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
type(global_emissionS)
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/10:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)

#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
type(global_emissions)
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/11:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions =global_emissions.to_frame


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/12:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/13:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/14:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/15:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/16:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/17:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/18:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/19:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/20:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/21:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/22:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/23:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/24:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/25:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/26:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=1)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']
global_emissions
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/27:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=1)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/28:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/29:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/30:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/31:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/32:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/33:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/34:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/35:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/36:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/37:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/38:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/39:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/40:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/41:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/42:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/43:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/44:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/45:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/46:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/47:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/48:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/49:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/50:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/51:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/52:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/53:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/54:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/55:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/56:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/57:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/58:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/59:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/60:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/61:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/62:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/63:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/64:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions


#data selection for 2020 
#global_emissions = global_emissions.loc['2020']

#mitigation_emissions = mitigation_emissions.loc[:,'2020']
#mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/65: global_emissions = mitigation_emissions.sum(axis=0)
59/66:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
59/67:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
59/68:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
59/69:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
59/70:

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
#regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
59/71:

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
regional_allowance

#check if this was the right way
59/72:

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
63/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/2:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
63/3:

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']



#check if this was the right way
63/4:

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
global_emissions


#check if this was the right way
63/5:

#data selection for 2020 
global_emissions = global_emissions.loc['2020']
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']



#check if this was the right way
63/6:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
type(global_emissions)
63/7:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.to_frame()
63/8:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.asarray
63/9:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
np.asarray(global_emissions)
63/10:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
np.asarray(global_emissions)
63/11:

#data selection for 2020 

mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']



#check if this was the right way
63/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/13:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
np.asarray(global_emissions)
63/14:

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
#check if this was the right way
63/15:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions = global_emissions([0])
63/16:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions = global_emissions[0]
63/17:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions = global_emissions[1]
63/18:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions
63/19:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions
63/20:

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
#check if this was the right way
63/21:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/22:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions
63/23:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions(1)
63/24:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions[1]
63/25:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions([1])
63/26:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
print(global_emissions([1]))
63/27:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
print(global_emissions[1])
63/28:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
print(global_emissions[0])
63/29:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions = global_emissions[0]
63/30:

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
#check if this was the right way
63/31:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
#regional_allowance

#check if this was the right way
63/32:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance= mitigation_emissions/ global_emissions * mitigation_baseline
regional_allowance

#check if this was the right way
63/33:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020= mitigation_emissions/ global_emissions * mitigation_baseline
regional_allowance_2020

#check if this was the right way
63/34:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_baseline/ global_emissions * mitigation_emissions
regional_allowance_2020

#check if this was the right way
63/35:

#data selection for 2020 
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
#check if this was the right way
63/36:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/37:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions = np.asarray(global_emissions)
global_emissions = global_emissions[0]
63/38:

#data selection for 2020 
#mitigation_emissions = mitigation_emissions.loc[:,'2020']
mitigation_baseline = mitigation_baseline.loc[:,'2020']
#check if this was the right way
63/39:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_baseline/ global_emissions * mitigation_emissions
regional_allowance_2020

#check if this was the right way
63/40:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_baseline/ global_emissions
#regional_allowance_2020 = * mitigation_emissions

#check if this was the right way
63/41:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_baseline/ global_emissions
regional_allowance_2020
#regional_allowance_2020 = * mitigation_emissions

#check if this was the right way
63/42:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020* global_emissions
regional_allowance_2020
#regional_allowance_2020 = * mitigation_emissions

#check if this was the right way
63/43:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/44:
## total emissions per year 
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way
63/45:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020* global_emissions
regional_allowance_2020
#regional_allowance_2020 = * mitigation_emissions

#check if this was the right way
63/46:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/47:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way
63/48:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/49:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way
63/50:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions)
global_emissions_2020 
#global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way
63/51:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions)
global_emissions_2020 
#global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way
63/52:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/53:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way
63/54:
# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020* global_emissions
regional_allowance_2020
#regional_allowance_2020 = * mitigation_emissions

#check if this was the right way
63/55:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020* global_emissions
regional_allowance_2020

#check if this was the right way
63/56:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/57:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020* global_emissions
regional_allowance_2020

#check if this was the right way
63/58:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020

#* global_emissions
regional_allowance_2020

#check if this was the right way
63/59:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
63/60:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
regional_allowance_2020=  mitigation_emissions/global_emissions_2020

#* global_emissions
regional_allowance_2020

#check if this was the right way
64/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP.set_index('Region')
64/2:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions

global_emissions 
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA

#twee allowances berekening met de volledige formule
64/3:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#GDR_2150
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150(['0']))
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/4:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

#GDR_2150 =GDR_2150.squeeze()

#GDR_2150 = GDR_2150.ix[:,0]
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70))


#GDR_2150 = part.mul(GDR_2150(['0']))
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/5:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)

#GDR_2150 = GDR_2150.ix[:,0]
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70))


#GDR_2150 = part.mul(GDR_2150(['0']))
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/6:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)

part = mitigation_baseline-(sub*0.5+((2150-2020)/70))

GDR_2150= GDR_2150[0]

GDR_2150 = part.mul(GDR_2150(['0']))
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/7:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)

part = mitigation_baseline-(sub*0.5+((2150-2020)/70))

GDR_2150= GDR_2150[0]

#GDR_2150 = part.mul(GDR_2150(['0']))
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/8:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/9:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP.set_index('Region')
64/10:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA
64/11:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/12:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/13:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150_1 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/14:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
#GDR_2150_1 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/15:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
#GDR_2150_1 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
GDR_2150
#part
64/16:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
#GDR_2150_1 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP

#part
64/17:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
#GDR_2150_1 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP

#part
64/18:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP.set_index('Region')
64/19:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA
64/20:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
64/21:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150 = part.mul(GDR_2150)
GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP.set_index('Region')
66/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP.set_index('Region')
66/3:
#regional allowance GDR for t< 2051 

rci = 0,5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub* 0.5,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA
66/4:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/5:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/6:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70)
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/7:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/8:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/9:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
 
GDR_2150
#part
66/10:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
part
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/11:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
part
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/12:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
part
GDR_2150 = part*GDR_2150
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/13:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/14:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = ndarray.item(GDR_2150)
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/15:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/16:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
type(GDR_2150)
#part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/17:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
#GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/18:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/19:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
GDR_2150
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/20:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
part
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/21:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)*regional_allowance_ATP
#GDR_2150 = GDR_2150 *regional_allowance_ATP
66/22:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)*regional_allowance_ATP
GDR_2150 = GDR_2150 *regional_allowance_ATP
66/23:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)*regional_allowance_ATP
GDR_2150
66/24:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
GDR_2150
66/25:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
GDR_2150
66/26:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('regional_allowance_ATP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
66/27:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
#GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
GDR_2150
66/28:
# second approach 

GDR_2150 = (2150 -global_emissions.index.astype(int)/70) 
GDR_2150 = GDR_2150.to_frame().reset_index()
GDR_2150 = GDR_2150.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2150=GDR_2150.drop(columns = ["Region"])

GDR_2150 =np.asarray(GDR_2150)
GDR_2150= GDR_2150[0]
GDR_2150 = GDR_2150.item()
part = mitigation_baseline-(sub*0.5+((2150-2020)/70))
GDR_2150 = part.mul(GDR_2150)
GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
GDR_2150
69/1:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020* global_emissions
GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/3:
## total emissions per year 
global_emission = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020* global_emissions
GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/4:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020* global_emissions
GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/6:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020* global_emissions
GF2020.to_csv('GF2020.csv')
#check if this was the right way
68/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

GF2020 = pd.read_csv('GF2020'.csv)
68/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

GF2020 = pd.read_csv('GF2020.csv)
68/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]

GF2020 = pd.read_csv('GF2020.csv')
68/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

# min max 
tijd_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
np.minimum(tijd_in_percentage,1)
np.maximum(1 - tijd..., 0)
68/5:
tijd_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
np.minimum(tijd_in_percentage,1)
np.maximum(1 - tijd..., 0)
68/6:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

# min max 
tijd_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
np.minimum(tijd_in_percentage,1)
np.maximum(1 - tijd_in_percentage, 0)
68/7:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimun = np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
population
#PCC = gobal_emissions*minimum* mitigation_population/global_population
68/8:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimun = np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
PCC = gobal_emissions*minimum* population + maximum*GF2020
68/9:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimun = np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
PCC = global_emissions*minimum* population + maximum*GF2020
68/10:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
PCC = global_emissions*minimum* population + maximum*GF2020
68/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
GF2020
69/7:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020* global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/9:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020* global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/10:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 #* global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/12:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]

#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 #* global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/13:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emisisons.to_frame()

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 #* global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/14:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissisons.to_frame()
69/15:
## total emissions per year 
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.to_frame()
69/16:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/17:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/18:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/19:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/20:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
GF2020.to_csv('GF2020.csv')
#check if this was the right way
68/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
GF2020
68/13:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
PCC = global_emissions*minimum* population + maximum*GF2020
68/14:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
maxi = maximum*GF2020 
maxi
#PCC = global_emissions*minimum* population + maximum*GF2020
68/15:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
maxi = maximum.mul(GF2020) 
maxi
#PCC = global_emissions*minimum* population + maximum*GF2020
68/16:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

# calculations
population = mitigation_population/global_population
maximum
#PCC = global_emissions*minimum* population + maximum*GF2020
68/17:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
maximum
#PCC = global_emissions*minimum* population + maximum*GF2020
68/18:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
PCC = global_emissions*minimum* population + maximum*GF2020
68/19:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
PCC = global_emissions*minimum* population + maximum*GF2020
68/20:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/21:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
PCC= minimum*population 
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/22:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
PCC= minimum*population
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/23:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
population
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/24:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/25:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020.drop("region")
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/26:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020.drop("Region")
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/27:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020.drop(columns = ["Region"])
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/28:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)
GF2020
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/29:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)
GF2020
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/30:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
GF2020
68/31:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)
GF2020
#PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/32:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/33:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
GF2020
68/34:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020))
68/35:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC
68/36:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
GF2020
68/37:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC
68/38:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
GF2020
68/39:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
67/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
67/2:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv('regional_allowance_ATP.csv')
67/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP
EAG 
Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
67/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
69/21:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
69/22:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
69/23:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
69/24:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/25:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/26:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
69/27:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
69/28:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER

EAG
69/29:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER

MCG
69/30:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER

TMC
69/31:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER

GER
67/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
69/32:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/33:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/34:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
GF2020.to_csv('GF2020.csv')
#check if this was the right way
69/35:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/36:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
68/40:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
68/41:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
#PCC.to_csv("PCC.csv")
68/42:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
68/43:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
68/44:
#NPV all steps 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC
68/45:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
68/46:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
#PCC.to_csv("PCC.csv")
68/47:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
68/48:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG 
PCC_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
68/49:
#NPV all steps 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC
68/50:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG 

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
68/51:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
69/37:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
69/38:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
71/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
71/2:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
71/3: mitigation_emissions.sum(axis=0)
71/4: mitigation_emissions
71/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
71/6: mitigation_emissions
71/7:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions_2020/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
71/8: mitigation_emissions
71/9: mitigation_emissions
71/10: mitigation_emissions
71/11: mitigation_emissions.sum(axis=0)
71/12: global_emissions = mitigation_emissions.sum(axis=0)
71/13:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions
71/14:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF2020=  mitigation_emissions_2020/global_emissions_2020 * global_emissions
GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
71/15: mitigation_emissions_2020/global_emissions_2020
71/16: mitigation_emissions_2020/global_emissions_2020
71/17:
pd.DataFrame({
    year: mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2150, 5)
})
71/18:
pd.DataFrame({
    year: mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
71/19:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.index
71/20:
pd.DataFrame({
    year: mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
}).columns
71/21:
pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
}).columns
71/22:
pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
71/23:

global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
# GF2020=  mitigation_emissions_2020/global_emissions_2020 * global_emissions
# GF2020
#GF2020.to_csv('GF2020.csv')
#check if this was the right way
71/24: GF_fractions
71/25: global_emissions
71/26: GF_fractions * global_emissions
71/27: global_emissions
66/29:
#regional allowance GDR for t< 2051 

rci = 0.5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub* rci,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA
66/30: global_baseline
66/31: global_emissions
66/32: global_baseline - global_emissions
66/33: (global_baseline - global_emissions) * 0.5
66/34: mitigation_baseline
66/35:
#regional allowance GDR for t< 2051 

rci = 0.5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub* rci,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA.sum(axis=1)
66/36:
#regional allowance GDR for t< 2051 

rci = 0.5
sub = global_baseline- global_emissions
RA = mitigation_baseline.subtract(sub* rci,axis =1)

#RA = mitigation_baseline.subtract(sub["emissions"] * 0.5,axis =1)
RA.sum(axis=0)
73/1:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020
GF2020.to_csv('GF2020.csv')
#check if this was the right way
73/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
73/3:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020
GF2020.to_csv('GF2020.csv')
#check if this was the right way
73/4:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020
#check if this was the right way
74/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
74/2:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
#PCC.to_csv("PCC.csv")
74/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC
#PCC.to_csv("PCC.csv")
74/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
74/5:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC
#PCC.to_csv("PCC.csv")
74/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
74/7:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
74/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
74/9:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
74/10:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
74/11:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG 

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

#NPV all steps 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC
73/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER

GER
73/6:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
73/7:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
73/8:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)
73/9:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF
73/10:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
72/1:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP
72/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
72/3:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv('regional_allowance_ATP.csv')
72/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
72/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
MCG.to_csv("output\MCP_AP.csv")
72/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP
72/7:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
73/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
73/12:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020
#check if this was the right way
73/13:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
75/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline
75/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]


damage_costs_mitigation
76/1:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance
76/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
76/3:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
76/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
76/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
76/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
76/7:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
76/8:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
76/9:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
76/10:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC
76/11:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
74/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
74/13:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
74/14:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
74/15:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG 

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

#NPV all steps 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
78/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCG_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
78/2:
import pandas as pd
import plotly.express as px
78/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCG_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
78/4:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
78/5:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
78/6:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/7:
#plot of all all the MCG against each other with the region as an axis 

MCG_GF_fig = px.bar(MCG_GF, x="Region", y="year",)
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
78/8:
#plot of all all the MCG against each other with the region as an axis 

MCG_GF_fig = px.bar(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
78/9:
#plot of all all the MCG against each other with the region as an axis 

MCG_GF_fig = px.bar(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_fig
78/10:
#plot of all all the MCG against each other with the region as an axis 

MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_fig
78/11:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_sum = sum(MCG_GF, axis =1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/12:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_sum = MCG_GF.sum( axis =1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/13:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_sum = MCG_GF.sum(axis =0)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/14:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/15:
import pandas as pd
import numpy as np
import plotly.express as px
78/16:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/17:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/18:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ = MCG_GF.set_index("Region")
#MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/19:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
#MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF
78/20:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/21:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/22:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_fig = px.scatter(MCG_GF, x="Region", y=['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'])
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/23:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
78/24:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/25:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
MCG_GF_fig
78/26:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_sum.to_frame
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
MCG_GF_fig
78/27:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/28:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_sum.to_frame
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
MCG_GF_fig
78/29:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/30:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
MCG_GF_fig
78/31:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/32:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
MCG_GF_fig
78/33:
import pandas as pd
import numpy as np
import plotly.express as px
78/34:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/35:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/36:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF.sum(axis = 1)
#MCG_GF_sum= MCG_GF_sum.to_frame()
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/37:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
#MCG_GF_sum= MCG_GF_sum.to_frame()
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/38:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
#MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/39:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/40:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame().reset_index
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/41:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/42:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/43:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/44:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
MCG_GF_sum
#MCG_GF_fig
78/45:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/46:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/47:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/48:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_sum 
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/49:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_sum
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/50:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/51:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_sum
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/52:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
#MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_sum
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/53:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index(inplace=True)
MCG_GF_sum
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/54:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index
MCG_GF_sum
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/55:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum
#MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="value")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/56:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="0")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/57:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.colums = ['Region', 'MCG']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="0")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/58:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="0")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/59:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/60:
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/61:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG']
MCG_AP_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
78/62:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG']
MCG_AP_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
MCG_AP_fig
78/63:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_AP
78/64:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/65:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG']
MCG_AP_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
#MCG_AP_fig
78/66:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG']
MCG_PCC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
MCG_PCC_fig
78/67:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG']
MCG_IEPC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
MCG_IEPC_fig
78/68:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG']
MCG_IEPC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
78/69:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG']
MCG_PCC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
#MCG_PCC_fig
78/70:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
78/71:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/72:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/73:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG']
MCG_AP_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
#MCG_AP_fig
78/74:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG']
MCG_PCC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
#MCG_PCC_fig
78/75:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG']
MCG_IEPC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG")
78/76:
#combining all the plots 
fig_combined = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig + MCG_PCC_fig + MCG_AP_fig , layout= MCG_GF_fig.data.layout)
78/77:
#combining all the plots 
fig_combined = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data , layout= MCG_GF_fig.data.layout)
78/78:
#combining all the plots 
fig_combined = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data , layout= MCG_GF_fig.layout)
78/79:
#combining all the plots 
all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data , layout= MCG_GF_fig.layout)
78/80:
#combining all the plots 
all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data , layout= MCG_GF_fig.layout)
all_MCGs
78/81:
#combining all the plots 
all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
all_MCGs
78/82:
#combining all the plots 
all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data) #+ MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
all_MCGs
78/83:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
78/84:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

MCG_GF
78/85:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
78/86:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum =MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
78/87:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
78/88:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum =MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
81/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
81/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
81/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum =MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
81/4:
#combining all the plots 

frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames)
MCGs

#all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data) #+ MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
#all_MCGs
81/5:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG IEPC")
81/6:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
81/7:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG AP")
#MCG_AP_fig
81/8:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region", y="MCG AP")
#MCG_AP_fig
81/9:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG PCC")
#MCG_PCC_fig
81/10:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region", y="MCG PCC")
#MCG_PCC_fig
81/11:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region", y="MCG IEPC")
81/12:
#combining all the plots 

#frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
#MCGs = pd.concat(frames)
#MCGs

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data) #+ MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
all_MCGs
81/13:
#combining all the plots 

#frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
#MCGs = pd.concat(frames)
#MCGs

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
all_MCGs
81/14:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames)
MCGs
81/15:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames)
print(MCGs)
81/16:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 0 )
print(MCGs)
81/17:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
print(MCGs)
81/18:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[0, 2, 4, 6], axis=1, inplace=True)
print(MCGs)
81/19:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.to_frame()
MCGs = MCGs.drop(MCGs.columns[0, 2, 4, 6], axis=1, inplace=True)
print(MCGs)
81/20:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[0, 2, 4, 6], axis=1, inplace=True)
print(MCGs)
81/21:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1, inplace=True)
print(MCGs)
81/22:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1, inplace=True)
MCGs
81/23:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1, inplace=True)
MCGs
81/24:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1, inplace=True)
MCGs
81/25:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[2, 4, 6]], axis=1, inplace=True)
MCGs
81/26:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
#MCGs.drop(MCGs.columns[[2, 4, 6]], axis=1, inplace=True)
MCGs
81/27:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[2, 4, 6]], axis=1, inplace=True)
MCGs
81/28:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[ 4, 6]], axis=1, inplace=True)
MCGs
81/29:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[ 6]], axis=1, inplace=True)
MCGs
81/30:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1,)
MCGs
81/31:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1)
MCGs
81/32:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1, inplace= False)
MCGs
81/33:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=1, inplace= False)
MCGs
81/34:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[0, 2, 4, 6]], axis=0, inplace=True)
MCGs
81/35:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=0, inplace=True)
MCGs
81/36:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
MCGs
81/37:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
MCGs
82/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
82/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
82/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
82/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region", y="MCG AP")
#MCG_AP_fig
82/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region", y="MCG PCC")
#MCG_PCC_fig
82/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region", y="MCG IEPC")
82/7:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
all_MCGs
82/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
MCGs
82/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
print(MCGs)
82/10:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
#MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
82/11:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
#MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
MCGs
82/12:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2, 4, 6]], axis=1, inplace=True)
MCGs
82/13:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2]], axis=1, inplace=True)
MCGs
82/14:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 2]], axis=1, inplace=True)
MCGs
82/15:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ 0]], axis=1, inplace=True)
MCGs
82/16:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ ]], axis=1, inplace=True)
MCGs
83/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
83/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
83/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
83/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region", y="MCG AP")
#MCG_AP_fig
83/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region", y="MCG PCC")
#MCG_PCC_fig
83/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region", y="MCG IEPC")
83/7:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(MCGs.columns[[ ]], axis=1, inplace=True)
MCGs
83/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
#MCGs = MCGs.drop(MCGs.columns[[ ]], axis=1, inplace=True)
MCGs
83/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
#MCGs = MCGs.drop(MCGs.columns[[ ]], axis=1, inplace=True)
MCGs
83/10:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
83/11:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
83/12:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
83/13:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
83/14:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
#MCGs = MCGs.drop(MCGs.columns[[ ]], axis=1, inplace=True)
MCGs
83/15:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs
83/16:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.transpose()
MCGs
#MCGs = px.scatter(MCGs,
                 # x="Region",
                 # y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF']
83/17:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.transpose()
MCGs
#MCGs = px.scatter(MCGs,
                 # x="Region",
                 # y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF']
83/18:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = MCGs.transpose()
MCGs
#MCGs = px.scatter(MCGs,
                 # x="Region",
                 # y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF']
83/19:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = MCGs.transpose()

MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  color = "Region 3"
83/20:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = MCGs.transpose()

MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  color = "Region 3",)
83/21:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  color = "Region 3",)
83/22:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  color = "Region 3",)
MCGs
83/23:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  color = ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'])
MCGs
83/24:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
all_MCGs
83/25:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
MCGs
83/26:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'])
MCGs
83/27:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'])
MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap"
    range = [-10,3]
)
83/28:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'])
MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
    range = [-10,3],
)
83/29:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'])
MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
    #range = [-10,3],
)
83/30:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime'


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
    #range = [-10,3],
)
83/31:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
    #range = [-10,3],
)
85/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
85/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
85/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
85/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
85/5:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
85/6:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
85/7:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
85/8:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
85/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
    #range = [-10,3],
)
85/10:
#CBR 

CBR_GF
85/11:
#CBR 

CBR_GF.drop('Unnamed: 0')
85/12:
#CBR 

CBR_GF.drop(['Unnamed: 0'], axis= 1)
85/13:
#CBR 

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis= 1)
CBR_AP
#frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
85/14:
#CBR 

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis= 1)
CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis= 1)
CBR_IEPC 
#frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
85/15:
#CBR 

CBR_GF_c = CBR_GF.drop(['Unnamed: 0'], axis= 1)
CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis= 1)
CBR_IEPC 
#frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
85/16:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
85/17:
#CBR 

CBR_GF_c = CBR_GF.drop(['Unnamed: 0'], axis= 1)
CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis= 1)
CBR_IEPC 
#frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
85/18:
#CBR 
 
#frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
85/19:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs
85/20:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
85/21:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
CBRs
85/22:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
CBRs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')


CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    #range = [-10,3],
)
85/23:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
85/24:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
CBRs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')


CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    #range = [-10,3],
)
85/25:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
#CBRs = px.scatter(MCGs,
                 # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                #  title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs.update_xaxes(
   # title = "Region"
#)

#CBRs.update_yaxes(
    3title = "Cost Benefit Ratio",
    #range = [-10,3],
#)
CBRs
85/26:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
#CBRs = px.scatter(MCGs,
                 # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                #  title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs.update_xaxes(
   # title = "Region"
#)

#CBRs.update_yaxes(
    #title = "Cost Benefit Ratio",
    #range = [-10,3],
#)
CBRs
85/27:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
CBRs = px.scatter(CBRs,
                  x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')


 CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    range = [-10,3],
)
CBRs
85/28:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
CBRs = px.scatter(CBRs,
                  x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    range = [-10,3],
)
CBRs
85/29:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
85/30:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)
CBRs = px.scatter(CBRs,
                  x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    range = [-10,3],
)
CBRs
86/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
86/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
86/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
86/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
86/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
86/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
86/7:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
    #range = [-10,3],
)
86/8:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)

CBRs = px.scatter(CBRs,
                  x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    range = [-10,3],
)
86/9: CBR_AP
86/10: CBR_GF
86/11: CBR_IEPC
86/12: CBR_PCC
86/13:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
  #                x="Region 3",
 #                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
  #                title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
#    title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
 #   range = [-10,3],
#)
CBRs
86/14:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
#MCGs = px.scatter(MCGs,
 #                 x="Region 3",
 #                y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
 #                 title = 'Mitigation Cost GAP per region per burden sharing regime')


#MCGs.update_xaxes(
#    title = "Region"
#)

#MCGs.update_yaxes(
 #   title = "Mitigation Cost Gap",
  #  #range = [-10,3],
#)
MCGs
86/15:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
  #                x="Region 3",
 #                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
  #                title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
#    title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
 #   range = [-10,3],
#)
CBRs
87/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
87/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
87/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
87/4:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
87/5:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
87/6:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
87/7:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
87/8:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
  #                x="Region 3",
 #                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
  #                title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
#    title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
 #   range = [-10,3],
#)
CBRs
87/9:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)

CBRs = px.scatter(CBRs,
                x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
    range = [-10,3],
)
CBRs
87/10:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

#CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/11:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/12:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/13:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
87/14:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/15:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

#CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/16:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/17:
#CBR 
 
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

#CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/18:
#CBR 
CBR_AP.columns = ['Region 3', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

#CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/19:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

#CBRs = CBRs.drop(['Region ', 'Region ', 'Region'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/20:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

#CBRs = px.scatter(CBRs,
               # x="Region 3",
                # y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 # title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
    #title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
87/21:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x="Region 3",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
87/22:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x="Region",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
87/23:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x= 'Region',
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
88/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
88/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
88/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
88/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
88/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
88/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
88/7:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
88/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
#MCGs = px.scatter(MCGs,
 #                 x="Region 3",
 #                y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
 #                 title = 'Mitigation Cost GAP per region per burden sharing regime')


#MCGs.update_xaxes(
#    title = "Region"
#)

#MCGs.update_yaxes(
 #   title = "Mitigation Cost Gap",
  #  #range = [-10,3],
#)
MCGs
88/9:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x= 'Region',
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
88/10:
#CBR 
CBR_AP.columns = ['Region ', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )

CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x = 'Region ',
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime',)

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
88/11:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


#MCGs.update_xaxes(
#    title = "Region"
#)

#MCGs.update_yaxes(
 #   title = "Mitigation Cost Gap",
  #  #range = [-10,3],
#)
MCGs
88/12:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x = 'Region',
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
88/13:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
                x = "Region",
                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                  title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
    title = "Region"
)

CBRs.update_yaxes(
    title = "Cost Benefit Ratio",
  #  range = [-10,3],
)
CBRs
88/14:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
#MCGs = px.scatter(MCGs,
 #                 x="Region 3",
  #               y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
   #               title = 'Mitigation Cost GAP per region per burden sharing regime')


#MCGs.update_xaxes(
#    title = "Region"
#)

#MCGs.update_yaxes(
 #   title = "Mitigation Cost Gap",
  #  #range = [-10,3],
#)
len(MCGs)
88/15:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

#CBRs = px.scatter(CBRs,
 #               x = "Region",
  #               y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
   #               title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
 #   title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
len(CBRs)
88/16:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

#CBRs = px.scatter(CBRs,
 #               x = "Region",
  #               y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
   #               title = 'Cost Benefit Ratio per region per burden sharing regime')

#CBRs.update_xaxes(
 #   title = "Region"
#)

#CBRs.update_yaxes(
 #   title = "Cost Benefit Ratio",
  #  range = [-10,3],
#)
CBRs
88/17:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
88/18:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs = px.scatter(CBRs,
               x = "Region",
                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs.update_xaxes(
   title = "Region"
)

CBRs.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs
88/19:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

# CBRs = px.scatter(CBRs,
#                x = "Region",
#                 y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                  title = 'Cost Benefit Ratio per region per burden sharing regime')

# CBRs.update_xaxes(
#    title = "Region"
# )

# CBRs.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
CBRs
88/20: MCGs
88/21:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
# MCGs = px.scatter(MCGs,
#                   x="Region 3",
#                  y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
#                   title = 'Mitigation Cost GAP per region per burden sharing regime')


# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
88/22: MCGs
88/23: MCGs.shape
88/24: CBRs.shape
88/25:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs,
               x = "Region",
                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/26: CBRs
88/27:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(MCGs,
               x = "Region",
                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/28:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(MCGs,
               x = "Region3",
                y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                 title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/29:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= "Region_3", y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')

# MCGs = px.scatter(MCGs,
#                   x="Region 3",
#                  y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
#                   title = 'Mitigation Cost GAP per region per burden sharing regime')


CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/30:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= "Region", y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')

# MCGs = px.scatter(MCGs,
#                   x="Region 3",
#                  y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
#                   title = 'Mitigation Cost GAP per region per burden sharing regime')


CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/31:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/32:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
88/33: CBRs.head()
88/34: CBRs.iloc[:,1:]
88/35: CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= CBRs.iloc[:,1:] ,title = 'Cost Benefit Ratio per region per burden sharing regime')
88/36: CBRs_plot = px.scatter(CBRs, x= "Region", y= CBRs.iloc[:,1:] ,title = 'Cost Benefit Ratio per region per burden sharing regime')
88/37:
import matplotlib.pyplot as plt


plt.plot(CBRs, x = CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')
88/38:
import matplotlib.pyplot as plt


plt.plot(CBRs.Region, y= CBRs.iloc[:,1:],title = 'Cost Benefit Ratio per region per burden sharing regime')
88/39:
import matplotlib.pyplot as plt


plt.plot(CBRs.iloc[:,1:],title = 'Cost Benefit Ratio per region per burden sharing regime')
88/40:
import matplotlib.pyplot as plt


plt.plot(CBRs.Region, CBRs.iloc[:,1:],title = 'Cost Benefit Ratio per region per burden sharing regime')
88/41:
import matplotlib.pyplot as plt


plt.plot(CBRs.Region, CBRs.iloc[:,1:])
88/42:
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.plot(CBRs.Region, CBRs.iloc[:,1:])
fig.set_size_inches(10, 5)
88/43:
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.plot(CBRs.Region, CBRs.iloc[:,1:])
plt.xticks(rotation =45)
fig.set_size_inches(10, 5)
88/44:
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.scatter(CBRs.Region, CBRs.iloc[:,1:])
plt.xticks(rotation =45)
fig.set_size_inches(10, 5)
88/45:
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.scatter(CBRs.Region, CBRs.iloc[:,1])
ax.scatter(CBRs.Region, CBRs.iloc[:,2])
ax.scatter(CBRs.Region, CBRs.iloc[:,3])
ax.scatter(CBRs.Region, CBRs.iloc[:,4])
plt.xticks(rotation =45)
fig.set_size_inches(10, 5)
88/46:
import matplotlib.pyplot as plt

fig, ax = plt.subplots()

ax.scatter(CBRs.Region, CBRs.iloc[:,1])
ax.scatter(CBRs.Region, CBRs.iloc[:,2])
ax.scatter(CBRs.Region, CBRs.iloc[:,3])
ax.scatter(CBRs.Region, CBRs.iloc[:,4])
plt.xticks(rotation =45)
plt.legend()
fig.set_size_inches(10, 5)
88/47:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
89/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
89/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
89/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
89/4:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
89/5:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
89/6:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
89/7:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
89/8:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
89/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
89/10:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
90/1:
# CBR plot 

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
90/2:
#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
90/3:
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
90/4:
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot

type(CBRs)
90/5:
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.reset_index

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
90/6:
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.reset_index
CBRs

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
90/7:
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.reset_index
CBRs

CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
90/8:
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.to_csv('output')
CBRs

#CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
89/11:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output.csv')
89/12:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
89/13:
#CBR 
# CBR_AP.columns = ['Region', 'CBR AP']
# CBR_GF.columns = ['Region 2', 'CBR GF']
# CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
# CBR_PCC.columns = ['Region 3', 'CBR PCC']
# frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
# CBRs = pd.concat(frames_CBR, axis= 1 )
# CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
89/14:
#CBR 
# CBR_AP.columns = ['Region', 'CBR AP']
# CBR_GF.columns = ['Region 2', 'CBR GF']
# CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
# CBR_PCC.columns = ['Region 3', 'CBR PCC']
# frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
# CBRs = pd.concat(frames_CBR, axis= 1 )
# CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop("Unnamed: 0")

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
89/15:
#CBR 
# CBR_AP.columns = ['Region', 'CBR AP']
# CBR_GF.columns = ['Region 2', 'CBR GF']
# CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
# CBR_PCC.columns = ['Region 3', 'CBR PCC']
# frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
# CBRs = pd.concat(frames_CBR, axis= 1 )
# CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop(["Unnamed: 0"],axis = 1)

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
89/16:
#CBR 
# CBR_AP.columns = ['Region', 'CBR AP']
# CBR_GF.columns = ['Region 2', 'CBR GF']
# CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
# CBR_PCC.columns = ['Region 3', 'CBR PCC']
# frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
# CBRs = pd.concat(frames_CBR, axis= 1 )
# CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop(["Unnamed: 0"],axis = 1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region, y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
94/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
94/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
94/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
94/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
94/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
94/7:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
94/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
94/9:
#CBR 
# CBR_AP.columns = ['Region', 'CBR AP']
# CBR_GF.columns = ['Region 2', 'CBR GF']
# CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
# CBR_PCC.columns = ['Region 3', 'CBR PCC']
# frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
# CBRs = pd.concat(frames_CBR, axis= 1 )
# CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop(["Unnamed: 0"],axis = 1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/10:
CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop(["Unnamed: 0"],axis = 1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/11:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop(["Unnamed: 0"],axis = 1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/12:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
94/13:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.drop(["Unnamed: 0"],axis = 1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/14:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs

# CBRs.drop(["Unnamed: 0"],axis = 1)

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
#                        y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                        title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/15:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
95/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
95/2:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv('regional_allowance_ATP.csv')
95/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")
95/4:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
94/16:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
94/17:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
94/18:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
94/19:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
94/20:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
94/21:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
94/22:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime')


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
94/23:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.to_csv('output\CBRs_plot')

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
#                        y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                        title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
96/1:
#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
96/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
96/3:
#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
96/4: CBR_GF
96/5: CBR_AP
96/6: CBR_IEPC
96/7:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/8:
#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
96/9:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
94/24:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.to_csv('output\CBRs_plot')

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
#                        y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                        title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/25:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
94/26:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.to_csv('output\CBRs_plot')

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
#                        y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                        title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/27:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.to_csv('CBRs_plot')

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
#                        y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                        title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
94/28:
#CBR 
CBR_AP.columns = ['Region', 'CBR AP']
CBR_GF.columns = ['Region 2', 'CBR GF']
CBR_IEPC.columns = ['Region 1', 'CBR IEPC']
CBR_PCC.columns = ['Region 3', 'CBR PCC']
frames_CBR = [CBR_AP, CBR_GF, CBR_IEPC, CBR_PCC]
CBRs = pd.concat(frames_CBR, axis= 1 )
CBRs = CBRs.drop(['Region 2', 'Region 1', 'Region 3'], axis =1)

CBRs.to_csv('CBRs_plot.csv')

# CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
#                        y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
#                        title = 'Cost Benefit Ratio per region per burden sharing regime')


# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "Cost Benefit Ratio",
#    range = [-10,3],
# )
# CBRs_plot
96/10:
#CBR 
CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/11:
#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('CBRs_plot')
96/12:
#CBR 
CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/13:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
96/14:
#CBR 
CBRs_plot = px.scatter(CBRs, x= CBRs.Region,
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/15:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/16:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'CBR_AP',# 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/17:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
96/18:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'CBR_AP',# 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
96/19:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
96/20:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs
96/21:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs
96/22:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.drop("Unnamed: 0")
97/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
97/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
97/3:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'CBR_AP',# 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/4:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBrs
97/5:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs
97/6:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs = CBRs.reset_index
CBRs
97/7:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs = CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs
97/8:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs = CBRs.reset_index
CBRs = CBRs.set_index('Unnamed: 0', inplace = True )
CBRs
97/9:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs = CBRs.reset_index
type(CBRs)
#CBRs = CBRs.set_index('Unnamed: 0', inplace = True )
97/10:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs = CBRs.reset_index
CBRs.to_frame()
#CBRs = CBRs.set_index('Unnamed: 0', inplace = True )
97/11:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.to_frame()
#CBRs = CBRs.set_index('Unnamed: 0', inplace = True )
97/12:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.to_frame()
CBRs.set_index('Unnamed: 0', inplace = True )
97/13:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
97/14:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs
97/15:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'CBR_AP',# 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/16:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= ['CBR_AP', 'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/17:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'CBR_AP', #'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/18:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
97/19:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs
97/20:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'AP', #'CBR_GF', 'CBR_IEPC', 'CBR_PCC'],
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/21:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'AP', 'GF', 'IEPC', 'PCC',
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/22:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'AP', 'GF', 'IEPC', 'PCC', 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
97/23:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= 'AP', 'GF', 'IEPC', 'PCC', 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
97/24:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
97/25:
#CBR 
CBRs_plot = px.scatter(CBRs, x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
97/26:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'AP', 'GF', 'IEPC', 'PCC', 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
97/27:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs
97/28:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
97/29:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
97/30:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
98/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
98/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
98/3:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
98/4:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
type(CBRs_plot)
98/5:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
type(CBRs)
98/6:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'AP'#, 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
98/7:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'AP',# 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime'),
CBRs_plot
98/8:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')
CBRs_plot
98/9:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "Cost Benefit Ratio",
   range = [-10,3],
)
CBRs_plot
98/10:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot
98/11:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
95/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
95/6:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv('output\regional_allowance_ATP.csv')
95/7:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv("output\regional_allowance_ATP.csv")
100/1:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
100/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
100/3:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
100/4:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime')

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
100/5:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
102/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
102/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
102/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
102/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
102/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
102/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
102/7:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
102/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime",'MCG IEPC':"IEPC", 'MCG PCC':"PCC", 'MCG AP':"AP", 'MCG GF':"GF" })


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
102/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime","MCG IEPC":"IEPC", "MCG PCC":"PCC", "MCG AP ":"AP", "MCG GF ":"GF" })


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
102/10:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime","MCG IEPC":"IEPC", "MCG PCC":"PCC", "MCG AP ":"AP", "MCG GF ":"GF" })


MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
104/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
104/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
104/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
104/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
104/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
104/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
104/7:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGS.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"}
                 legend = )



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
104/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGS.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"}



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
104/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGS.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
104/10:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['MCG IEPC', 'MCG PCC', 'MCG AP', 'MCG GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
104/11:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
106/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
106/2:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv("output\ regional_allowance_ATP.csv")
108/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
108/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions per region in 2020')
fig.show()
108/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
108/4:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()
fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
108/5:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()
#fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
108/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
108/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
108/8:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()
#fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
113/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
113/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()
#fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
114/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
114/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
114/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
114/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
IEPC.to_csv('output\allowance_IEPC.csv')

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
114/5:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
IEPC.to_csv("output\allowance_IEPC.csv)

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
114/6:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
IEPC.to_csv("output\allowance_IEPC.csv")

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
114/7:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020
IEPC.to_csv("allowance_IEPC.csv")

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
115/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
115/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
115/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
115/4:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
115/5:
frames = [al_GF,al_PCC,al_IECP,al_ATP]
allowances =  pd.concat(frames, axis= 1 )
allowances
115/6:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
115/7:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 1 )
allowances
115/8:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')

al_GF
117/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
117/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')

al_GF
117/3:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0 )
allowances
117/4:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,ignore_index = True )
allowances
117/5:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,ignore_index = False )
allowances
117/6:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,ignore_index = True )
allowances
117/7:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0 )
allowances
117/8:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0, join= 'inner' )
allowances
117/9:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0 )
allowances
117/10:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0, sort = True  )
allowances
117/11:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,)
allowances
117/12:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,)
allowances.to_csv('allowances')
117/13:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,)
allowances.to_csv('allowances.csv')
117/14:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 1,)
allowances.to_csv('allowances.csv')
allowances
117/15:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')

al_PCC
117/16:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')

al_IEPC
120/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
120/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
120/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
117/17:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
121/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
121/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')

al_IEPC
121/3:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 1,)
allowances.to_csv('allowances.csv')
allowances
121/4:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 1,)
allowances_hor.to_csv('allowances_hor.csv')
allowances
121/5:
frames = [al_GF,al_PCC,al_IEPC,al_ATP]
allowances =  pd.concat(frames, axis= 0,)
allowances.to_csv('allowances_hor.csv')
allowances
121/6: allowances = pd.read_csv('allowances_hor.csv')
121/7:
allowances = pd.read_csv('allowances_hor.csv')
allowances
121/8:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed:0', inplace =True)
allowances
121/9:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed:0 ', inplace =True)
allowances
121/10:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances
121/11:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
121/12:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
121/13:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="Region",
    line_group="GF")
121/14:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="Region",
    line_group="BSR")
121/15:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="Region",
    line_group="BSR")
fig2
121/16:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="BSR")
fig2
121/17:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="Region")
fig2
121/18:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="Region",
    color = 'BSR' )
fig2
121/19:
fig2 = px.line(
    allowances,
    x='Region',
    y="BSR",
    line_group=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150',]
    color = 'BSR' )
fig2
121/20:
fig2 = px.line(
    allowances,
    x='Region',
    y="BSR",
    line_group=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150']
    color = 'BSR' )
fig2
121/21:
fig2 = px.line(
    allowances,
    x='Region',
    y="BSR",
    line_group=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150']
    color = 'BSR' )
fig2
121/22:
fig2 = px.line(
    allowances,
    x='Region',
    y="BSR",
    line_group=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150']) 
    #color = 'BSR' )
fig2
121/23:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="Region",
    color = "Region ")
fig2
121/24:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="Region",
    color = "Region")
fig2
121/25:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="Region",
    color = "BSR")
fig2
121/26:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="Region",
    line_group="Region",
    color = "BSR")
fig2
121/27:
frames = [ 'al_GF', 'al_PCC', 'al_IEPC', 'al_ATP' ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver
121/28:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver
121/29:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver')
121/30:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
122/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
122/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
122/3:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
122/4:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
122/5:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="Region",
    line_group="Region",
    color = "BSR")
fig2
122/6:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="Region",
    line_group="BSR",
    color = "BSR")
fig2
122/7:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="region",
    color = "BSR")
fig2
122/8:
fig2 = px.line(
    allowances,
    x=['2020','2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060','2065', 
       '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115'
       , '2120', '2125', '2130', '2135', '2140', '2145', '2150'],

    y="BSR",
    line_group="Region",
    color = "BSR")
fig2
122/9:
fig2 = px.line(
    allowances,
    x='Region',

    y="BSR",
    line_group="Region",
    color = "BSR")
fig2
122/10:
fig2 = px.line(
    allowances,
    x='Region',

    y="value",
    line_group="Region",
    color = "BSR")
fig2
122/11:
fig2 = px.line(
    allowances,
    x='Region',

    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color = "BSR")
fig2
122/12:
fig2 = px.line(
    allowances,
    x='Region',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color = "Region")
fig2
122/13:
fig2 = px.line(
    allowances,
    x='Region',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color = "BSR")
fig2
122/14:
GF = al_GF.transpose()

# fig = px.line(al_GF, 
#              x= )
122/15:
GF = al_GF.transpose()
GF

# fig = px.line(al_GF, 
#              x= )
122/16:
GF = al_GF.transpose()
GF.columns= GF.loc[0]
GF

fig = px.line(al_GF, 
             x= )
122/17:
GF = al_GF.transpose()
GF.columns= GF.loc[0]
GF

# fig = px.line(al_GF, 
#              x= )
122/18:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF

# fig = px.line(al_GF, 
#              x= )
122/19:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(GF.index[0])
GF
# fig = px.line(al_GF, 
#              x= )
122/20:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(GF.index[1])
GF
# fig = px.line(al_GF, 
#              x= )
122/21:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(GF.index[1], inplace =True)
GF
# fig = px.line(al_GF, 
#              x= )
122/22:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(GF.index[1])
GF
# fig = px.line(al_GF, 
#              x= )
122/23:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF
# fig = px.line(al_GF, 
#              x= )
122/24:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index()
# fig = px.line(al_GF, 
#              x= )
122/25:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index()
GF.rename(columns = {'index':'Region'})

# fig = px.line(al_GF, 
#              x= )
122/26:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'})

# fig = px.line(al_GF, 
#              x= )
122/27:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)

# fig = px.line(al_GF, 
#              x= )
122/28:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)
GF

# fig = px.line(al_GF, 
#              x= )
122/29:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(index= index)

# fig = px.line(al_GF, 
#              x= )
122/30:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(index= 'index')

# fig = px.line(al_GF, 
#              x= )
122/31:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)
GF.set_index('index', inplace =True)
GF

# fig = px.line(al_GF, 
#              x= )
122/32:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)
GF.set_index('index', inplace =True)
GF

# fig = px.line(al_GF, 
#              x= )
122/33:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF

# fig = px.line(al_GF, 
#              x= )
122/34:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF
#  fig = px.line(al_GF, 
#               x=  )
122/35:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF.rename(columns = {'index':'year'})
#  fig = px.line(al_GF, 
#               x=  )
122/36:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
#GF.drop(['Region'], inplace =True)
#GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF.rename(columns = {'index':'year'})

#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
122/37:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
#GF.drop(['Region'], inplace =True)
#GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})

#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
122/38:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
#GF.drop(['Region'], inplace =True)
#GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
123/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
123/3:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
#GF.drop(['Region'], inplace =True)
#GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/4:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
#GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/5:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/6:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/7:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/8:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/9:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/10:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
123/11:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/12:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/13:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
#GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/14:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
GF.rename(columns = {'index':'year'})
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/15:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
#GF.index.names = ['index']
GF.rename(columns = {'index':'year'}, inplace =True )
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/16:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.index.names = ['index']
GF.rename(columns = {'index':'year'}, inplace =True )
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/17:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/18:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF.index.names = ['index']
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/19:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF.index.names = ['index']
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/20:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/21:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF.rename(index = {'Region': 'index'}, inplace = True)
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/22:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF.rename(index = {'Region': 'index'}, inplace = True)
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/23:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
#GF.rename(index = {'Region': 'index'}, inplace = True)
GF
#   fig = px.line(al_GF, 
#                x= 'year'
#                y =  )
123/24:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )

  fig = px.line(al_GF, 
               x= 'year'
               y = 'Region')
fig
123/25:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )

fig = px.line(al_GF, 
               x= 'year'
               y = 'Region')
fig
123/26:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )

fig = px.line(al_GF, 
               x= 'year'
               y= 'Region',)
fig
123/27:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )

fig = px.line(al_GF, 
               x= 'year',
               y= 'Region',)
fig
123/28:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
# fig = px.line(al_GF, 
#                x= 'year',
#                y= 'Region',)
# fig
123/29:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
fig = px.line(GF, 
               x= 'year',
               y= 'Region',)
fig
123/30:
fig2 = px.line(
    allowances,
    x='Region',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color = "Region")
fig2
123/31:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
123/32:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
123/33:
fig2 = px.line(
    allowances,
    x='Region',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color = "Region")
fig2
126/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
126/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
126/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
126/4:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
fig = px.line(GF, 
               x= 'year',
               y= 'Region',)
fig
126/5:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
126/6:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
126/7:
fig2 = px.line(
    allowances,
    x='Region',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color = "Region")
fig2
125/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
125/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
125/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
125/4:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
125/5:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
125/6:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
125/7:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
125/8:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
125/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
124/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
124/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
124/3:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
128/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
128/2:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
128/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
128/4:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
128/5:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
128/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
128/7:
#combining all the plots 

all_MCGs = go.Figure(data=MCG_GF_fig.data + MCG_IEPC_fig.data + MCG_PCC_fig.data + MCG_AP_fig.data ) #layout= MCG_GF_fig.layout)
128/8:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
128/9:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
130/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
130/2:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP.to_csv("output \ regional_allowance_ATP.csv")
130/3:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
130/4:
#regional allowance ATP
cube = regional_gdp/mitigation_population/global_gdp/global_population
reduction_cube = np.cbrt(cube)
reduction_cube = cube*global_baseline-global_emissions/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP
130/5:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction_cube = reduction_cube*(global_baseline-global_emissions)/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP
130/6:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction_cube = reduction_cube*(global_baseline-global_emissions)/global_baseline*mitigation_emissions
reduction_cube

#correction factor

correction = reduction_cube.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions
130/8:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*(global_baseline-global_emissions)/global_baseline*mitigation_emissions
reduction

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/9:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- reduction_cube/correction
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/10:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/11:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions
correction
#regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

mitigation_baseline
130/13:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_baseline
130/14:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/15:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/16:
#regional allowance ATP
cube = (regional_gdp.sum(axis = 1) /mitigation_population.sum(axis=1))/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/17: regional_gsp.sum(axis=1)
130/18: regional_gdp.sum(axis=1)
130/19: mitigation_population.sum(axis=1)
130/20: global_gdp
130/21: global_population
130/22:
#regional allowance ATP
region = (regional_gdp.sum(axis = 1)/mitigation_population.sum(axis=1))
globe = (global_gdp/global_population)

region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/23:
#regional allowance ATP
region = (regional_gdp.sum(axis = 1)/mitigation_population.sum(axis=1))
globe = (global_gdp/global_population)

region/globe

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/24:
#regional allowance ATP
region = (regional_gdp.sum(axis = 1)/mitigation_population.sum(axis=1))
globe = (global_gdp/global_population)
region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/25:
#regional allowance ATP
region = (regional_gdp.sum(axis = 1)/mitigation_population.sum(axis=1))
globe = (global_gdp/global_population)
globe

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/26:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)


# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/27:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/28:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
region/globe

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/29:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region/globe

reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/30:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region/globe

region 

reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/31:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region/globe

region 

#reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/32:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region/globe

region.sum(axis=1)

#reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/33:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region/globe

region.sum(axis=0)

#reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/34:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region/globe

region.sum(axis=0)
globe

#reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/35:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe

cube

#reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/36:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe

reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/37:
#regional allowance ATP
region = (regional_gdp.sum(axis =0)/mitigation_population(axis=0))
globe = (global_gdp/global_population)
#cube = region.sum(axis=0)/globe
region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/38:
#regional allowance ATP
region = (regional_gdp.sum(axis =1)/mitigation_population(axis=0))
globe = (global_gdp/global_population)
#cube = region.sum(axis=0)/globe
region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/39:
#regional allowance ATP
region = (regional_gdp.sum(axis =1)/mitigation_population(axis=1))
globe = (global_gdp/global_population)
#cube = region.sum(axis=0)/globe
region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/40:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
#cube = region.sum(axis=0)/globe
region

# reduction_cube = np.cbrt(cube)
# reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
# reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/41:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/42:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

#correction factor

correction = reduction.sum(axis=1)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/43:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

#correction factor

correction = reduction.sum(axis=0)/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/44:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions


#correction factor

correction = reduction/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/45:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions


#correction factor

correction = reduction/global_baseline-global_emissions

#regional allowance 

regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
130/46:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions

reduction

# #correction factor

# correction = reduction/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
130/47:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions

reduction_cube

# #correction factor

# correction = reduction/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
131/1:
%reload_ext autoreload
%autoreload 2
131/2:
import pandas as pd
import plotly.express as px
# Bugfix for Plotly default export size
import plotly.io as pio

pio.kaleido.scope.default_width = None

from utils.export import dict_to_excel
131/3:
data_all_wide = pd.read_csv("Data/preprocessed_scenario_data.csv")

# Transform wide table to long table
data_all = (
    data_all_wide.set_index(
        [
            "Model",
            "Scenario",
            "Region",
            "Damage quantile",
            "SLR quantile",
            "SLR adaptation",
            "Target",
            "Discounting",
            "Variable",
            "Unit",
        ]
    )
    .rename_axis("Year", axis=1)
    .stack()
    .to_frame("Value")
    .reset_index()
)

data_all_r5 = data_all[
    data_all["Region"].isin(
        ["R5.2ASIA", "R5.2LAM", "R5.2MAF", "R5.2OECD", "R5.2EENA", "World"]
    )
]
131/4: from utils import paperplots
131/5: from utils import map, plot_exp1
135/1:
%reload_ext autoreload
%autoreload 2
135/2:
import pandas as pd
import plotly.express as px
# Bugfix for Plotly default export size
import plotly.io as pio

pio.kaleido.scope.default_width = None

from utils.export import dict_to_excel
135/3:
data_all_wide = pd.read_csv("Data/preprocessed_scenario_data.csv")

# Transform wide table to long table
data_all = (
    data_all_wide.set_index(
        [
            "Model",
            "Scenario",
            "Region",
            "Damage quantile",
            "SLR quantile",
            "SLR adaptation",
            "Target",
            "Discounting",
            "Variable",
            "Unit",
        ]
    )
    .rename_axis("Year", axis=1)
    .stack()
    .to_frame("Value")
    .reset_index()
)

data_all_r5 = data_all[
    data_all["Region"].isin(
        ["R5.2ASIA", "R5.2LAM", "R5.2MAF", "R5.2OECD", "R5.2EENA", "World"]
    )
]
135/4: from utils import paperplots
135/5: from utils import map, plot_exp1
135/6:
# Create data
def select_fig2(damage_quantile='50', slr_adapt='with', target='rcp60', year='2100', withworld=False):

    variables = ['Damage Cost|SLR|%', 'Damage Cost|Non-SLR|%', 'Damage Cost|%', 'Damage Cost|indirect|%', 'Damage Cost|direct+indirect|%']
    selection = data_all_r5[
        (data_all_r5['Model'] != 'MIMOSA_combined')
        & (data_all_r5['Variable'].isin(variables))
        & (data_all_r5['Damage quantile'] == damage_quantile)
        & (data_all_r5['Year'] == year)
        & (data_all_r5['Target'] == target)
        & (data_all_r5['Discounting'] == 'medium')
        & (data_all_r5['SLR adaptation'] == slr_adapt)
    ]
    if not withworld:
        selection = selection[selection['Region'] != 'World']
    
    selection = (
        selection
        .set_index(['Model', 'Variable', 'Region'])['Value']
        .unstack('Variable')
        .reset_index()
    )

    selection['Combined'] = False
    # For REMIND, use Damage Cost|% for Damage Cost|Non-SLR|% as combined value
    # selection_combined_dmg = selection['Damage Cost|Non-SLR|%'].isna()
    # selection.loc[selection_combined_dmg, 'Damage Cost|Non-SLR|%'] = selection.loc[selection_combined_dmg, 'Damage Cost|%']
    # selection.loc[selection_combined_dmg, 'Combined'] = True

    selection = selection.astype({var: float for var in variables}).drop(columns='Damage Cost|%')

    # Add average per region
    averages = selection.groupby('Region').mean().reset_index()
    averages['Combined'] = True
    averages.insert(0, 'Model', 'Combined')

    return pd.concat([selection, averages], ignore_index=True)
135/7:
for slr_adapt, target, rcp_str, letter, tickformat, custom_ymax in [
    ('with', 'rcp60', 'RCP 6.0', 'a', '.0%', None),
    ('with', 'rcp26', 'RCP 2.6', 'b', '.0%', 0.175),
    ('without', 'rcp60', 'RCP 6.0', 'a', '.0%', None),
    ('without', 'rcp26', 'RCP 2.6', 'b', '.0%', 0.21),
]:
    selection_fig2 = select_fig2(slr_adapt=slr_adapt, target=target)
    filename = f"Figures/figure2_{slr_adapt}slradapt_{target}{'_customy' if custom_ymax is not None else ''}.svg"
    map.create_map(selection_fig2, outputfile=filename, title=f"<b>{letter}.</b> Damages in 2100 (<b>{rcp_str},</b> {slr_adapt} SLR adaptation)", coloraxis_tickformat=tickformat, custom_ymax=custom_ymax)
    try:
        map.svg_to_png(filename)
    except:
        print(f"Unable to convert {filename} from SVG to PNG.")
135/8:
dict_to_excel({
    "RCP6.0 - with slr adapt": select_fig2(slr_adapt='with', target='rcp60'),
    "RCP2.6 - with slr adapt": select_fig2(slr_adapt='with', target='rcp26'),
    "RCP6.0 - without slr adapt": select_fig2(slr_adapt='without', target='rcp60'),
    "RCP2.6 - without slr adapt": select_fig2(slr_adapt='without', target='rcp26'),
}, "Figures/Figure sources/figure2.xlsx")
135/9:
dict_to_excel({
    "RCP6.0 - with slr adapt": select_fig2(slr_adapt='with', target='rcp60'),
    "RCP2.6 - with slr adapt": select_fig2(slr_adapt='with', target='rcp26'),
    "RCP6.0 - without slr adapt": select_fig2(slr_adapt='without', target='rcp60'),
    "RCP2.6 - without slr adapt": select_fig2(slr_adapt='without', target='rcp26'),
}, "Figures/Figure sources/figure2.xlsx")
135/10:
selection = select_fig2('95', 'with', 'rcp60', '2100', withworld=True)
selection = selection[selection['Model'] != 'Combined']
minmax = selection.groupby(["Region"])["Damage Cost|direct+indirect|%"].quantile([0, 1]).unstack(level=1) * 100
minmax.round().astype(int).astype('str') + '%'
135/11:
selection = select_fig2('50', 'with', 'rcp60', '2100', withworld=True)
selection = selection[selection['Model'] != 'Combined']
selection["% SLR"] = selection["Damage Cost|SLR|%"]  / selection["Damage Cost|direct+indirect|%"]
minmax = selection.groupby(["Region"])["% SLR"].quantile([0, 1]).unstack(level=1) * 100
minmax.round().astype(int).astype('str') + '%'
135/12:
selection = select_fig2('50', 'with', 'rcp26', '2100', withworld=True)
selection = selection[selection['Model'] != 'Combined']
minmax = selection.groupby(["Region"])["Damage Cost|direct+indirect|%"].quantile([0, 1]).unstack(level=1) * 100
minmax.round(1).astype('str') + '%'
135/13:
from utils.paperplots.with_without_slr_adapt import fig_SI_with_vs_without_slr_adapt

fig_SI_slr_adapt = fig_SI_with_vs_without_slr_adapt(data_all_r5)
fig_SI_slr_adapt.write_image("Figures/SI_figure_slr_adapt.png", scale=3)
fig_SI_slr_adapt
135/14:
slr_adapt = 'with'

fig3, source_fig3 = plot_exp1.fig_exp1_damages_bars(data_all_r5, slr_adapt=slr_adapt, models=['MIMOSA', 'WITCH', 'REMIND'])
fig3.update_layout(
    title=f'Global damages, <b>{slr_adapt}</b> SLR adaptation',
    margin={'t': 120, 'b': 20, 'l': 60},
    height=600, width=900
)
fig3.update_yaxes(matches='y1')
fig3.show()
# fig3.write_image("Figures/figure3_rcpsensitivity.pdf", scale=3)
133/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
133/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
133/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
133/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
133/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
133/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
133/7:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
136/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

avoided_damages.to_csv("output/avoided_damages_ineqav.csv")
136/2:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?

mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs

#NPV 
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
136/3:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR.to_csv("output/cbr_inequal_aversion.csv")
136/4:
import plotly.express as px
import plotly.io as pio
import plotly.graph_objects as go
136/5:
# Cost benefit ratio plot 

Fig1= px.scatter(CBR, x="Region", y="CBR",)
Fig1.show()
132/1: CBR_inequal_aversion = pd.read_csv(cbr_inequal_aversion.csv)
132/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
132/3:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
132/4:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
132/5: CBR_inequal_aversion = pd.read_csv(cbr_inequal_aversion.csv)
132/6: CBR_inequal_aversion = pd.read_csv('cbr_inequal_aversion.csv')
137/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_baseline
137/2: global_population
137/3:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
#cube = region.sum(axis=0)/globe
region

reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

# correction = reduction.sum(axis=0)/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
137/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_baseline
137/5: global_population
137/6:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions

reduction_cube

# #correction factor

# correction = reduction/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
137/7:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions

reduction

# #correction factor

# correction = reduction/global_baseline-global_emissions

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
137/8:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
137/9:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
137/10:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP
#regional_allowance_ATP.sum(axis=0)
137/11:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
137/12: global_emission
137/13: global_emissions
137/14:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0) - global_emissions
137/15:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
134/1:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
134/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
134/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
134/4:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
fig = px.line(GF, 
               x= 'year',
               y= 'Region',)
fig
134/5:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
134/6:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
134/7:
fig2 = px.line(
    allowances,
    y='variable',
    x= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    line_dash="BSR",
    color = "Region")
fig2
134/8:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    line_dash="BSR",
    color = "Region")
fig2
134/9:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color="BSR",
    facet_col = "Region")
fig2
134/10:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5
)
fig2
134/11:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100', '2105', '2110', '2115', '2120', '2125', '2130', '2135', '2140', '2145', '2150'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
134/12:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
138/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
138/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('output/GF2020.csv')
139/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
139/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020
#check if this was the right way
138/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('output/GF2020.csv')
138/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
138/5:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
PPC.sum(axis=0)
PCC
138/6:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
PCC.sum(axis=0)
PCC
138/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
138/8:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
PCC.sum(axis=0)
PCC
138/9:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
138/10:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*GF2020)) 
PCC.to_csv("PCC.csv")
PCC.sum(axis=0)
138/11:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC.sum(axis=0)
138/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')
138/13:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC.sum(axis=0)
138/14:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions
139/3:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
137/16:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_baseline
137/17:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
137/18: global_population
137/19:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
137/20:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP
regional_allowance_ATP.sum(axis=0)
137/21: global_emissions
137/22:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")
137/23:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
138/15:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
138/16:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
138/17:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG 

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

#NPV all steps 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
137/24:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
137/25:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")
141/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
141/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
141/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
regional_allowance_ATP
132/7:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
132/8:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
142/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
142/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
143/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
143/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
143/3:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
143/4:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
143/5:
#data CBRs
CBRs = pd.read_csv('output/CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
143/6:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs.reset_index
CBRs.set_index('Unnamed: 0', inplace = True )
CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
CBRs.reset_index
CBRs
143/7:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
144/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
144/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
145/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
145/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
145/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
145/4:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
145/5:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
145/6:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
145/7:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
145/8:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
144/3:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
144/4:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
147/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
147/2:
#data CBRs
CBRs = pd.read_csv('CBRs_plot')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
147/3:
#data CBRs
CBRs = pd.read_csv('CBRs_plot_upd')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
147/4:
#data CBRs
CBRs = pd.read_csv('CBRs_plot_upd')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
148/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
148/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
148/3:
#data CBRs
CBRs = pd.read_csv('CBRs_plot_upd')
CBRs
# CBRs.reset_index
# CBRs.set_index('Unnamed: 0', inplace = True )
# CBRs.rename(columns = {'CBR AP':'AP', 'CBR GF':'GF', 'CBR IEPC':'IEPC', 'CBR PCC':'PCC' }, inplace = True )
# CBRs.reset_index
# CBRs
148/4:
#data 

CBRs= pd.read_csv("CBRs_plot_upd")
148/5:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
148/6:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
CBRs
148/7:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
148/8:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
CBRs.set_index('Region')
148/9:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
CBRs.set_index('Region', inplace=True)
148/10:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
146/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = rpd.read_csv('rci 2020 2030')
146/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030')
146/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
146/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
146/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci
146/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
regional_allowance_ATP
146/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('region ', inplace = True)
rci
146/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci
146/9:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)*rci
146/10:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)*rci
al2050
146/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.loc['2020']
rci2030 = rci.loc['2030']
146/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.['2020']
rci2030 = rci.['2030']
146/13:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.('2020')
rci2030 = rci.('2030')
146/14:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.loc['2020']
rci2030 = rci.loc['2030']
146/15:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.iloc['0']
rci2030 = rci.iloc['1']
146/16:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.iloc[0]
rci2030 = rci.iloc[1]
146/17:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci.iloc[0]
rci2030 = rci.iloc[1]
rci2020
146/18:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
146/19:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020
146/20:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)*rci2020
al2050
146/21:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)
al2050
146/22:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
type(rci2020)
146/23:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame
146/24:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
146/25:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)*rci2020
al2050
146/26:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)*rci2020.mul(axis=0)
al2050
146/27:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)*rci2020.mul()
al2050
146/28:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)
al2050
146/29:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)
al2050 = al2050.mul(rci2020)
al2050
146/30:
#regional allowance GDR for t< 2051 

al2050 = mitigation_baseline - (global_baseline-global_emissions)
al2050 = al2050.mul(rci2020, axis =0)
al2050
146/31:
#regional allowance GDR for t< 2051 

al2030 = mitigation_baseline - (global_baseline-global_emissions)
al2030 = al2050.mul(rci2020, axis =0)
al2030 = al2030[["2020","2025","2030"]]
146/32:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
146/33: global_emissions_2100 = global_emissions.iloc[:,['2030':'2100']]
146/34: global_emissions_2100 = global_emissions.iloc[:,'2030':'2100']
146/35: global_emissions_2100 = global_emissions.iloc['2030':'2100']
146/36: global_emissions_2100 = global_emissions.drop['2030':'2100']
146/37: global_emissions_2100 = global_emissions.drop(global_emissions.loc[:,'2030':'2100'].columns, axis =1)
146/38: global_emissions_2100 = global_emissions.drop(global_emissions.loc[:,'2030':'2100'].columns, axis =1)
146/39: global_emissions_2100 = global_emissions.loc[:,['2035':'2100']]
146/40: global_emissions_2100 = global_emissions.loc[:,'2035':'2100']
146/41: global_emissions.loc[:,'2035':'2100']
146/42:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.loc[:,'2035':'2100']
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
146/43:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions.loc['2035':'2100']
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
146/44: global_emissions
146/45: global_emissions.loc['2030':'2100']
146/46:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()
GDR_2100
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/47:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/48: regional_allowance_ATP
146/49:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci2030, axis= 0)+((2030-2030)/70)*mul(regional_allowance_ATP)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/50:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci2030, axis= 0)+((2030-2030)/70).mul(regional_allowance_ATP)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/51:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci2030, axis= 0)#+((2030-2030)/70).mul(regional_allowance_ATP)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/52:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci2030, axis= 0)#+((2030-2030)/70).mul(regional_allowance_ATP)
al2100 = al2100.mul(regional_allowance_ATP)
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/53:
# second approach 
global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci2030, axis= 0)#+((2030-2030)/70).mul(regional_allowance_ATP)
al2100 = al2100.mul(regional_allowance_ATP)
al2100.sum(axis=0)
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
146/54:
#regional allowance GDR for t< 2051 

al2030 = mitigation_baseline - (global_baseline-global_emissions)
al2030 = al2050.mul(rci2020, axis =0)
al2030 = al2030[["2020","2025","2030"]]
al2030
146/55:
#regional allowance GDR for t< 2051 

al2030 = mitigation_baseline - (global_baseline-global_emissions)
al2030 = al2050.mul(rci2020, axis =0)
al2030 = al2030[["2020","2025","2030"]]
al2030.sum(axis =0)
146/56:
#regional allowance GDR for t< 2051 

al2030 = mitigation_baseline - (global_baseline-global_emissions)
al2030 = al2050.mul(rci2020, axis =0)
al2030 = al2030[["2020","2025","2030"]]
al2030.sum(axis =1)
146/57:
#regional allowance GDR for t< 2051 

al2030 = mitigation_baseline - (global_baseline-global_emissions)
al2030 = al2050.mul(rci2020, axis =0)
al2030 = al2030[["2020","2025","2030"]]
al2030.sum(axis =0)
146/58:
#regional allowance GDR for t< 2051 

al2030 = mitigation_baseline - (global_baseline-global_emissions)
al2030 = al2030.mul(rci2020, axis =0)
al2030 = al2030[["2020","2025","2030"]]
al2030.sum(axis =0)
146/59:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()

global_emissions
146/60:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = al2030.mul(rci2020, axis =0)
al2030 = mitigation_baseline - al2030
al2030 = al2030[["2020","2025","2030"]]
al2030.sum(axis =0)
146/61:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = al2030.mul(rci2020, axis =0)
al2030 = mitigation_baseline - al2030
al2030.sum(axis =0)
146/62:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = al2030.mul(rci2020, axis =0)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/63:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = al2030.mul(rci2020)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/64:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = al2030.mul(rci2020)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/65:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = rci2020.mul(al2030)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/66:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = rci2020*al2030
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/67:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020
146/68:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
146/69:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
rci2020
146/70:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
rci2030 = rci2030*100
146/71:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = rci2020*al2030
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/72:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
rci2030 = rci2030*100
rci2020
146/73:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
146/74:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030 = rci2020.mul(al2030,axis = 0)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/75:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030
# al2030 = rci2020.mul(al2030,axis = 0)
# al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/76:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
# al2030 = rci2020.mul(al2030,axis = 0)
# al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/77: global_baseline
146/78: global_emissions
146/79: mitigation
146/80:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
al2030 = rci2020.mul(al2030,axis = 0)
# al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/81:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
al2030 = rci2020.mul(al2030,axis = 0)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/82: pd.DataFrame([rci2020,al2030])
146/83:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
al2030 = al2030.mul(rci2020,axis = 0)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/84:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2020
146/85:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030
# al2030 = al2030.mul(rci2020,axis = 0)
# al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/86:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030
 al2030 = al2030.mul(rci2020)
# al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/87:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030
al2030 = al2030.mul(rci2020)
# al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/88:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030
al2030 = al2030.mul(rci2020)
 al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/89:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030
al2030 = al2030.mul(rci2020)
al2030
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/90:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_array()
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/91:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
al2030.to_array()
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/92:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
al2030.to_array()
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/93:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame(inplace= True)
al2030.to_array()
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/94:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
|
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/95:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/96:
#regional allowance GDR for t< 2051 

al2030 = (global_baseline-global_emissions)
al2030.to_frame()
al2020.to_array()
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/97:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/98: al2020= al2020.dot(rci2020)
146/99:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/100:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
146/101: rci2020
151/1:
rci_df = pd.DataFrame({

    year: rci

    for year in BAU.index

})
151/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
rci2020 =rci2020*100
rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2020
151/3:
rci_df = pd.DataFrame({

    year: rci

    for year in BAU.index

})
151/4:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
151/5:
rci_df = pd.DataFrame({

    year: rci

    for year in al2020.index

})
151/6:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})
151/7:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
151/8:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})
151/9:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci2020
151/10:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
151/11:
alGDR_2030 = rci_df.mul(al2020,axis = 0)
alGDR_2030
151/12:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030
151/13:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030.sum(axis=0)
alGDR_2030
151/14:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030.sum(axis=0)
alGDR_2030
151/15:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030.sum(axis=1)
alGDR_2030
151/16:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030.sum(axis=0)
alGDR_2030
151/17:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030.sum(axis=0)
151/18:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
151/19:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
151/20:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
151/21:
alGDR_2030 = rci_df.mul(al2020,axis = 1)
alGDR_2030.sum(axis=0)
154/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
154/2: global_emissions
151/22:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
151/23:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100
#al2100 = al2100.mul(rci_df2030, axis= 0)#+((2030-2030)/70).mul(regional_allowance_ATP)
# al2100 = al2100.mul(regional_allowance_ATP)
# al2100.sum(axis=0)
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
151/24:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)#+((2030-2030)/70).mul(regional_allowance_ATP)
# al2100 = al2100.mul(regional_allowance_ATP)
# al2100.sum(axis=0)
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
151/25:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70).mul(regional_allowance_ATP)
# al2100 = al2100.mul(regional_allowance_ATP)
# al2100.sum(axis=0)
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
151/26:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
al2100
# al2100 = al2100.mul(regional_allowance_ATP)
# al2100.sum(axis=0)
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
# GDR_2150 = part.mul(GDR_2150)
# GDR_2150 = GDR_2150.mul(regional_allowance_ATP)
# GDR_2150
151/27:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
al2100.sum(axis=0)
al2100
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/28:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
al2100.sum(axis=1)
al2100
# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/29:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
al2100.sum(axis=1)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/30:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})



global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
al2100.sum(axis=0)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/31:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


#global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
al2100.sum(axis=0)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/32:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


#global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = ((2100- 2030)/70)*mitigation_baseline-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)+((2030-2030)/70)*regional_allowance_ATP
# al2100.sum(axis=0)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/33:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


#global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

al2100 = GDR_2100*mitigation_baseline
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP)
al2100.sum(axis=0)

# part = mitigation_baseline-(sub*rci+((2150-2020)/70))
151/34:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


#global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

al2100 = GDR_2100*mitigation_baseline
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP)
al2100.sum(axis=1)
151/35:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

al2100 = GDR_2100*mitigation_baseline
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP)
151/36:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

al2100 = GDR_2100*mitigation_baseline
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/37:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/38:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100.index.astype(int)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
          inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/39:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -2030/70) 
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#           inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100= GDR_2100[0]
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/40:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -2030/70) 
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#           inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/41:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -2030/70) 
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#           inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/42:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/43:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = (2100 -global_emissions_2100/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

#GDR_2100 =np.asarray(GDR_2100)
#GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/44:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

#GDR_2100 =np.asarray(GDR_2100)
#GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/45:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
#GDR_2100 = GDR_2100.item()

GDR_2100

# al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/46:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
GDR_2100

al2100 = GDR_2100*mitigation_baseline
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/47:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

#GDR_2100 =np.asarray(GDR_2100)
al2100 = GDR_2100*mitigation_baseline
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/48:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

#GDR_2100 =np.asarray(GDR_2100)
al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/49:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

#GDR_2100 =np.asarray(GDR_2100)
al2100 = GDR_2100*mitigation_baseline
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/50:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

# GDR_2100 =np.asarray(GDR_2100)
al2100 = mitigation_baseline.mul(GDR_2100)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/51:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

# GDR_2100 =np.asarray(GDR_2100)
al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/52:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

# GDR_2100 =np.asarray(GDR_2100)
al2100 = mitigation_baseline.mul(GDR_2100,axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/53:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

 GDR_2100 =np.asarray(GDR_2100)
al2100 = mitigation_baseline.mul(GDR_2100,axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/54:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
al2100 = mitigation_baseline.mul(GDR_2100,axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/55:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100 =np.asarray(GDR_2100)
al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/56:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

rci_df2030

# global_emissions_2100 = global_emissions.loc['2030':'2100']
# GDR_2100 = ((2100 -global_emissions_2100)/70) 
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#            inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/57:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#            inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/58:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#            inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/59:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
 GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#            inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/60:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
#            inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/61:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
# GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/62:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/63:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions_2100)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/64:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


global_emissions_2100 = global_emissions.loc['2030':'2100']
GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])

GDR_2100
# GDR_2100 =np.asarray(GDR_2100)
# al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
# al2100
151/65:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
GDR_2100 =np.asarray(GDR_2100)


 al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
 al2100
151/66:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
GDR_2100 =np.asarray(GDR_2100)


al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/67:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = mitigation_baseline.mul(GDR_2100,axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/68:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = mitigation_baseline.mul(GDR_2100,axis = 0)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/69:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = mitigation_baseline*GDR_2100(axis = 0)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/70:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = mitigation_baseline*GDR_2100
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/71:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = GDR_2100.mul(mitigation_baseline,axis=1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/72:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = GDR_2100.mul(mitigation_baseline,axis=0)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/73:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)


al2100 = GDR_2100*(mitigation_baseline,axis=0)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/74:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

al2100 = GDR_2100*(mitigation_baseline,axis=0)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/75:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/76:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

al2100 = GDR_2100*(mitigation_baseline,axis=1),
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)
al2100
151/77:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

    for year in al2020.index

})


GDR_df2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/78:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
#GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

    for year in al2020.index

})


GDR_df2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/79:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'Region'},
           inplace = False )
GDR_2100=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

    for year in al2020.index

})


GDR_df2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/80:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year')#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

    for year in al2020.index

})


GDR_df2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/81:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

    for year in al2020.index

})


GDR_df2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/82:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#     for year in al2020.index

# })


GDR_df2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/83:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#     for year in al2020.index

# })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/84:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

 GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/85:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/86:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
# GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in GDR_2100.index

 })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/87:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in GDR_2100.index

 })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/88:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/89:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/90:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in al2020.index

#  })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/91:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in al2020.index

#  })


mitigation_baseline

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/92:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in al2020.index

#  })


GDR_2100

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/93:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in al2020.index

#  })


len(GDR_2100)

# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/94:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"])
GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in al2020.index

#  })


# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/95:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in al2020.index

#  })


# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/96:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/97:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


# al2100 = GDR_2100*(mitigation_baseline,axis=1)
# # # al2100 = al2100-(global_baseline-global_emissions)
# # # al2100 = al2100.mul(rci_df2030, axis= 1)
# # # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # # al2100.sum(axis=0)
# al2100
151/98:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


al2100 = GDR_2100*(mitigation_baseline,axis=1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
 al2100
151/99:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })


al2100 = GDR_2100*(mitigation_baseline,axis=1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/100:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })

al2100 = GDR_df2100*(mitigation_baseline,axis=1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/101:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/102:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/103:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/104:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for region in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/105:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/106:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/107:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.columns

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/108:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.columns

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/109:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.columns

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/110:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/111:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/112:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.index

 })

GDR_2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
al2100
151/113:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.index

 })

GDR_2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/114:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/115:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/116:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.column

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/117:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.columns

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/118:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    region: GDR_2100

     for region in mitigation_baseline.columns

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/119:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.columns

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/120:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/121:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: mitigation_baseline

     for year in GDR_2100.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/122:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/123:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for region in al2020.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/124:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in al2020.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/125:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/126:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100.transpose 

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/127:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100.transpose()

#al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/128:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/129:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/130:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
al2100 = al2100-(global_baseline-global_emissions)
 al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/131:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/132:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/133:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)

al2100
151/134:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 0)
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/135:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/136:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/137:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index)/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/138: %history
151/139:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

GDR_df2100 = pd.DataFrame({

    year: GDR_2100

     for year in mitigation_baseline.index

 })

GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/140:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/141:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
# GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
# GDR_2100 = GDR_2100.squeeze()
 GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/142:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
# GDR_2100.set_index('year', inplace= True)#=GDR_2100.drop(columns = ["Region"
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/143:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop(columns = ["Region"])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/144:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
           inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = ["Region"])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/145:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
# GDR_2100 = GDR_2100.to_frame()#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/146:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame()#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/147:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/148:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70) 
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/149:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_series()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/150:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_series()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/151:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/152:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/153:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

# al2100
151/154:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_df2100, axis = 1)
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

al2100
151/155:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
# # al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

al2100
151/156:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
al2100 = al2100-(global_baseline-global_emissions)
# # al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

al2100
151/157:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
# # al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

al2100
151/158:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# # al2100.sum(axis=0)

al2100
151/159:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
al2100 = al2100-(global_baseline-global_emissions)
al2100 = al2100.mul(rci_df2030, axis= 1)
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)

#al2100
151/160:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

# GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline*GDR_2100
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

#al2100
151/161:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
# al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/162:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
al2100 = al2100-(global_baseline-global_emissions)
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/163:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100.mul(rci_df2030, axis= 1)
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/164:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

al2100
151/165:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)

al2100
151/166:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/167:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
al2100
# rcifac = (global_baseline-global_emissions)*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/168:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
al2100
# rcifac = (global_baseline-global_emissions)*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)
151/169:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

rcifac
151/170:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2030.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = (global_baseline-global_emissions)*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

rcifac
151/171:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

rcifac
151/172:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

rcifac
151/173:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100.sum(axis=0)

rcifac
151/174:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)

rcifac
151/175:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100.sum(axis=0)
151/176:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
#al2100.sum(axis=0)
151/177:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
#al2100.sum(axis=0)
151/178:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
#al2100.sum(axis=0)
151/179:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline*GDR_2100
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
#al2100.sum(axis=0)
151/180:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100.to_frame()
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline*GDR_2100
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100
# #al2100.sum(axis=0)
151/181:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline*GDR_2100
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100
# #al2100.sum(axis=0)
151/182:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
GDR_2100
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = mitigation_baseline*GDR_2100
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100
# #al2100.sum(axis=0)
151/183:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=0)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100
# #al2100.sum(axis=0)
151/184:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=0)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# al2100
# #al2100.sum(axis=0)
151/185:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=0)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
 al2100
# #al2100.sum(axis=0)
151/186:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=0)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/187:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=1)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/188:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=1)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/189:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis=0)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/190:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/191:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/192:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =1)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/193:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =0)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/194:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =1)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/195:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =1)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/196:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =1)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
# #al2100.sum(axis=0)
151/197:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =1)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
al2100
al2100.sum(axis=0)
151/198:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2030
151/199:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =1)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
rcifac
#al2100.sum(axis=0)
151/200:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100,axis =0)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
rcifac
#al2100.sum(axis=0)
151/201:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
rcifac
#al2100.sum(axis=0)
151/202:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
#rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
151/203:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
#rcifac = al2020*rci_df2030
#al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2030
155/2:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020
# al2030 = mitigation_baseline - al2030
# al2030.sum(axis =0)
155/3:
rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
155/4:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
155/5:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
#rcifac = al2020*rci_df2030
#al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/6:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
#al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/7:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/8:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
#al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/9:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
rcifac
#al2100 = al2100-rcifac
#al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/10:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*(rci_df2030*100)
rcifac
#al2100 = al2100-rcifac
#al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/11:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*(rci_df2030*100)
rcifac
al2100 = al2100-rcifac
#al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/12:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*(rci_df2030*100)
rcifac
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/13:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*(rci_df2030)
rcifac
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/14:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020.mul(rci_df2030)
rcifac
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/15:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020.mul(rci_df2030,axis =1)
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
155/16:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020.mul(rci_df2030,axis =0)
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2030
156/2:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
156/3:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al202

#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
156/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2030
156/5:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020

#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
156/6:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
156/7:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
rcifac
#al2100 = al2100-rcifac
#al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/8:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
#al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/9:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = mitigation_baseline.mul(GDR_2100)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/10:
al2100 = (GDR_2100.mul(mitigation_baseline)) - (al2020*rci_df2030) + (GDR_2100*regional_allowance_ATP)
al2100
156/11:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/12:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/13: GDR2100
156/14: GDR_2100
156/15:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
#GDR_2100 = GDR_2100.to_series()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/16: GDR_2100
156/17:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame()
#.reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/18:
al2100 = (GDR_2100.mul(mitigation_baseline)) - (al2020*rci_df2030) + (GDR_2100*regional_allowance_ATP)
al2100
156/19: GDR_2100
156/20:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
#GDR_2100.drop(columns = [""])
# GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/21: GDR_2100
156/22:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop(columns = 0)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/23: GDR_2100
156/24:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop(columns = 0)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/25: GDR_2100
156/26:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop(columns = 'index')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/27: GDR_2100
156/28:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop('index')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/29:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop('index', axis=1)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/30: GDR_2100
156/31:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop([0])
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
156/32: GDR_2100
156/33:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop([0])
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/34:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop_duplicates()
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/35:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop_duplicates()
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/36:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
# GDR_2100.set_index('year', inplace= True)
GDR_2100.drop()
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/37:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.set_index('year', inplace= True)
GDR_2100.rename(columns = { 'index' = 'delete'})
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/38:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.set_index('year', inplace= True)
GDR_2100.rename(columns = { 'index':'delete'})
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/39:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.rename(columns = { 'index':'delete'})
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/40:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.rename(columns = { 'index':'delete'})
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/41:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.rename(columns = { '0':'delete'})
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/42:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.rename(columns = { '0':'delete'}, inplace =True)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/43:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
GDR_2100.rename(columns = { ' index':'delete'}, inplace =True)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/44:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
#            inplace = False )
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/45:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
       inplace = False )
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/46:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
       inplace = True  )
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

al2100 = GDR_2100.mul(mitigation_baseline)
rcifac = al2020*rci_df2030
al2100 = al2100-rcifac
al2100
al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
#rcifac
#al2100.sum(axis=0)
GDR_2100
156/47:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
       inplace = True)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
# GDR_2100
156/48:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
       inplace = True)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/49:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
       inplace = True)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/50:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100 = GDR_2100.rename(columns = {'index':'year'},
       inplace = True)
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/51:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()

#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/52:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100.to_csv('GDR indexes')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/53: indexes = pd.read_csv("GDR indexes")
156/54:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100.to_csv('GDR indexes')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/55: indexes = pd.read_csv("GDR indexes")
156/56: indexes
156/57:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100.to_csv('GDR indexes.csv')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/58: indexes = pd.read_csv("GDR indexes")
156/59: indexes
156/60: indexes = pd.read_csv("GDR indexes.csv")
156/61: indexes = pd.read_csv("GDR indexes.csv")
156/62: indexes
156/63: indexes = pd.read_csv("GDR indexes.csv")
156/64:
al2100 = (indexes.mul(mitigation_baseline)) - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/65:
al2100 = (indexes.mul(mitigation_baseline))# - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/66:
al2100 = (indexes.mul(mitigation_baseline, axis = 0))# - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/67:
al2100 = (indexes.mul(mitigation_baseline, axis = 1))# - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/68:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_array()

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/69:
al2100 = (indexes.mul(mitigation_baseline, axis = 1))# - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/70:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_array()
indexes

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/71:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_xarray()
indexes

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
156/72:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_xarray()
indexes

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/73:
al2100 = (indexes.mul(mitigation_baseline, axis = 1))# - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/74:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_numpy()
indexes

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/75:
indexes = pd.read_csv("GDR indexes.csv")
indexes =indexes.to_numpy()
indexes

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/76:
al2100 = (indexes.mul(mitigation_baseline, axis = 1))# - (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/77:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/78:
indexes = pd.read_csv("GDR indexes.csv")
indexes
# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/79:
indexes = pd.read_csv("GDR indexes.csv")
indexes = pd.DataFrame({

    year: indexes

     for year in mitigation_baseline.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/80:
indexes = pd.read_csv("GDR indexes.csv")
indexes = pd.DataFrame({

    year: indexes

     for year in mitigation_baseline.column

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/81:
indexes = pd.read_csv("GDR indexes.csv")
indexes = pd.DataFrame({

    year: indexes

     for year in mitigation_baseline.columns

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/82:
indexes = pd.read_csv("GDR indexes.csv")
indexes = pd.DataFrame({

    year: al2020

     for index in indexes.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/83:
indexes = pd.read_csv("GDR indexes.csv")
indexes = pd.DataFrame({

    index: indexes

     for year in al2020.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/84:
indexes = pd.read_csv("GDR indexes.csv")
indexes = pd.DataFrame({

    index: indexes

     for index in indexes.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/85:
indexes = pd.read_csv("GDR indexes.csv")
indexesgdr = pd.DataFrame({

    index: indexes

     for index in indexes.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/86:
indexes = pd.read_csv("GDR indexes.csv")
indexesgdr = pd.DataFrame({

    index: indexes

     for index in al2030.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/87:
indexes = pd.read_csv("GDR indexes.csv")
indexesgdr = pd.DataFrame({

    index: indexes

     for index in al2020.index

  })
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/88:
indexes = pd.read_csv("GDR indexes.csv")
indexes
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/89:
indexes = pd.read_csv("GDR indexes.csv")
indexes*mitigation_baseline
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/90:
indexes = pd.read_csv("GDR indexes.csv")
indexes.mul(mitigation_baseline, axis = 1)
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/91:
indexes = pd.read_csv("GDR indexes.csv")
indexes.mul(mitigation_baseline, axis = 0)
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/92:
indexes = pd.read_csv("GDR indexes.csv")
indexes*mitigation_baseline
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/93:
indexes = pd.read_csv("GDR indexes.csv")
indexes.asarray()
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/94:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_array()
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/95:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_numpy()
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/96:
al2100 = (indexes*mitigation_baseline)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/97:
indexes = pd.read_csv("GDR indexes.csv")
indexes.to_numpy()
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/98:
al2100 = (indexes*mitigation_baseline)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/99:
indexes = pd.read_csv("GDR indexes.csv")
indexes = indexes.to_numpy()
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/100:
al2100 = (indexes*mitigation_baseline)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/101:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/102:
al2100 = mitigation_baseline.mul(indexes, axis= 0)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/103:
al2100 = mitigation_baseline.mul(indexes, axis= 1)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/104:
al2100 = mitigation_baseline.mul(indexes, axis= )#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/105:
al2100 = mitigation_baseline.mul(indexes, axis= 0)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/106:
al2100 = mitigation_baseline.mul(indexes)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/107:
al2100 = mitigation_baseline.mul(indexes.iloc[:,0], axis = 0)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/108:
indexes = pd.read_csv("GDR indexes.csv")
#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
156/109:
al2100 = mitigation_baseline.mul(indexes.iloc[:,0], axis = 0)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
156/110:
indexes = pd.read_csv("GDR indexes.csv")

#year indexes frame  
years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()
rci2030
157/2:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020

#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
157/3:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100.to_csv('GDR indexes.csv')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
GDR_2100
157/4:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


# GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100.to_csv('GDR indexes.csv')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/5:
indexes = pd.read_csv("GDR indexes.csv")

#year indexes frame  
years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/6:
indexes = pd.read_csv("GDR indexes.csv")
indexes

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/7:
indexes = pd.read_csv("GDR indexes.csv")
d_type(indexes)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/8:
indexes = pd.read_csv("GDR indexes.csv")
type(indexes)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/9: type(rci2030)
157/10:
indexes = pd.read_csv("GDR indexes.csv")
indexdes.squeeze()

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/11:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/12:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/13:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

al2020
#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/14:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

rci2020
#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/15:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/16:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in rci2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/17:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in alGDR_2030.index

})


# GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100.to_csv('GDR indexes.csv')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/18:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
157/19:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in alGDR_2030.index

})


# GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100.to_csv('GDR indexes.csv')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/20:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})


# GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100.to_csv('GDR indexes.csv')
#GDR_2100 = GDR_2100.squeeze()
#GDR_2100 =np.asarray(GDR_2100)

# GDR_df2100 = pd.DataFrame({

#     year: GDR_2100

#      for year in mitigation_baseline.index

#  })

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/21:
indexes = pd.read_csv("GDR indexes.csv")
indexes.squeeze()

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/22:
indexes = pd.read_csv("GDR indexes.csv")
indexes

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/23:
indexes = pd.read_csv("GDR indexes.csv")
indexes

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/24:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in al2020.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/25:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('year', inplace =True)

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in al2020.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/26:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('year', inplace =True)

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in indexes.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/27:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('year', inplace =True)

#year indexes frame 

years_70 = pd.DataFrame({

    year: indexes

    for year in regional_allowance_ATP.index

})
years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/28:
indexes = pd.read_csv("GDR indexes.csv")
indexes
#indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/29:
indexes = pd.read_csv("GDR indexes.csv")
indexes
mitigation baseline 
#indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/30:
indexes = pd.read_csv("GDR indexes.csv")
indexes
mitigation_baseline 
#indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/31:
indexes = pd.read_csv("GDR indexes.csv")
indexes 
#indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/32:
al2100 = mitigation_baseline.mul(indexes)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/33:
indexes = pd.read_csv("GDR indexes.csv")
indexes 
#indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/34:
al2100 = mitigation_baseline.mul(indexes)#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/35:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/36:
indexes = pd.read_csv("GDR indexes.csv")
indexes 
#indexes.set_index('year', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/37:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)

#year indexes frame 

# years_70 = pd.DataFrame({

#     year: indexes

#     for year in regional_allowance_ATP.index

# })
# years_70

#GDR_df2100 = GDR_df2100.transpose()

# al2100 = GDR_2100.mul(mitigation_baseline)
# rcifac = al2020*rci_df2030
# al2100 = al2100-rcifac
# al2100
# al2100 = al2100+(GDR_2100*regional_allowance_ATP) 
# #rcifac
# #al2100.sum(axis=0)
157/38:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/39:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/40:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/41:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/42:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/43:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/44:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2150 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100
# GDR_2100.to_csv('GDR indexes.csv')
157/45:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100
# GDR_2100.to_csv('GDR indexes.csv')
157/46:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100
GDR_2100.to_csv('GDR indexes.csv')
157/47:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes
157/48:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/49:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/50:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=1)
157/51:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/52:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes.transpose()
157/53:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes.transpose()
157/54:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('year', inplace =True)
indexes.transpose()
157/55:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/56:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('year', inplace =True)
indexes.transpose()
157/57:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes.transpose()
157/58:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/59:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=1)
157/60:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/61:
al2100 = mitigation_baseline*indexes#- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
mitigation_baseline
157/62:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes.transpose()
157/63: al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
157/64:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/65:
al2100 = mitigation_baseline*indexes(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/66:
al2100 = mitigation_baseline*indexes#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/67:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes.transpose()
157/68:
al2100 = mitigation_baseline*indexes#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/69:
al2100 = mitigation_baseline.mul(indexes,axis =1)#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/70:
al2100 = mitigation_baseline.mul(indexes,axis =0)#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/71:
al2100 = mitigation_baseline.mul(indexes,axis =0)#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
mitigation_baseline
157/72:
indexes = pd.read_csv("GDR indexes.csv")
indexes.reset_index()
indexes.set_index('Region', inplace =True)
indexes.transpose()
157/73:
indexes = pd.read_csv("GDR indexes.csv")
indexes.reset_index()
indexes.set_index('Region', inplace =True)
#indexes.transpose()
157/74:
indexes = pd.read_csv("GDR indexes.csv")
indexes.reset_index()
indexes.set_index('Region', inplace =True)
#indexes.transpose()
indexes
157/75:
indexes = pd.read_csv("GDR indexes.csv")
# indexes.reset_index()
# indexes.set_index('Region', inplace =True)
#indexes.transpose()
indexes
157/76:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
#indexes.transpose()
indexes
157/77: al2100 = mitigation_baseline.mul(indexes,axis =0)#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
157/78:
al2100 = mitigation_baseline.mul(indexes,axis =0)#(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/79:
al2100 = mitigation_baseline.mul(indexes,axis =0)(- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/80:
al2100 = mitigation_baseline.mul(indexes,axis =0)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP))
al2100
157/81:
al2100 = mitigation_baseline.mul(indexes,axis =0)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/82:
al2100 = mitigation_baseline.mul(indexes,axis =0)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/83:
al2100 = mitigation_baseline*indexes- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/84:
al2100 = (mitigation_baseline*indexes)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/85:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/86:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/87:
al2100 = (indexes*mitigation_baseline)#- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/88:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100.sum(axis=0)
157/89:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
GDR_2100 = GDR_2100.to_frame().reset_index()
GDR_2100
GDR_2100.to_csv('GDR indexes.csv') 

rci_df2030
157/90:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) #+ (indexes*regional_allowance_ATP)
al2100
157/91:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100
157/92:
#al2100 = #(indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100 = (al2020*rci_df2030)
157/93:
#al2100 = #(indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100 = (al2020*rci_df2030)
al2100
157/94:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

mitigation_baseline
157/95:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

mitigation_baseline.sum(axis =0)
157/96:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

mitigation_emissions.sum(axis =0)
158/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
158/2: global_emissions
158/3:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
158/4:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")
158/5:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
157/97:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

mitigation_emissions.sum(axis =0)
157/98:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('coacch_exp_2.1_CBA_q0.5_SLR_with_adapt_inequal_aversion_elasmu_0047f1b7f (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

global_emissions
157/99:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

global_emissions
157/100:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020

#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df
157/101:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
157/102:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
157/103:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
157/104:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
157/105:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
indexes
157/106:
al2100 = #(indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100
157/107:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100
157/108:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100.sum(axis= 0)
159/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

global_emissions
159/2:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020

#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})
159/3:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/4:
# second approach 

#rci frame 2030 
rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

# GDR_2100 = ((2100 -global_emissions.index.astype(int))/70)
# GDR_2100 = GDR_2100.to_frame().reset_index()
# GDR_2100
# GDR_2100.to_csv('GDR indexes.csv')
159/5:
indexes = pd.read_csv("GDR indexes.csv")
indexes.set_index('Region', inplace =True)
159/6:
#al2100 = #(indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
al2100 = (al2020*rci_df2030)
al2100
159/7:
al2100 = #(indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100
159/8:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100
159/9:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (indexes*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100.sum(axis= 0)
159/10: years = global_emissions.index.astype(int)
159/11:
years = global_emissions.index.astype(int)
years
159/12:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + (((years - 2030)/70)*regional_allowance_ATP)
#al2100 = (al2020*rci_df2030)
al2100.sum(axis= 0)
159/13: years = global_emissions.index.astype(int) - 2030
159/14:
years = global_emissions.index.astype(int) - 2030
years
159/15:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + ((years/70)*regional_allowance_ATP)
al2100.sum(axis= 0)
159/16:
years = (global_emissions.index.astype(int) - 2030)/70
years
159/17:
al2100 = (indexes*mitigation_baseline)- (al2020*rci_df2030) + ((years/70)*regional_allowance_ATP)
al2100
159/18:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- (al2020*rci_df2030) + ((years/70)*regional_allowance_ATP)
al2100
159/19:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + ((years/70)*regional_allowance_ATP)
al2100
159/20:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + ((years/70)*regional_allowance_ATP)
al2100.sum(axis = 0 )
159/21:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + ((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis = 0 )
159/22:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis = 0 )
159/23:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100#.sum(axis = 0 )
159/24:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100#.sum(axis = 0 )
159/25:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)

#- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100#.sum(axis = 0 )
159/26:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) 

#+ (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100#.sum(axis = 0 )
159/27:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100#.sum(axis = 0 )
159/28:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis = 0 )
159/29:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

regional_allowance_ATP
159/30:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100
159/31:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

regional_allowance_ATP.sum(axis=0)
159/32:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

regional_allowance_ATP
159/33:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100
159/34:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other =  ((global_baseline-global_emissions)*rci_df2030) + (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100
other
159/35:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100
other2
159/36:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100
other1
159/37:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100
#other1
159/38:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
#other1
159/39:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
#other1
159/40:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
#other1
159/41:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 - other1
results
#other1
159/42:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 - other1
results.sum(axis =0)
#other1
159/43:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 - other1 + other2
results.sum(axis =0)
#other1
159/44:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 - other1 + other1
results.sum(axis =0)
#other1
159/45:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 - other1 + other2
results.sum(axis =0)
#other1
159/46:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 + other1 - other2
results.sum(axis =0)
#other1
159/47:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 - other1 + other2
results.sum(axis =0)
#other1
159/48:
alGDR_2030 = mitigation_baseline - (rci_df2030.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/49:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/50:
alGDR_2030 = mitigation_baseline - (rci_df2030.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/51:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/52:
alGDR_2030 = mitigation_baseline - (rci_df2030.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/53:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030.sum(axis=0)
159/54:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

global_emissions
159/55: regional_allowance_ATP.sum(axis=0)
159/56:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030 = mitigation_baseline - (rci_df*al2020)
alGDR_2030.sum(axis=0)
159/57:
#regional allowance GDR for t< 2051 

al2020 = (global_baseline-global_emissions)
al2020

#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

rci_df*al2020
159/58:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#-
other1=  ((global_baseline-global_emissions)*rci_df2030) #+
other2 = (((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
other1.sum(axis=0)
other2.sum(axis= 0)
results = al2100 + other1 - other2
results.sum(axis =0)
#other1
159/59:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
159/60:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = ((global_baseline-global_emissions)*rci_df2030)
159/61:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = ((global_baseline-global_emissions)*rci_df2030)
other
159/62:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =1)
159/63:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)
159/64:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)
159/65:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
159/66:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
stuff
159/67:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
stuff.sum(axis= 0)
159/68:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
stuff.sum(axis= 0)

reduction = global_baseline - global_emissions
reduction
159/69:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
stuff.sum(axis= 0)

reduction = global_baseline - global_emissions

dif = stuff - reduction 
dif
159/70:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
stuff.sum(axis= 0)

reduction = global_baseline - global_emissions

dif = stuff + reduction 
dif
159/71:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

stuff= mitigation_baseline - mitigation_emissions
stuff.sum(axis= 0)

reduction = global_baseline - global_emissions

dif = stuff - reduction 
dif
159/72:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

# difference between what is emitted and what should be emitted on a regional scale
stuff= mitigation_baseline - mitigation_emissions
stuff.sum(axis= 0)

# // on a global scale 
reduction = global_baseline - global_emissions

dif = reduction - stuff 
dif
159/73:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

# difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
stuff= mitigation_baseline - mitigation_emissions
#stuff.sum(axis= 0)

# // on a global scale 
reduction = global_baseline - global_emissions

# dif between the two shoudl be 0 but isn't 
dif = reduction - stuff 
dif
159/74:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
other.sum(axis =0)

# difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
stuff= mitigation_baseline - mitigation_emissions
stuff = stuff.sum(axis= 0)

# // on a global scale 
reduction = global_baseline - global_emissions

# dif between the two shoudl be 0 but isn't 
dif = reduction - stuff 
dif
159/75:
al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
159/76:
alGDR_2030 = mitigation_baseline - (rci_df.mul(al2020,axis = 1))
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
159/77:


#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
159/78:
#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
159/79:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
# rci2020 =rci2020*100
# rci2030 = rci2030*100
rci2020.to_frame()
rci2030.to_frame()

global_emissions
161/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
161/3:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in al2020.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
161/4:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in mitigation_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
161/5:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
161/6:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)

rci_df
161/7:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)

other = rci_df*mitigation_emissions
other.sum(axis= 0)
161/8:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
161/9:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in al2020.index

})

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/10:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/11:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/12:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
al2100bis.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/13:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
al2100bis.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/14:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
al2100bis.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/15:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP),
al2100bis.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
161/16:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP),
al2100bis.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
162/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
162/2: regional_allowance_ATP.sum(axis=0)
162/3:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
162/4:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP),
al2100bis.sum(axis=0)

# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
162/5:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
al2100bis.sum(axis=0)
# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
162/6:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

})

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
#al2100bis.sum(axis=0)
# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
162/7:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100bis = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
#al2100bis.sum(axis=0)
# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
162/8:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100 = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
#al2100bis.sum(axis=0)
# other = mitigation_baseline - ((global_baseline-global_emissions)*rci_df2030)
# other.sum(axis =0)

# # difference between what is emitted and what should be emitted on a regional scale, the amount that needs to be reduced 
# stuff= mitigation_baseline - mitigation_emissions
# stuff =stuff.sum(axis= 0)

# # // on a global scale 
# reduction = global_baseline - global_emissions

# # dif between the two shoudl be 0 
# dif = reduction - stuff 
# dif
162/9:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100 = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
162/10:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100 = (((2100 - 2030/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
162/11:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100 = (((2100 - 2030)/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
162/12:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

al2100 = (( 70 *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((2100 - 2030)/70)*regional_allowance_ATP)
162/13:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)
162/14:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
163/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
163/2: regional_allowance_ATP.sum(axis=0)
163/3:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
163/4:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
164/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
164/2: regional_allowance_ATP.sum(axis=0)
164/3:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
164/4:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
164/5:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
164/6:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
164/7:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

old = ((global_baseline-global_emissions)*rci_df2030)
old
164/8:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

old = ((global_baseline-global_emissions)*rci_df2030)
old
164/9:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

rci_df2030

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/10:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)

rci_df
164/11:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

rci_df2030.to_frame()

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
#rci2030.to_frame()
164/13:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
164/14:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/15:
#rci data frame 

rci_df = pd.DataFrame({

    year: rci2030

    for year in global_baseline.index

}),

rci_df 
#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/16:
#rci data frame 

rci_df = pd.DataFrame({

    year: rci2030

    for year in global_population.index

}),

rci_df 
#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/17:
#rci data frame 

rci_df = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df 
#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/18:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030

# al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
# al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/19:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)#- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/20:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) #+(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
164/21:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)

# old = ((global_baseline-global_emissions)*rci_df2030)
# old
166/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
166/2: regional_allowance_ATP.sum(axis=0)
166/3:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)

rci_df
166/4:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
167/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]
rci2030 = rci["2030"]
rci2020.to_frame()
rci2030.to_frame()
167/2: regional_allowance_ATP.sum(axis=0)
167/3:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)

rci_df
167/4:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030

al2100 = (((2100 - global_emissions.index.astype(int))/70) *mitigation_baseline)- ((global_baseline-global_emissions)*rci_df2030) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
167/5:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)

alGDR_2030
167/6:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
al2100 = (((2100 - years)/70) *(mitigation_baseline- ((global_baseline-global_emissions)*rci_df2030)) +(((global_emissions.index.astype(int) - 2030)/70)*regional_allowance_ATP)
al2100.sum(axis=0)
167/7:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
percentage_GDR = ((2100 - years)/70)
years = global_emissions.index.astype(int)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
167/8:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
167/9:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
167/10:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
167/11: regional_allowance_ATP.sum(axis=0)
167/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
rci2020.sum()
167/13:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
alGDR_2030.sum(axis=0)
167/14:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
167/15:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
167/16:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
167/17:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:3]
regional_al_p1
167/18:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_allowance_p2 = al2100.iloc [:, 2:]
167/19:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_allowance_p2 = al2100.iloc [:, 2:]
regional_allowance_p2
167/20:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
167/21: regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2])
167/22:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2])
regional_allowance_GDR
167/23:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
167/24:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2])
regional_allowance_GDR
167/25:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
167/26:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2])
regional_allowance_GDR
167/27:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR
167/28:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=1)
167/29:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
167/30:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG
167/31:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
167/32:
#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC
167/33:
#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER
167/34:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
167/35:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 
GDR_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
167/36:
avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')
167/37:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)
167/38:
#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)
167/39:
CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_AP.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR
167/40:
CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR
167/41:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
167/42:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 
GDR_mitigationcosts

#avoided damages
avoided_damages = pd.read_csv('avoided_damages.csv')

avoided_damages = avoided_damages.set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR
167/43:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 
GDR_mitigationcosts

#avoided damages
avoided_damages = pd.read_csv('avoided_damages.csv')

avoided_damages = avoided_damages.set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
168/1:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
168/2:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
168/3:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
168/4:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
168/5:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

#RA 
allowance_2020 = regional_allowance["2020"]

allowance_2020= allowance_2020.to_frame().reset_index()
allowance_2020.rename(columns = {'index':'Region'},
        inplace = True )
allowance_2020.columns = ['Region','emissions']

IEPC = allowance_2020

fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
fig.show()
fig.write_image("IEPC emissions 2020.svg")
fig.write_image("IEPC emissions 2020.png")
168/6:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
168/7:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
167/44:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

#avoided damages
avoided_damages = pd.read_csv('avoided_damages.csv')

avoided_damages = avoided_damages.set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
169/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
169/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
169/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
169/4:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
170/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions
170/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC.sum(axis=0)
170/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
170/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
170/5:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG 

PCC_mitigationcosts.to_csv("output\mitig_costs_PCC.csv")

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

#NPV all steps 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
169/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
169/6:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
169/7:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
169/8:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
173/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
173/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
173/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
173/4:
GF = al_GF.transpose()
GF.columns= GF.iloc[0]
GF.drop(['Region'], inplace =True)
GF.reset_index(inplace =True)
#GF.rename(columns = {'index':'Region'}, inplace =True)
GF.rename(columns = {'index':'year'}, inplace =True )
GF
fig = px.line(GF, 
               x= 'year',
               y= 'Region',)
fig
173/5:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
173/6:
allowances = pd.read_csv('allowances_hor.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
173/7:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
173/8:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv('regional_allowance_GDR.csv')
167/45:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)

regional_allowance_GDR.("allowance_GDR.csv")
167/46:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)

regional_allowance_GDR.("allowance_GDR.csv")
167/47:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
173/9:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")
167/48:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
173/10:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")
173/11:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('allowance PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")
173/12:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')
173/13:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_ver = pd.concat(frames, axis =0)
allowances_ver.to_csv('allowances_ver.csv')

allowances_ver
173/14:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_ver = pd.concat(frames, axis =1)
allowances_ver.to_csv('allowances_hor .csv')
173/15:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =1)
allowances_hor.to_csv('allowances_hor .csv')
allowaances_hor
173/16:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =1)
allowances_hor.to_csv('allowances_hor .csv')
allowances_hor
173/17:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =0)
allowances_hor.to_csv('allowances_ver.csv')

allowances_hor
173/18:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =0)
allowances_hor.to_csv('allowances_hor.csv')

allowances_hor
173/19: al_GF
173/20: al_PCC
173/21: al_IEPC
173/22: al_ATP
173/23: al_GDR
173/24:
allowances = pd.read_csv('allowances_hor_fig.csv')
# allowances.set_index('Unnamed: 0', inplace =True)
# allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
# allowances
173/25:
allowances = pd.read_csv('allowances_hor_fig.csv')
# allowances.set_index('Unnamed: 0', inplace =True)
# allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
173/26:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.set_index('Unnamed: 0', inplace =True)
# allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
173/27:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 1': 'BSR'}, inplace =True)
allowances
173/28:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.set_index('Unnamed: 0', inplace =True)
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
allowances
173/29:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
allowances.set_index('Unnamed: 0', inplace =True)

allowances
173/30:
allowances = pd.read_csv('allowances_hor_fig.csv')
#allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('Unnamed: 0', inplace =True)
allowances
173/31:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('Unnamed: 0', inplace =True)
allowances
173/32:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
allowances.set_index('BSR', inplace =True)
allowances
173/33:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
173/34:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances
173/35:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
173/36:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")
173/37:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =0)
allowances_hor.to_csv('allowances_hor.csv')

allowances_hor
170/6:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
170/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions
170/8:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
173/38:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

check = al_PCC- al_GF
173/39:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_PCC
#check = al_PCC-al_GF
173/40:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

type.(al_PCC)
#check = al_PCC-al_GF
173/41:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

type(al_PCC)
#check = al_PCC-al_GF
173/42:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

check = al_PCC-al_GF
173/43:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

check = al_PCC.substract(al_GF)
173/44:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

check = al_PCC.subtract(al_GF)
173/45:
al_Gf.to_frame()
al_GDR.to_frame()
173/46:
al_GF.to_frame()
al_GDR.to_frame()
173/47:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
173/48:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances
173/49:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
173/50:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances
173/51:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
)
fig2
173/52:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
)
fig2
173/53:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
)
fig2
173/54:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    title = regional allowance over time per BSR
)
fig2
173/55:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "regional allowance per burden sharing over time"
)
173/56:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100
)

fig.update_yaxes(
    title="CO<sub>2</sub> emissions", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    ticksuffix=" GtCO<sub>2</sub>",
)
173/57:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

fig.update_yaxes(
    title="CO<sub>2</sub> emissions", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    ticksuffix=" GtCO<sub>2</sub>",
)
173/58:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

fig2.update_yaxes(
    title="CO<sub>2</sub> emissions", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    ticksuffix=" GtCO<sub>2</sub>",
)
173/59:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances.loc(['CHN', 'IND'])
173/60:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances.loc['CHN', 'IND']
173/61:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances.loc['CHN', 'USA','WEU']
175/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
175/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")
175/3:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =0)
allowances_hor.to_csv('allowances_hor.csv')

allowances_hor
175/4:
allowances = pd.read_csv('allowances_hor_fig.csv')
allowances.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances
175/5:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

fig2.update_yaxes(
    title="CO<sub>2</sub> emissions", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    ticksuffix=" GtCO<sub>2</sub>",
)
175/6:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

fig2.update_yaxes(
    title="CO<sub>2</sub> emissions",
    
)
175/7:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

fig2.update_yaxes(
    title="CO<sub>2</sub> emissions"
    
)
175/8:
selection = allowances.loc['CAN']
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

fig2.update_yaxes(
    title="CO<sub>2</sub> emissions"
    
)
175/9: selection = allowances[allowances['CAN']]
175/10: selection = allowances[allowances['Region'] == 'CAN']
175/11:
selection = allowances[allowances['Region'] == 'CAN']
selection
175/12:
selection = allowances[allowances['Region'] == 'CAN', 'USA']
selection
175/13:
selection = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection
175/14:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

fig2.update_xaxes(
    range=[2020, 2100]
)

#fig2.update_yaxes(
#     title="CO<sub>2</sub> emissions"
    
# )
175/15:
fig2 = px.line(
    allowances,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

# fig2.update_xaxes(
#     range=[2020, 2100]
# )

#fig2.update_yaxes(
#     title="CO<sub>2</sub> emissions"
    
# )
175/16:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selection,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
175/17:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selectionNA,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
175/18:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selectionNA,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
175/19:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selectionNA,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
178/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
178/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

# mitigation_emissions = mitigation.loc["regional_emissions"]
# mitigation_baseline=  mitigation.loc["baseline"]
# mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
# regional_gdp = mitigation.loc["GDP_gross"]
# global_emissions = mitigation_emissions.sum(axis=0)
# global_gdp = regional_gdp.sum(axis=0)
# global_baseline= mitigation_baseline.sum(axis=0)
# global_population = mitigation_population.sum(axis=0)
178/3: mitigation_population
178/4: GF_al_pc = al_GF/mitigation
178/5:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")
178/6: GF_al_pc = al_GF/mitigation
178/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF
178/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region')
178/9:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region')
al_ATP.set_index('Region')
al_GDR.set_index('Region')
al_IEPC.set_index('Region')
al_PCC.set_index('Region')
178/10: GF_al_pc = al_GF/mitigation
178/11: GF_al_pc = al_GF/mitigation_population
178/12:
GF_al_pc = al_GF/mitigation_population
GF_al_pc = al_GF/mitigation_population
178/13:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population
176/1:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
176/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
176/3:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
176/4:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= ['AP', 'GF', 'IEPC', 'PCC'], 
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
177/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
177/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')

CBRs = pd.read_csv('output')
177/3:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
177/4:
#AP
MCG_AP_ind = MCG_AP.set_index("Region")
MCG_AP_sum = MCG_AP_ind.sum(axis = 1)
MCG_AP_sum= MCG_AP_sum.to_frame()
MCG_AP_sum = MCG_AP_sum.reset_index()
MCG_AP_sum.columns = ['Region 1', 'MCG AP']
MCG_AP_fig = px.scatter(MCG_AP_sum, x="Region 1", y="MCG AP")
#MCG_AP_fig
177/5:
#PCC 
MCG_PCC_ind = MCG_PCC.set_index("Region")
MCG_PCC_sum = MCG_PCC_ind.sum(axis = 1)
MCG_PCC_sum= MCG_PCC_sum.to_frame()
MCG_PCC_sum = MCG_PCC_sum.reset_index()
MCG_PCC_sum.columns = ['Region 2', 'MCG PCC']
MCG_PCC_fig = px.scatter(MCG_PCC_sum, x="Region 2", y="MCG PCC")
#MCG_PCC_fig
177/6:
#IEPC 
MCG_IEPC_ind = MCG_IEPC.set_index("Region")
MCG_IEPC_sum = MCG_IEPC_ind.sum(axis = 1)
MCG_IEPC_sum= MCG_IEPC_sum.to_frame()
MCG_IEPC_sum = MCG_IEPC_sum.reset_index()
MCG_IEPC_sum.columns = ['Region 3', 'MCG IEPC']
MCG_IEPC_fig = px.scatter(MCG_IEPC_sum, x="Region 3", y="MCG IEPC")
177/7:
#combining all the frames option 
frames = [MCG_IEPC_sum, MCG_PCC_sum, MCG_AP_sum, MCG_GF_sum ]
MCGs = pd.concat(frames, axis= 1 )
MCGs = MCGs.drop(['Region 2', 'Region 1', 'Region'], axis=1)
MCGs.rename(columns = {'MCG IEPC':'IEPC', 'MCG PCC':'PCC', 'MCG AP':'AP', 'MCG GF':'GF'}, inplace =True )
MCGs.to_csv("MCGs_data")
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= ['IEPC', 'PCC', 'AP', 'GF'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
178/14: PCC_al_pc
178/15: al_ATP
178/16: al_ATP.melt("Region")
178/17:
test = al_ATP.melt("Region")
test["Burden sharing"] = "ATP"
178/18:
test = al_ATP.melt("Region")
test["Burden sharing"] = "ATP"
test
178/19:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population

GF_al_pc
178/20:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region')
al_ATP.set_index('Region')
al_GDR.set_index('Region')
al_IEPC.set_index('Region')
al_PCC.set_index('Region')

mitigation_population
178/21:
GF_al_pc = al_GF.divide(mitigation_population , axis =1)
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population

GF_al_pc
178/22:
GF_al_pc = al_GF.divide(mitigation_population , axis =0)
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population

GF_al_pc
178/23:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
178/24:
GF_al_pc = al_GF.divide(mitigation_population , axis =0)
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population

GF_al_pc
178/25:
GF_al_pc = al_GF.divide(mitigation_population , axis =0)
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population

GDR_al_pc
178/26:
ATP_al_pc = ATP_al_pc.melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
178/27:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population
178/28:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population
PCC_al_pc
178/29:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population
PCC_al_pc.stack()
178/30:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population
PCC_al_pc.stack().reset_index()
178/31:
GF_al_pc = al_GF/mitigation_population
GDR_al_pc = al_GDR/mitigation_population
ATP_al_pc = al_ATP/mitigation_population
IEPC_al_pc = al_IEPC/mitigation_population
PCC_al_pc = al_PCC/mitigation_population
PCC_al_pc
178/32:
ATP_al_pc = ATP_al_pc.reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
178/33:
ATP_al_pc = ATP_al_pc.reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"

ATP_al_pc
178/34:
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"

ATP_al_pc
178/35:
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"

ATP_al_pc
178/36:
GF_al_pc = al_GF/mitigation_population.reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = al_GDR/mitigation_population.reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = al_ATP/mitigation_population.reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = al_IEPC/mitigation_population.reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = al_PCC/mitigation_population.reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"
178/37:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowawnce = pd.concat(frames, axis= 1 )
178/38:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowawnce = pd.concat(frames, axis= 1 )

per_capita_allowawnce
178/39:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance
178/40:
GF_al_pc = al_GF/mitigation_population.reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = al_GDR/mitigation_population.reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = al_ATP/mitigation_population.reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = al_IEPC/mitigation_population.reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = al_PCC/mitigation_population.reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

GF_al_pc
178/41:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = al_ATP/mitigation_population.reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = al_IEPC/mitigation_population.reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = al_PCC/mitigation_population.reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

GF_al_pc
178/42:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

GF_al_pc
178/43:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance
178/44:
fig2 = px.line(
    allowances,
    x='variable',
    y= 'value'
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)
178/45:
fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)
178/46:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)
178/47:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)
178/48:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
177/8:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR')



# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
180/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
180/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')



# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
180/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
180/4:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP.sum(axis =1)

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
180/5:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP = MCG_AP.sum(axis =1)

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
180/6:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
179/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
179/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
179/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
179/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
179/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
180/7:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
181/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
179/6:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
181/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP.melt('Region')

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/4:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP.melt('Region')
MCG_IEPC.melt('Region')

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/5:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = AP 
MCG_IEPC.melt('Region')

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/6:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/7:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'

MCG_PCC
# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/8:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/9:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'

MCG_PCC

# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/10:
frames = [MCG_AP, MCG_GDR, MCG_GF, MCG_IEPC, MCG_PCC]
MCGs = pd.concat(frames, axis =0)
181/11:
frames = [MCG_AP, MCG_GDR, MCG_GF, MCG_IEPC, MCG_PCC]
MCGs = pd.concat(frames, axis =0)

MCGs
181/12:
MCGs = px.scatter(MCGs,
                  x="variable",
                 y= "Burden sharing regime",
                  title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
# MCGs
181/13:
MCGs = px.scatter(MCGs,
                  x="variable",
                 y= "Burden sharing regime",
                  title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/14:
frames = [MCG_AP, MCG_GDR, MCG_GF, MCG_IEPC, MCG_PCC]
MCGs = pd.concat(frames, axis =0)

MCGs
181/15:
MCGs = px.scatter(MCGs,
                  x="variable",
                 y= "Burden sharing regime",
                  title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/16:
MCGs = px.scatter(MCGs,
                  x="variable",
                 y= "value",
                  color = "Burden sharing regime"
                  title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/17:
MCGs = px.scatter(MCGs,
                  x="variable",
                 y= "value",
                  color = "Burden sharing regime",
                  title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/18:
frames = [MCG_AP, MCG_GDR, MCG_GF, MCG_IEPC, MCG_PCC]
MCGs = pd.concat(frames, axis =0)
181/19:
MCGs = px.scatter(MCGs,
                  x="variable",
                 y= "value",
                  color = "Burden sharing regime",
                  title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/20:
MCGs_plot = px.scatter(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/21:
frames = [MCG_AP, MCG_GDR, MCG_GF, MCG_IEPC, MCG_PCC]
MCGs = pd.concat(frames, axis =0)
181/22:
MCGs_plot = px.scatter(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs
181/23:
MCGs_plot = px.scatter(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
181/24:
MCGs_plot = px.scatter(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
181/25:
MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
181/26:
MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
181/27:
MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
181/28: MCG_AP.sum(axis=1)
181/29: MCG_APsum = MCG_AP.sum(axis=1)
181/30: MCG_APsum = MCG_AP.sum(axis=0)
181/31:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum
181/32:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)



MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
182/1:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_GF.set_index("Region")

MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
182/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
182/3:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_GF.set_index("Region")

MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
182/4:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_GF.set_index("Region")
MCG_GDR.set_index("Region")
MCG_AP.set_index("Region")
MCG_IEPC.set_index("Region")
MCG_PCC.set_index("Region")

MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
182/5:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_GF.set_index("Region")
MCG_GDR.set_index("Region")
MCG_AP.set_index("Region")
MCG_IEPC.set_index("Region")
MCG_PCC.set_index("Region")

# MCG_APsum = MCG_GF.sum(axis=1)
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/6:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_GF.set_index("Region")
MCG_GDR.set_index("Region")
MCG_AP.set_index("Region")
MCG_IEPC.set_index("Region")
MCG_PCC.set_index("Region")

MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
182/7:
MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
182/8:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_GF.set_index("Region")
MCG_GDR.set_index("Region")
MCG_AP.set_index("Region")
MCG_IEPC.set_index("Region")
MCG_PCC.set_index("Region")
182/9:
MCG_APsum = MCG_GF.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
182/10:
MCG_APsum = MCG_GF.sum(axis=0)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/11:
MCG_APsum = MCG_GF.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
181/33:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
181/34:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
182/12:
MCG_APsum = MCG_GF.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/13:
MCG_APsum = MCG_GF.sum(axis=0)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/14:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/15:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum.to_frame()
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/16:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum.to_frame()
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/17:
MCG_APsum = MCG_AP.sum(axis=0)
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/18:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/19:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
182/20:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


# MCG_GF.set_index("Region")
# MCG_GDR.set_index("Region")
# MCG_AP.set_index("Region")
# MCG_IEPC.set_index("Region")
# MCG_PCC.set_index("Region")
182/21:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
183/1:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
183/2:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


# MCG_GF.set_index("Region")
# MCG_GDR.set_index("Region")
# MCG_AP.set_index("Region")
# MCG_IEPC.set_index("Region")
# MCG_PCC.set_index("Region")
183/3:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
183/4:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


# MCG_GF.set_index("Region")
# MCG_GDR.set_index("Region")
# MCG_AP.set_index("Region")
# MCG_IEPC.set_index("Region")
# MCG_PCC.set_index("Region")
183/5:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


# MCG_GF.set_index("Region")
# MCG_GDR.set_index("Region")
# MCG_AP.set_index("Region")
# MCG_IEPC.set_index("Region")
# MCG_PCC.set_index("Region")
183/6:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
183/7:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
183/8:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF.set_index("Region")
MCG_GDR.set_index("Region")
MCG_AP.set_index("Region")
MCG_IEPC.set_index("Region")
MCG_PCC.set_index("Region")
183/9:
MCG_APsum = MCG_AP.sum(axis=0)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
183/10:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
181/35:
#Grandfathering 
#plot of all all the MCG against each other with the region as an axis 
MCG_GF_ind = MCG_GF.set_index("Region")
MCG_GF_sum = MCG_GF_ind.sum(axis = 1)
MCG_GF_sum= MCG_GF_sum.to_frame()
MCG_GF_sum = MCG_GF_sum.reset_index()
MCG_GF_sum.columns = ['Region', 'MCG GF']
MCG_GF_fig = px.scatter(MCG_GF_sum, x="Region", y="MCG GF")
#MCG_GF_fig
#MCG_IEPC_fig =  px.bar(MCG_IEPC, x="Region", y="year",)
#MCG_PCC_fig =  px.bar(MCG_PCC, x="Region", y="CBR",)
#MCG_AP_fig = px.bar(MCG_AP, x="Region", y="CBR",)
#MCG_GF_fig
181/36: MCG_GF_ind
183/11:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
183/12:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_APsum
# MCG_IEPCsum = MCG_IEPC.sum(axis=1)
# MCG_PCCsum = MCG_PCC.sum(axis=1)
# MCG_GDRsum = MCG_GDR.sum(axis=1)
# MCG_GFsum = MCG_GF.sum(axis=1)
183/13:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
183/14:
MCG_APsum = MCG_AP.sum(axis=1)
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)

MCG_APsum
183/15:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1)
MCG_PCCsum = MCG_PCC.sum(axis=1)
MCG_GDRsum = MCG_GDR.sum(axis=1)
MCG_GFsum = MCG_GF.sum(axis=1)
183/16:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()
183/17:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
183/18:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)

MCGs
183/19:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

MCG_APsum

# frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
# MCGs = pd.concat(frames, axis=1)

# MCGs.rename( columns = {'0':'AP'})
183/20:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

MCG_APsum.melt("Region")

# frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
# MCGs = pd.concat(frames, axis=1)

# MCGs.rename( columns = {'0':'AP'})
183/21:
MCG_APsum = MCG_AP.sum(axis=1).melt("Region") #to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

MCG_APsum

# frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
# MCGs = pd.concat(frames, axis=1)

# MCGs.rename( columns = {'0':'AP'})
183/22:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

MCG_APsum.melt("Region")

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
183/23:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
183/24:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
183/25:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
MCGs
183/26:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
#MCGs = MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
MCGs = MCGS.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'])
183/27:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
#MCGs = MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'])
183/28:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
#MCGs = MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)
183/29:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
#MCGs = MCGs.rename( columns = {'0':'AP', '0':'IEPC'})
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)
MCGs
183/30:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)

MCG_IEPCsum
183/31:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)

MCG_AP
183/32:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)

MCG_APsum
183/33:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)

MCG_GDRsum
183/34:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)
183/35:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'IEPC','PCC', 'GDR', 'GF'], axis= 1)
MCGs
183/36:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs
183/37:
MCGs = px.scatter(MCGs,
                  x="Region 3",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
183/38:
MCGs = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
183/39:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs.reset_index()
183/40:
MCGs = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
183/41:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs.reset_index(), inplace = True
183/42:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()
183/43:
MCGs = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs
183/44:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs_plot
183/45:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()
183/46:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs.update_xaxes(
    title = "Region"
)

MCGs.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs_plot
183/47:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs_plot
183/48:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()

MCGs
183/49:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")

MCG_GF
183/50:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
183/51:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()

MCG_APsum
183/52: MCGs
183/53:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()

MCG_APsum
183/54: MCGs
183/55:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()

MCG_GDRsum
183/56:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','PCC', 'IEPC', 'AP'], axis= 1)
MCGs = MCGs.reset_index()

MCG_PCCsum
183/57:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','PCC', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()

MCG_IEPCsum
183/58:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','GF', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()

MCG_IEPCsum
183/59: MCGs
183/60:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','GF', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()

MCG_GFsum
183/61:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','GF', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()
183/62:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-10,3],
)
MCGs_plot
183/63:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,5],
)
MCGs_plot
183/64:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
175/20:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_ATP.melt('Region')
al_ATP ["Burden sharing"] = "AP"
175/21:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"
al_Ap
175/22:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"
al_AP
175/23:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"
175/24:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]

fig2 = px.line(
    frames,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
175/25:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

fig2 = px.line(
    frames,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
175/26:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
175/27:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
175/28:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
175/29:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
175/30:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =0)
allowances_hor.to_csv('allowances_hor.csv')

allowances_hor
175/31:
allowances_hor = pd.read_csv('allowances_hor_fig.csv')
allowances_hor.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances_hor
175/32:
fig2 = px.line(
    allowances_hor,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

# fig2.update_xaxes(
#     range=[2020, 2100]
# )

#fig2.update_yaxes(
#     title="CO<sub>2</sub> emissions"
    
# )
175/33:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

# al_AP = al_ATP.melt('Region')
# al_AP ["Burden sharing"] = "AP"

# al_PCC = al_PCC.melt('Region')
# al_PCC["Burden sharing"] = "PCC"

# al_GDR = al_GDR.melt('Region')
# al_GDR ["Burden sharing"] = "GDR"

# al_GF = al_GF.melt('Region')
# al_GF ["Burden sharing"] = "GF"

# al_IEPC = al_IEPC.melt('Region')
# al_IEPC ["Burden sharing"] = "IEPC"

# frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
# allowances= pd.concat(frames, axis =0 )

# fig2 = px.line(
#     allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )

# fig2.update_layout(
#     title = "Regional allowance per capita per burden sharing over time"
# )
175/34:
frames = [ al_GF, al_PCC, al_IEPC, al_ATP, al_GDR ]
allowances_hor = pd.concat(frames, axis =0)
allowances_hor.to_csv('allowances_hor.csv')

allowances_hor
175/35:
allowances_hor = pd.read_csv('allowances_hor_fig.csv')
allowances_hor.rename(columns = {'Unnamed: 0': 'BSR'}, inplace =True)
#allowances.set_index('BSR', inplace =True)
allowances_hor
175/36:
fig2 = px.line(
    allowances_hor,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per burden sharing over time"
)

# fig2.update_xaxes(
#     range=[2020, 2100]
# )

#fig2.update_yaxes(
#     title="CO<sub>2</sub> emissions"
    
# )
175/37:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
178/49:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
178/50:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
178/51:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
178/52:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
178/53:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"
178/54:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance
178/55:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
184/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
184/2:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"
184/3:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance
184/4:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
184/5: per_capita_allowance[per_capita_allowance.variable < 2101]
184/6: per_capita_allowance[per_capita_allowance.variable < 2101]
184/7: per_capita_allowance[per_capita_allowance.variable < '2101']
184/8:
frames = [GF_al_pc, GDR_al_pc, ATP_al_pc, IEPC_al_pc, PCC_al_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
175/38:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

allowances= allowances[allowances.variable < '2101']

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
175/39:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection
185/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
185/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

allowances= allowances[allowances.variable < '2101']

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
185/3:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection
185/4:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selectionNA
185/5:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selectionNA,
    x='variable',
    y= ['2020', '2025', '2030', '2035', '2040', '2045', '2050', '2055', '2060', '2065', '2070', '2075', '2080', '2085', '2090', '2095', '2100'],
    line_group="Region",
    color="BSR",
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
185/6:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selectionNA,
    x='variable',
    y= 'value'
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
185/7:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selection

figNA = px.line(
    selectionNA,
    x='variable',
    y= 'value',
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
185/8:
selectionNA = allowances[(allowances['Region'] == 'CAN') | (allowances['Region'] == 'USA')]
selectionNA

figNA = px.line(
    selectionNA,
    x='variable',
    y= 'value',
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)

figNA.update_layout(
    title = "Regional allowance per burden sharing over time in North America"
)
188/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
188/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

allowances= allowances[allowances.variable < '2101']

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
186/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
186/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
186/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
186/4:
frames = [MCG_AP, MCG_GDR, MCG_GF, MCG_IEPC, MCG_PCC]
MCGs = pd.concat(frames, axis =0)
186/5:
MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
186/6:
MCGs= MCGs[MCGs.variable < 2101]

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
186/7:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
187/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
187/2:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
187/3:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_APsum, MCG_GDRsum, MCG_GFsum, MCG_IEPCsum, MCG_PCCsum] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','GF', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()
187/4:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
186/8:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
186/9:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
187/5:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','GF', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()
187/6:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'GDR','PCC', 'IEPC', 'AP'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
187/7:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'AP', 'GDR','GF', 'IEPC', 'PCC'], axis= 1)
MCGs = MCGs.reset_index()
MCGs
187/8:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs = MCGs.reset_index()
MCGs
187/9: MCG_APsum
187/10: MCG_GFsum
187/11: MCG_GDRsum
187/12: MCG_GFsum
187/13: MCG_IEPCsum
187/14: MCG_PCCsum
187/15:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'IEPC','PCC', 'AP', 'GDR'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
189/1:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
189/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
189/3:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"
189/4:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
189/5:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
191/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
191/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
191/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
191/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
191/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP')

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
191/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
190/1: costs_GF
190/2:
#data mitigation costs 
costs_GF = pd.read('mitig_costs_GF.csv')
costs_IEPC = pd.read('mitig_costs_IEPC.csv')
costs_PCC = pd.read('mitig_costs_PCC.csv')
costs_AP = pd.read('mitig_costs_AP.csv')
costs_GDR = pd.read('mitig_costs_GDR.csv')

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation_population = mitigation.loc["population"]

#costs_GF_pc =
190/3:
# CBR plot 

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
190/4:
#data mitigation costs 
costs_GF = pd.read('mitig_costs_GF.csv')
costs_IEPC = pd.read('mitig_costs_IEPC.csv')
costs_PCC = pd.read('mitig_costs_PCC.csv')
costs_AP = pd.read('mitig_costs_AP.csv')
costs_GDR = pd.read('mitig_costs_GDR.csv')

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation_population = mitigation.loc["population"]

#costs_GF_pc =
190/5:
#data mitigation costs 
costs_GF = pd.read_csv('mitig_costs_GF.csv')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv')
costs_AP = pd.read_csv('mitig_costs_AP.csv')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv')

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

mitigation_population = mitigation.loc["population"]

#costs_GF_pc =
190/6: costs_GF
190/7: mitigation
190/8: mitigation_population
190/9: costs_GF
190/10:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region'))/GDP
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

costs_GF_pc = costs_GF/mitigation_population
costs_IEPC_pc = costs_IEPC/mitigation_population
costs_PCC_pc = costs_PCC/mitigation_population
costs_AP_pc = costs_AP/mitigation_population
costs_GDR_pc = costs_GDR/mitigation_population
190/11:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv)
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region'))/GDP
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

costs_GF_pc = costs_GF/mitigation_population
costs_IEPC_pc = costs_IEPC/mitigation_population
costs_PCC_pc = costs_PCC/mitigation_population
costs_AP_pc = costs_AP/mitigation_population
costs_GDR_pc = costs_GDR/mitigation_population
190/12:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region'))/GDP
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

costs_GF_pc = costs_GF/mitigation_population
costs_IEPC_pc = costs_IEPC/mitigation_population
costs_PCC_pc = costs_PCC/mitigation_population
costs_AP_pc = costs_AP/mitigation_population
costs_GDR_pc = costs_GDR/mitigation_population
190/13:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region'))/GDP
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region'))/GDP
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region'))/GDP
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region'))/GDP
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region'))/GDP

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF
190/14:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#)/GDP
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region'))/GDP
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region'))/GDP
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region'))/GDP
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region'))/GDP

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF
190/15:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region'))/GDP
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region'))/GDP
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region'))/GDP
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region'))/GDP

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF
190/16:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF
190/17:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF
190/18:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = 
avoided_damages_perc = (damage_costs_baseline - damage_costs_mitigation)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF.reset_index(inplace =True )
190/19:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline - damage_costs_mitigation)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF.reset_index(inplace =True )
190/20:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline - damage_costs_mitigation)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF.reset_index(inplace =True )
costs_IEPC.reset_index(inplace =True )
costs_PCC.reset_index(inplace =True )
costs_AP.reset_index(inplace =True )
costs_GDR.reset_index(inplace =True )
190/21:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline - damage_costs_mitigation)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index(inplace =True ).melt('Region')
costs_IEPC = costs_IEPC.reset_index(inplace =True ).melt('Region')
costs_PCC = costs_PCC.reset_index(inplace =True ).melt('Region')
costs_AP = costs_AP.reset_index(inplace =True ).melt('Region')
costs_GDR = costs_GDR.reset_index(inplace =True ).melt('Region')
190/22:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline - damage_costs_mitigation)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/23: avoided_damages_perc
190/24:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/25: avoided_damages_perc
190/26: avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
190/27:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/28:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/29:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

avoided_damages_perc
190/30:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/31:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/32:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/33:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/34:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/35:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/36:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/37:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
avoided_damages_perc
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/38:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/39:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
avoided_damages_perc
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/40:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/41:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
#avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
190/42:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')
190/43:
avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')

#years selection
avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < 2101]
damage_costs_baseline_perc = damage_costs_baseline_perc[damage_costs_baseline_perc.variable< 2101]
190/44:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')

#years selection
avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < '2101']
damage_costs_baseline_perc = damage_costs_baseline_perc[damage_costs_baseline_perc.variable< '2101']
190/45:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')

#years selection
avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < '2101']
damage_costs_baseline_perc = damage_costs_baseline_perc[damage_costs_baseline_perc.variable< '2101']
190/46:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)
190/47:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
190/48:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
190/49:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
#years selection
avoided_damages_perc = avoided_damages_perc[avoided_damages_perc.variable < '2101']
damage_costs_baseline_perc = damage_costs_baseline_perc[damage_costs_baseline_perc.variable< '2101']
190/50:
#plot avoided damages 

damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(frames, axis= 0)
190/51:
#plot avoided damages 

damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(frames, axis= 0)
damages
190/52:
#plot avoided damages 

damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages
190/53:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
190/54:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
190/55:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/56:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)*100

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/57:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/58:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig1.layout)
fig_combined
190/59:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
190/60:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
190/61:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)#/GDP)*100

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/62:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/63:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= 'Viridis' , 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/64:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= ' aquamarine' , 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/65:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= 'Pastel' , 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/66:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= 'pastel' , 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/67:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= pastel , 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/68:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/69:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/70:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
190/71:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])*100
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])*100
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)*100

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/72:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/73:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
190/74:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
190/75:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
190/76:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])*100
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])*100
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/77:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/78:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
190/79:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/80:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/81:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/82:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
190/83:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/84:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
190/85:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/86:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/87:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)*100

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
190/88:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
190/89:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
194/1:
# CBR plot 

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
194/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)*100

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
194/3:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
194/4:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
194/5:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
194/6:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = ((damage_costs_baseline_perc - damage_costs_mitigation_perc)/GDP)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
194/7:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
194/8:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
194/9:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
194/10:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
194/11:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
198/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
198/2:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
198/3:
#data 

CBRs= pd.read_csv("CBRs_plot_upd.csv")
CBRs
198/4:
#data
CBR_GF
CBR_IEPC
CBR_PCC
198/5:
#data
CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')
198/6:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_GF
198/7:
#data
CBR_GF = pd.read_csv('CBR_GF.csv')#.melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_GF
198/8:
#data
CBR_GF = pd.read_csv('CBR_GF.csv')#.melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_IEPC
198/9:
#data
CBR_GF = pd.read_csv('CBR_GF.csv')#.melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_PCC
198/10:
#data
CBR_GF = pd.read_csv('CBR_GF.csv')#.melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_AP
198/11:
#data
CBR_GF = pd.read_csv('CBR_GF.csv')#.melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_GDR
198/12:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1)#.melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')
198/13:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')
198/14:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_G
198/15:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_GF
198/16:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
198/17:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF["Burden sharing"] = "GF"
CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC ["Burden sharing"] = "GF"
CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC ["Burden sharing"] = "GF"
CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP ["Burden sharing"] = "GF"
CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR ["Burden sharing"] = "GF"
198/18:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF["Burden sharing"] = "GF"
CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC ["Burden sharing"] = "GF"
CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC ["Burden sharing"] = "GF"
CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP ["Burden sharing"] = "GF"
CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR ["Burden sharing"] = "GF"

frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames, axis =1)
198/19:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF["Burden sharing"] = "GF"
CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC ["Burden sharing"] = "GF"
CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC ["Burden sharing"] = "GF"
CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP ["Burden sharing"] = "GF"
CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR ["Burden sharing"] = "GF"

frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames, axis =1)
CBRs
198/20:
#data
CBR_GF = pd.read_csv('CBR_GF.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF["Burden sharing"] = "GF"
CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC ["Burden sharing"] = "GF"
CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC ["Burden sharing"] = "GF"
CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP ["Burden sharing"] = "GF"
CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR ["Burden sharing"] = "GF"

frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames, axis =0)
CBRs
195/1:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
195/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
195/3:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
200/1:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variabla<2101]

AP_mitigationcosts

# # potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# # avoided_damages
# avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages = avoided_damages.set_index('Region')

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
200/3:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
200/4:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
200/5:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
200/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variabla<2101]

AP_mitigationcosts

# # potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# # avoided_damages
# avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages = avoided_damages.set_index('Region')

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/7:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variabla<2101]

AP_mitigationcosts

# # potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# # avoided_damages
# avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages = avoided_damages.set_index('Region')

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/8:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable<2101]

AP_mitigationcosts

# # potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# # avoided_damages
# avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages = avoided_damages.set_index('Region')

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/9:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']

AP_mitigationcosts

# # potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# # avoided_damages
# avoided_damages = pd.read_csv('avoided_damages.csv')
# avoided_damages = avoided_damages.set_index('Region')

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/10:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages


# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/11:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable, '2101']


# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/12:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']


# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/13:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']


# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/14:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
200/15:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot()
avoided_damages
# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/16:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot('Region')
avoided_damages
# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/17:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

#avoided_damages = avoided_damages.pivot('Region')
avoided_damages
# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/18:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot('variable')
avoided_damages
# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/19:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages
# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# AP_NPV= npv(AP_mitigationcosts)
# AD = npv(avoided_damages)

# CBR_AP = AD/AP_NPV
# CBR_AP = CBR_AP.to_frame().reset_index()
# CBR_AP.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_AP.columns = ['Region','CBR']

# CBR_AP.to_csv("output\CBR_AP.csv")
# CBR_AP
200/20:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
201/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
201/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
201/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
201/4:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
201/5:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")

CBR_GF
201/6: CBR_GF.reset_index()
201/7: CBR_GF.reset_index().rename(columns={''index'': ÍMAGE_region_num})
201/8: CBR_GF.reset_index().rename(columns={''index'': ''ÍMAGE_region_num''})
201/9: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'})
201/10: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}).drop(ÇBR)
201/11: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}).drop('ÇBR')
201/12: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}).drop('ÇBR', axis=0)
201/13: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}).drop('ÇBR', axis=1)
201/14: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop('ÇBR', axis=1)
201/15: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}).drop(columns={'ÇBR'})
201/16: CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop(columns={'ÇBR'})
201/17:
CBR_GFCBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop(columns={'ÇBR'})
CBR_GF.drop(columns={'ÇBR'})
201/18:
CBR_GF = CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop(columns={'ÇBR'})
CBR_GF.drop(columns={'ÇBR'})
201/19: CBR_GF
201/20: CBR_GF.iloc[:,:-1]
201/21: CBR_GF = CBR_GF.iloc[:,:-1]
201/22:
CBR_GF = CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop(columns={'ÇBR'})
CBR_GF = CBR_GF.iloc[:,:-1]
201/23: CBR_GF
201/24:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts

GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages

avoided_damages = avoided_damages.set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")

CBR_GF
201/25:
CBR_GF = CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop(columns={'ÇBR'})
CBR_GF = CBR_GF.iloc[:,:-1]
201/26: CBR_GF
201/27: CBR_GF.to_csv('output/Image_region')
201/28: CBR_GF.to_csv('output/Image_region.csv')
200/21: Image_region = pd.read('Image_region.csv')
200/22: Image_region = pd.read_csv('Image_region.csv')
200/23: Image_region = pd.read_csv('Image_region.csv')
201/29: CBR_GF.to_csv('Image_region.csv')
200/24: Image_region = pd.read_csv('Image_region.csv')
200/25: Image_region
200/26: Image_region.reset_index().set_index('Region')
200/27: Image_region.reset_index().set_index('Region').drop(columns={'índex'})
200/28: Image_region.reset_index().set_index('Region').drop(columns={'index'})
200/29: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
200/30: Image_region = pd.read_csv('Image_region.csv').set_index('Region').drop(columns={'index'})
200/31: Image_region = pd.read_csv('Image_region.csv')
200/32: CBR_AP.join(Image_region)
200/33: Image_region = pd.read_csv('Image_region.csv')
200/34: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
200/35: CBR_AP.join(Image_region)
200/36: CBR_AP.join(Image_region, how='inner')
200/37: Image_region
200/38: CBR_AP.join(Image_region)
200/39: CBR_AP.reset_index().set_index('Region')
200/40: CBR_AP = CBR_AP.reset_index().set_index('Region')
200/41:
CBR_AP.join(Image_region)
# frames = [CBR_AP, ]
200/42:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP.sort_values(by='ÍMAGE_region_num')
200/43:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0', 'ÍMAGE_region_num'])
200/44:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0', 'ÍMAGE_region_num'], axis=1)
200/45:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0', 'ÍMAGE_region_num'], axis=0)
200/46: Image_region = pd.read_csv('Image_region.csv')
200/47: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
200/48: CBR_AP = CBR_AP.reset_index().set_index('Region')
200/49:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0', 'ÍMAGE_region_num'], axis=0)
200/50:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
200/51: Image_region = pd.read_csv('Image_region.csv')
200/52: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
200/53: CBR_AP = CBR_AP.reset_index().set_index('Region')
200/54:
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
200/55:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
200/56: Image_region
200/57: Image_region
200/58:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
200/59: Image_region
200/60:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
CBR_AP
200/61:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
CBR_AP
200/62:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
CBR_AP
202/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
202/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
202/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
202/4:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
202/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
202/6:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
202/7:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']

CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
202/8: Image_region = pd.read_csv('Image_region.csv')
202/9: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
202/10: CBR_AP = CBR_AP.reset_index().set_index('Region')
202/11:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
CBR_AP
202/12: CBR_AP = CBR_AP.drop(['ÍMAGE_region_num'], axis =1)
202/13:
CBR_AP = CBR_AP.drop(['ÍMAGE_region_num'], axis =1)
CBRAp
202/14:
CBR_AP = CBR_AP.drop(['ÍMAGE_region_num'], axis =1)
CBR_AP
202/15:
CBR_AP = CBR_AP.drop(['ÍMAGE_region_num'], axis =0)
CBR_AP
202/16:
#CBR_AP = CBR_AP.drop(['ÍMAGE_region_num'], axis =0)
CBR_AP
202/17:
CBR_AP = CBR_AP.drop(['index'], axis =0)
CBR_AP
202/18:
CBR_AP = CBR_AP.drop([0], axis =0)
CBR_AP
202/19:
CBR_AP = CBR_AP.drop([0], axis =1)
CBR_AP
202/20:
#CBR_AP = CBR_AP.drop([0], axis =1)
CBR_AP
202/21:
CBR_AP = CBR_AP.drop(['index'], axis =1)
CBR_AP
202/22:
CBR_AP = CBR_AP.drop(['index'], axis =1)
CBR_AP.CBR_AP.to_csv("output\CBR_AP.csv")
202/23:
CBR_AP = CBR_AP.drop(['index'], axis =1)
CBR_AP.to_csv("output\CBR_AP.csv")
202/24:
#CBR_AP = CBR_AP.drop(['index'], axis =1)
CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
201/30:
Image = CBR_GF.reset_index().rename(columns={'index': 'ÍMAGE_region_num'}) #.drop(columns={'ÇBR'})
Image = Image.iloc[:,:-1]
201/31: CBR_GF.to_csv('Image_region.csv')
201/32: Image.to_csv('Image_region.csv')
201/33: Image_region = pd.read_csv('Image_region.csv')
201/34:
Image_region = pd.read_csv('Image_region.csv')
Image_region
201/35:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}) #.drop(columns={'ÇBR'})
Image = Image.iloc[:,:-1]
201/36: Image.to_csv('Image_region.csv')
201/37: Image_region = pd.read_csv('Image_region.csv')
201/38: Image_region
201/39: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
202/25:
Image_region = pd.read_csv('Image_region.csv')
Image_regoin
202/26:
Image_region = pd.read_csv('Image_region.csv')
Image_region
201/40:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}) #.drop(columns={'ÇBR'})
Image = Image.iloc[:,:-1]
Image
201/41:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns={'ÍMAGE_region_num'})
Image = Image.iloc[:,:-1]
Image
201/42: Image.to_csv('Image_region.csv')
201/43: Image_region = pd.read_csv('Image_region.csv')
202/27: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
201/44:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='ÍMAGE_region_num')
CBR_GF = CBR_GF.drop(columns=  = ['Unnamed: 0'], axis=1 )
CBR_AP
201/45:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='ÍMAGE_region_num')
CBR_GF = CBR_GF.drop(columns=['Unnamed: 0'], axis=1 )
CBR_AP
201/46:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='ÍMAGE_region_num')
CBR_GF = CBR_GF.drop(columns=['Unnamed: 0'], axis=1 )
CBR_GF
203/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
203/2:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
203/3:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
203/4:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP
203/5: Image_region = pd.read_csv('Image_region.csv')
203/6: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'index'})
203/7: CBR_AP = CBR_AP.reset_index().set_index('Region')
203/8:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='ÍMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
CBR_AP
203/9:
CBR_AP = CBR_AP.join(Image_region, rsuffix ='_r')
CBR_AP = CBR_AP.sort_values(by='IMAGE_region_num')
CBR_AP = CBR_AP.drop(columns = ['Unnamed: 0'], axis=1)
CBR_AP
204/1:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index= ='Region', columns='variable',)


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
204/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
204/3:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
204/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
204/5:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index= ='Region', columns='variable',)


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
204/6:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index= ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
204/7:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index= ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
204/8:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
205/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
205/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
205/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
205/4:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
205/5:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts
# GF_mitigationcosts= GF_mitigationcosts.melt('Region')
# GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
# GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# # avoided damages 
# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages = avoided_damages.melt('Region')
# avoided_damages = avoided_damages[avoided_damages.variable< '2101']

# avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# # avoided_damages


##NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# GF_NPV= npv(GF_mitigationcosts)
# AD = npv(avoided_damages)

# ## CBR 
# CBR_GF = AD/GF_NPV
# CBR_GF = CBR_GF.to_frame().reset_index()
# CBR_GF.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_GF.columns = ['Region','CBR']

# CBR_GF.to_csv("output\CBR_GF.csv")
205/6:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
205/7:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns={'ÍMAGE_region_num'})
Image = Image.iloc[:,:-1]
Image
205/8:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns={'IMAGE_region_num'})
Image = Image.iloc[:,:-1]
Image
205/9:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns={'IMAGE_region_num'})
#Image = Image.iloc[:,:-1]
Image
205/10:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns={'IMAGE_region_num'})
Image = Image.iloc[:,:-1]
Image
205/11:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'})#.drop(columns={'IMAGE_region_num'})
Image = Image.iloc[:,:-1]
Image
205/12: Image.to_csv('Image_region.csv')
205/13: Image_region = pd.read_csv('Image_region.csv')
205/14:
Image_region = pd.read_csv('Image_region.csv')
Image_region
205/15: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'Unnamed: 0'})
205/16: CBR_GF #= CBR_GF.reset_index().set_index('Region')
205/17: CBR_GF = CBR_GF.set_index('Region')
205/18:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='ÍMAGE_region_num')
CBR_GF = CBR_GF.drop(columns=['Unnamed: 0'], axis=1 )
CBR_GF
205/19:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='IMAGE_region_num')
CBR_GF = CBR_GF.drop(columns=['Unnamed: 0'], axis=1 )
CBR_GF
205/20:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='IMAGE_region_num')
CBR_GF
206/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
206/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
206/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
206/4:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
206/5:
Image = CBR_GF.reset_index().rename(columns={'index': 'IMAGE_region_num'})
Image = Image.iloc[:,:-1]
206/6: Image.to_csv('Image_region.csv')
206/7:
Image_region = pd.read_csv('Image_region.csv')
Image_region
206/8: Image_region = Image_region.reset_index().set_index('Region').drop(columns={'Unnamed: 0'})
206/9: CBR_GF = CBR_GF.set_index('Region')
206/10:
CBR_GF = CBR_GF.join(Image_region, rsuffix ='_r')
CBR_GF = CBR_GF.sort_values(by='IMAGE_region_num')
CBR_GF
199/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.to_csv("output/avoided_damages_ineqav.csv")
199/2:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?

mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs

#NPV 
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
199/3:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR.to_csv("output/cbr_inequal_aversion.csv")
CBR
199/4:
Image = CBR.reset_index().rename(columns={'index': 'IMAGE_region_num'})
Image
#Image.to_csv('Image_region.csv')
199/5:
Image = CBR.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns = 'CBR', axis =1)
Image
#Image.to_csv('Image_region.csv')
199/6:
Image = CBR.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns = 'CBR', axis =1)
Image.to_csv('output/Image_region.csv')
206/11:
#new mitigation costs

GF_mitigationcosts = mitigation_costs - MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")

CBR_GF
208/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
208/2:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
208/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
208/4:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable< '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot((index='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.set_index('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/5:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable< '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.set_index('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/6:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts
# IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable< '2101']
# IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# # avoided_damages

# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages = avoided_damages.set_index('Region')
# avoided_damages = avoided_damages[avoided_damages.variable< '2101']

# avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# IEPC_NPV= npv(IPC_mitigationcosts)
# AD = npv(avoided_damages)

# #CBR
# CBR_IEPC = AD/IEPC_NPV
# CBR_IEPC = CBR_IEPC.to_frame().reset_index()
# CBR_IEPC.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_IEPC.columns = ['Region','CBR']

# CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/7:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
# IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# # avoided_damages

# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages = avoided_damages.set_index('Region')
# avoided_damages = avoided_damages[avoided_damages.variable< '2101']

# avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# IEPC_NPV= npv(IPC_mitigationcosts)
# AD = npv(avoided_damages)

# #CBR
# CBR_IEPC = AD/IEPC_NPV
# CBR_IEPC = CBR_IEPC.to_frame().reset_index()
# CBR_IEPC.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_IEPC.columns = ['Region','CBR']

# CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/8:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# # avoided_damages

# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages = avoided_damages.set_index('Region')
# avoided_damages = avoided_damages[avoided_damages.variable< '2101']

# avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# IEPC_NPV= npv(IPC_mitigationcosts)
# AD = npv(avoided_damages)

# #CBR
# CBR_IEPC = AD/IEPC_NPV
# CBR_IEPC = CBR_IEPC.to_frame().reset_index()
# CBR_IEPC.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_IEPC.columns = ['Region','CBR']

# CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/9:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.set_index('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/10:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")
208/11:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs - MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
207/1:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[AP_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
207/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
207/3: regional_allowance_ATP.sum(axis=0)
207/4:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
207/5:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
207/6:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
207/7:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG
207/8:
#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction
207/9:
#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
TMC
207/10:
#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER
207/11:
#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
207/12:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[AP_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
207/13:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
209/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions
209/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
209/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
209/4:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG
PCC_mitigationcosts
#PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

# # potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after

# #NPV all steps 

# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# # avoided_damages

# avoided_damages = avoided_damages.set_index('Region')

# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# PCC_NPV= npv(PCC_mitigationcosts)
# AD = npv(avoided_damages)

# #CBR
# CBR_PCC = AD/PCC_NPV
# CBR_PCC = CBR_PCC.to_frame().reset_index()
# CBR_PCC.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_PCC.columns = ['Region','CBR']

# CBR_PCC.to_csv("output\CBR_PCC.csv")
209/5:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
209/6:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs - MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
212/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
212/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames, axis =0)
CBRs
212/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/4:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/5:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
212/6:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.reset_index().set_index('Region').drop(columns={'Unnamed: 0'})

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
212/7:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.reset_index().set_index('Region').drop(columns={'Unnamed: 0'})

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
Image_region
212/8:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
Image_region
212/9:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

#.drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/10:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = drop(['Unnamed: 0'], axis =1).set_index('Region')



# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/11:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')



# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/12:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = pd.concat([Image_region, CBR_GF])


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/13:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = pd.concat([Image_region, CBR_GF], ignore_index =True)


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/14:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = pd.join([Image_region, CBR_GF]).sort_values(by = 'IMAGE_region_num')


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/15:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = pd.join([Image_region, CBR_GF])
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num')
CBR_GF= CBR_GF.drop(columns = ['Unnamed: 0'], axis=1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/16:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num')
CBR_GF= CBR_GF.drop(columns = ['Unnamed: 0'], axis=1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
212/17:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num')
#CBR_GF= CBR_GF.drop(columns = ['Unnamed: 0'], axis=1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
215/1:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
215/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
215/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
216/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
216/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
213/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
213/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
213/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
213/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
213/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")
216/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
217/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
217/2:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
217/3:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
217/4:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
217/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
217/6:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
217/7:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
216/4:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
218/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GDR = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
# CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/4:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/5:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/6:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/7:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GDR = CBR_GF.set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_IEPC
213/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs - MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
218/8:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/9:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/10:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.set_index('Region')
CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/11:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop({'Unnanmed:0'})
# set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/12:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.drop({'Unnamed:0'})
# set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/13:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.reset_index()
#drop({'Unnamed:0'})
# set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/14:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.reset_index().drop(['Unnamed:0'])
# set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/15:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_IEPC = CBR_IEPC.join(Image_region)
# CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_PCC = CBR_PCC.join(Image_region)
# CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_AP = CBR_AP.join(Image_region)
# CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GF.reset_index().drop(['Unnamed:0 '])
# set_index('Region')
# CBR_GDR = CBR_GF.join(Image_region)
#CBR_GDR = CBR_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
218/16:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
218/17: CBR_AP
218/18: CBR_GF
218/19: CBR_IEPC
218/20: CBR_PCC
218/21:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
218/22: CBR_AP
218/23:
CBR_GF = CBR_GF.melt('Region')
CBR_GF ["Burden sharing regime"] = 'GF'

CBR_GF = CBR_GF.melt('Region')
CBR_GF 


frames = [CBR_GF, CBR_IEPC, CRB_PCC, CBR_AP, CBR_GDR]
218/24:
CBR_GF = CBR_GF.melt('Region')
CBR_GF ["Burden sharing regime"] = 'GF'

CBR_IEPC = CBR_IEPC.melt('Region')
CBR_IEPC ["Burden sharing regime"] = 'IEPC'

CBR_PCC = CBR_PCC.melt('Region')
CBR_PCC ["Burden sharing regime"] = 'PCC'

CBR_AP = CBR_AP.melt('Region')
CBR_AP ["Burden sharing regime"] = 'AP'

CBR_GDR = CBR_GDR.melt('Region')
CBR_GDR ["Burden sharing regime"] = 'GDR'

frames = [CBR_GF, CBR_IEPC, CRB_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames)
218/25:
CBR_GF = CBR_GF.melt('Region')
CBR_GF ["Burden sharing regime"] = 'GF'

CBR_IEPC = CBR_IEPC.melt('Region')
CBR_IEPC ["Burden sharing regime"] = 'IEPC'

CBR_PCC = CBR_PCC.melt('Region')
CBR_PCC ["Burden sharing regime"] = 'PCC'

CBR_AP = CBR_AP.melt('Region')
CBR_AP ["Burden sharing regime"] = 'AP'

CBR_GDR = CBR_GDR.melt('Region')
CBR_GDR ["Burden sharing regime"] = 'GDR'

frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames)
218/26:
CBR_GF = CBR_GF.melt('Region')
# CBR_GF ["Burden sharing regime"] = 'GF'

# CBR_IEPC = CBR_IEPC.melt('Region')
# CBR_IEPC ["Burden sharing regime"] = 'IEPC'

# CBR_PCC = CBR_PCC.melt('Region')
# CBR_PCC ["Burden sharing regime"] = 'PCC'

# CBR_AP = CBR_AP.melt('Region')
# CBR_AP ["Burden sharing regime"] = 'AP'

# CBR_GDR = CBR_GDR.melt('Region')
# CBR_GDR ["Burden sharing regime"] = 'GDR'

# frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames)
218/27:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
219/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
219/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_AP
218/28:

CBR_GF ["Burden sharing regime"] = 'GF'
CBR_GF = CBR_GF.melt('Region')
# CBR_IEPC = CBR_IEPC.melt('Region')
# CBR_IEPC ["Burden sharing regime"] = 'IEPC'

# CBR_PCC = CBR_PCC.melt('Region')
# CBR_PCC ["Burden sharing regime"] = 'PCC'

# CBR_AP = CBR_AP.melt('Region')
# CBR_AP ["Burden sharing regime"] = 'AP'

# CBR_GDR = CBR_GDR.melt('Region')
# CBR_GDR ["Burden sharing regime"] = 'GDR'

# frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames)
218/29:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_GF = CBR_GF.melt('Region')

CBR_GF
# CBR_IEPC = CBR_IEPC.melt('Region')
# CBR_IEPC ["Burden sharing regime"] = 'IEPC'

# CBR_PCC = CBR_PCC.melt('Region')
# CBR_PCC ["Burden sharing regime"] = 'PCC'

# CBR_AP = CBR_AP.melt('Region')
# CBR_AP ["Burden sharing regime"] = 'AP'

# CBR_GDR = CBR_GDR.melt('Region')
# CBR_GDR ["Burden sharing regime"] = 'GDR'

# frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames)
218/30:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
218/31:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_GF = CBR_GF.melt('Region')
# CBR_IEPC = CBR_IEPC.melt('Region')
# CBR_IEPC ["Burden sharing regime"] = 'IEPC'

# CBR_PCC = CBR_PCC.melt('Region')
# CBR_PCC ["Burden sharing regime"] = 'PCC'

# CBR_AP = CBR_AP.melt('Region')
# CBR_AP ["Burden sharing regime"] = 'AP'

# CBR_GDR = CBR_GDR.melt('Region')
# CBR_GDR ["Burden sharing regime"] = 'GDR'

# frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames)
218/32: CBR_GF
218/33:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GF
218/34:

CBR_GF = CBR_GF.melt('Region')
CBR_GF ["Burden sharing regime"] = 'GF'
# CBR_IEPC = CBR_IEPC.melt('Region')
# CBR_IEPC ["Burden sharing regime"] = 'IEPC'

# CBR_PCC = CBR_PCC.melt('Region')
# CBR_PCC ["Burden sharing regime"] = 'PCC'

# CBR_AP = CBR_AP.melt('Region')
# CBR_AP ["Burden sharing regime"] = 'AP'

# CBR_GDR = CBR_GDR.melt('Region')
# CBR_GDR ["Burden sharing regime"] = 'GDR'

# frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames)
218/35: CBR_GF
218/36:

#CBR_GF = CBR_GF.melt('Region')
CBR_GF ["Burden sharing regime"] = 'GF'
# CBR_IEPC = CBR_IEPC.melt('Region')
# CBR_IEPC ["Burden sharing regime"] = 'IEPC'

# CBR_PCC = CBR_PCC.melt('Region')
# CBR_PCC ["Burden sharing regime"] = 'PCC'

# CBR_AP = CBR_AP.melt('Region')
# CBR_AP ["Burden sharing regime"] = 'AP'

# CBR_GDR = CBR_GDR.melt('Region')
# CBR_GDR ["Burden sharing regime"] = 'GDR'

# frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames)
218/37: CBR_GF
218/38:

CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'

frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames)
218/39:

CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'

frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames)
CBRs
218/40:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
220/1:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
220/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
220/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
CBR_GDR
220/4:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'

frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
CBRs = pd.concat(frames)
CBRs
220/5:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       colour = 'Burden sharing regime'
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
220/6:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       colour = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
220/7:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
220/8:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/9:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/10: CBR_mit
220/11: CBR_mit = CBR_mit.drop(['Unnamed: 0'])
220/12: CBR_mit = CBR_mit.drop(['Unnamed: 0 '])
220/13: CBR_mit = CBR_mit.drop('Unnamed: 0 ')
220/14: CBR_mit = CBR_mit.drop('Unnamed: 0')
220/15: CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
220/16:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit
220/17:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/18:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing" = 'none']
220/19:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/20:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
220/21:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
220/22:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
220/23:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/24:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
220/25:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
220/26:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
219/3:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
219/4:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_AP
219/5:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
219/6:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
217/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
217/9:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
217/10:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
regional_allowance_GDR
217/11:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
217/12:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs - MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR

GDR_mitigationcosts
217/13:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR

GDR_mitigationcosts
217/14: TMC/GER
217/15:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR

GDR_mitigationcosts
220/27:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/28:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
220/29:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
220/30:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
220/31:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
225/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
225/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
225/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
225/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
225/5:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
224/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

global_emissions
224/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
224/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
224/4:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
224/5:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
214/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
214/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')
GF2020

global_emissions
#check if this was the right way
214/3:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')


#check if this was the right way
214/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
214/5:
#new mitigation costs

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
213/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
217/16:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
226/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
226/2:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
226/3:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
226/4:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
regional_allowance_GDR
226/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
226/6:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR

GDR_mitigationcosts
227/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
227/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
227/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
227/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
227/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")
CBR_AP
228/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
228/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')


#check if this was the right way
228/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
228/4:
#new mitigation costs

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
224/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
229/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
229/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
229/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
229/4:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
225/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
225/7:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
230/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
230/2:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
230/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
230/4:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
231/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
231/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
231/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
231/4:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
231/5:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
231/6:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
219/7:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
232/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
232/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_AP
232/3:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
232/4:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
232/5:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)

MCGs
232/6:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_AP
232/7:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)

MCGs
232/8:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
222/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
222/2:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
222/3:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs = MCGs.reset_index()
MCGs
222/4:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'IEPC','PCC', 'AP', 'GDR'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
211/1:
# CBR plot 

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
211/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
211/3:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
211/4:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
211/5:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined
222/5:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
231/7:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
228/5:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.to_frame().reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF.csv")

CBR_GF_2150
228/6:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages
# # avoided_damages


# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# GF_NPV= npv(GF_mitigationcosts)
# AD = npv(avoided_damages)

# ## CBR 
# CBR_GF_2150 = AD/GF_NPV
# CBR_GF_2150= CBR_GF.to_frame().reset_index()
# CBR_GF_2150.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_GF_2150.columns = ['Region','CBR']

# CBR_GF_2150.to_csv("output\CBR_GF.csv")

# CBR_GF_2150
228/7:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages
# # avoided_damages


# #NPV 

# discount_rate= 0.03 

# def npv(dataframe):
#     NPV_values=pd.Series({
#         region: npf.npv(discount_rate, row)
#         for region, row in dataframe.iterrows()
#     })
#     return NPV_values


# GF_NPV= npv(GF_mitigationcosts)
# AD = npv(avoided_damages)

# ## CBR 
# CBR_GF_2150 = AD/GF_NPV
# CBR_GF_2150= CBR_GF.to_frame().reset_index()
# CBR_GF_2150.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_GF_2150.columns = ['Region','CBR']

# CBR_GF_2150.to_csv("output\CBR_GF.csv")

# CBR_GF_2150
228/8:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.to_frame().reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF.csv")

CBR_GF_2150
228/9:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")
228/10:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.to_frame().reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
228/11:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
# CBR_GF_2150= CBR_GF.to_frame().reset_index()
# CBR_GF_2150.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_GF_2150.columns = ['Region','CBR']

# CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
228/12:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
# CBR_GF_2150= CBR_GF.to_frame().reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
228/13:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.to_frame().reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
228/14:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
228/15:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150
# CBR_GF_2150.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_GF_2150.columns = ['Region','CBR']

# CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

# CBR_GF_2150
228/16:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")

CBR_GF
228/17:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150 = CBR_GF_2150.drop(columns = 'index')
# CBR_GF_2150.rename(columns = {'index':'Region'},
#           inplace = True )
# CBR_GF_2150.columns = ['Region','CBR']

# CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
228/18:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150 = CBR_GF_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
226/7:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GF_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150 =CBR_GDR_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
226/8:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150 =CBR_GDR_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
226/9:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150 =CBR_GDR_2150.drop(columns = 'index')

CBR_GDR_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GDR_2150
226/10:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
# CBR_GDR_2150= CBR_GDR_2150.reset_index()
# CBR_GDR_2150 =CBR_GDR_2150.drop(columns = 'index')

# CBR_GDR_2150.to_csv("output\CBR_GF_2150.csv")

# CBR_GDR_2150
226/11:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
# CBR_GDR_2150= CBR_GDR_2150.reset_index()
# CBR_GDR_2150 =CBR_GDR_2150.drop(columns = 'index')

# CBR_GDR_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GDR_2150
226/12:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
# CBR_GDR_2150 =CBR_GDR_2150.drop(columns = 'index')

# CBR_GDR_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GDR_2150
226/13:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

# CBR_GDR_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GDR_2150
226/14:
#new mitigation costs 2100

#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GDR_2150
230/5:
# #new mitigation costs 2150 

# GDR_mitigationcosts_= mitigation_costs + MCG 
# GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC = npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/GDR_NPV
CBR_IEPC_2150= CBR_GDR_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_GF_2150.csv")

CBR_IEPC_2150
230/6:
# #new mitigation costs 2150 

# GDR_mitigationcosts_= mitigation_costs + MCG 
# GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC = npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_GF_2150.csv")

CBR_IEPC_2150
226/15:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
230/7:
# #new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
# GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC = npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_GF_2150.csv")

CBR_IEPC_2150
230/8:
# #new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
# GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_GF_2150.csv")

CBR_IEPC_2150
229/5:
# #new mitigation costs 2150 

PCC_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_PCC_2150 = AD/PCC_NPV
CBR_PCC_2150= CBR_PCC_2150.reset_index()
CBR_PCC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC_2150.columns = ['Region','CBR']

CBR_PCC_2150.to_csv("output\CBR_GF_2150.csv")

CBR_PCC_2150
226/16:
#new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GDR_2150.csv")

CBR_GDR_2150
230/9:
# #new mitigation costs 2150 

GDR_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_IEPC_2150.csv")

CBR_IEPC_2150
229/6:
# #new mitigation costs 2150 

PCC_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_PCC_2150 = AD/PCC_NPV
CBR_PCC_2150= CBR_PCC_2150.reset_index()
CBR_PCC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC_2150.columns = ['Region','CBR']

CBR_PCC_2150.to_csv("output\CBR_PCC_2150.csv")

CBR_PCC_2150
227/6:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

CBR_AP_2150
231/8:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')
231/9:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')

CBR_AP_2150
231/10:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')

CBR_GF_2150
231/11:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')

CBR_IEPC_2150
231/12:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"
231/13:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit_2150]
CBRs_2150 = pd.concat(frames)
CBRs_2150
231/14:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
231/15:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/16:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0 '], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/17:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/18:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/19:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/20:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/21:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
231/22:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/23:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "GF"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "GF"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "GF"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GF"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_IEPC_2150
231/24:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
231/25:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GDR_2150
231/26:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_mit
231/27:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv')
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv')
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv')
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

CBR_GF_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_GF_2150
231/28:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBR_AP
231/29:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
231/30:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
231/31:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
231/32:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_AP_2150
231/33:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_AP_2150
231/34:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
231/35:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1)#.drop(['Unnamed: 0'], axis =1)melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GF_2150
231/36:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).drop(['variable'], axis =1)melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
231/37:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).drop(['variable'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
231/38:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
233/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
233/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
233/3:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
233/4:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
233/5:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
233/6:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
233/7:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_IEPC_2150
233/8:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_PCC_2150
233/9:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_AP_2150
233/10:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
233/11:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
CBR_mit
233/12:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'

# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GDR_2150
233/13:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = ÇBR
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
233/14:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = 'ÇBR'
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
233/15:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = 'CBR'
#CBR_mit.rename(columns = { })
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GF_2150
233/16:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = 'CBR'
#CBR_mit.rename(columns = { })
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
233/17:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' = 'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
233/18:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
233/19:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
CBR_GF_2150
233/20:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
CBR_GF_2150
233/21:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit
#CBR_GF_2150
233/22:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,1,3,2]]
#CBR_GF_2150
233/23:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,1,3,2]]
CBR_GF_2150
233/24:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,1,3,2]]
#CBR_GF_2150
233/25:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,1,3,2]]
CBR_GF_2150
233/26:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,1,3,2]]
#CBR_GF_2150
233/27:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,3,1,2]]
#CBR_GF_2150
233/28:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_mit.iloc[:,[0,3,1,2]]
CBR_GF_2150
233/29:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]


frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
233/30:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
235/1:
## Variables needed
# regional gdp, global gdp (to calculate), global baseline emission, regional baseline emissions, global emissions,
235/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
235/3:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

CBR_mit
233/31:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]


frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150

CBR_mit
233/32:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]

CBR_GF_2150.reindex(index= CBRmit)


frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150

CBR_GF_2150
233/33:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]

CBR_GF_2150.reindex(index= CBR_mit)


frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150

CBR_GF_2150
233/34:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).reindex(index = Image_region).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"
#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150

CBR_GF_2150
233/35:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).reindex(index = Image_region).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"

CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GF_2150
233/36:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"

CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GF_2150
233/37:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"

CBR_GF_2150 = CBR_GF_2150.join(Image_region)
#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

CBR_GF_2150
237/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
237/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
237/3:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
237/4:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
237/5:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
237/6:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"

CBR_GF_2150 = CBR_GF_2150.join(Image_region)
#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

Image_region
237/7:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GF_2150["Burden sharing"] = "GF"

CBR_GF_2150 = CBR_GF_2150.join(Image_region)
#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

Image_region
CBR_GF_2150
237/8:
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
#CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
#CBR_GF_2150["Burden sharing"] = "GF"


#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

Image_region
CBR_GF_2150
238/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
238/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})



# CBR_GF["Burden sharing"] = "GF"
# CBR_IEPC = pd.read_csv('CBR_IEPC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC ["Burden sharing"] = "GF"
# CBR_PCC = pd.read_csv('CBR_PCC.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC ["Burden sharing"] = "GF"
# CBR_AP = pd.read_csv('CBR_AP.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP ["Burden sharing"] = "GF"
# CBR_GDR = pd.read_csv('CBR_GDR.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR ["Burden sharing"] = "GF"

# frames= [ CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR]
# CBRs = pd.concat(frames, axis =0)
238/3:
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
#CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
#CBR_GF_2150["Burden sharing"] = "GF"


#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_PCC_2150 ["Burden sharing"] = "PCC"
CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_AP_2150 ["Burden sharing"] = "AP"
CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
CBR_mit['variable'] = 'CBR'
CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150

Image_region
CBR_GF_2150
238/4:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv')#.drop(['Unnamed: 0'], axis =1)
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
#CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
#CBR_GF_2150["Burden sharing"] = "GF"


#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150


CBR_GF_2150
238/5:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
#CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
#CBR_GF_2150["Burden sharing"] = "GF"


#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150


CBR_GF_2150
238/6:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
#CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
#CBR_GF_2150["Burden sharing"] = "GF"


#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150


CBR_GF_2150
238/7:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



# frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
# CBRs_2150 = pd.concat(frames)
# CBRs_2150


CBR_GF_2150
238/8:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GF"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
238/9:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GF"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150,]
CBRs_2150 = pd.concat(frames)
CBRs_2150
238/10:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150,]
CBRs_2150 = pd.concat(frames)
CBRs_2150
238/11:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

# CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
# CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
# CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150,]
CBRs_2150 = pd.concat(frames)
CBR_mit
238/12:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150,]
CBRs_2150 = pd.concat(frames)
CBR_mit
238/13:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBR_mit
238/14:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
238/15:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

#CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

#CBR_GF_2150 = CBR_GF_2150.drop(['variable'])
# CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_IEPC_2150 ["Burden sharing"] = "IEPC"
# CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_PCC_2150 ["Burden sharing"] = "PCC"
# CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_AP_2150 ["Burden sharing"] = "AP"
# CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).melt("Region")
# CBR_GDR_2150 ["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'
# CBR_mit['variable'] = 'CBR'
# CBR_mit.rename(columns = { 'CBR' :'value' }, inplace =True )
# CBR_mit.iloc[:,[0,3,1,2]]



frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
238/16:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
238/17:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
241/1:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
241/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
241/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
241/4:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
241/5:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
241/6:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs
241/7:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
241/8:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
241/9:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
241/10:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2150',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
247/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
247/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')


#check if this was the right way
247/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
247/4:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")

CBR_GF
247/5:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150 = CBR_GF_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
249/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
249/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')


#check if this was the right way
249/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
249/4:
#new mitigation costs 2150 

GF_mitigationcosts_2150 = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150 = CBR_GF_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
249/5:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF.reset_index()
CBR_GF_2150 = CBR_GF_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
249/6:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF_2150.reset_index()
CBR_GF_2150 = CBR_GF_2150.drop(columns = 'index')

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
248/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
248/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
248/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
248/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
248/5:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")
248/6:
# #new mitigation costs 2150 

AP_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")
248/7:
# #new mitigation costs 2150 

AP_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")
CBR_AP_2150
250/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
250/2:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
250/3:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
250/4:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
regional_allowance_GDR
250/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
250/6:
#new mitigation costs 2150 

GDR_mitigationcosts= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GDR_2150.csv")

CBR_GDR_2150
250/7:
#new mitigation costs 2150 

GDR_mitigationcosts= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GDR_2150.csv")

CBR_GDR_2150
250/8:
#new mitigation costs 2150 

GDR_mitigationcosts= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GDR_2150.csv")

CBR_GDR_2150
250/9:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
252/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
252/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
252/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
252/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
252/5:
# #new mitigation costs 2150 

IPC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_IEPC_2150.csv")

CBR_IEPC_2150
252/6:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
251/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
251/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
251/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
251/4:
# #new mitigation costs 2150 

PCC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_PCC_2150 = AD/PCC_NPV
CBR_PCC_2150= CBR_PCC_2150.reset_index()
CBR_PCC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC_2150.columns = ['Region','CBR']

CBR_PCC_2150.to_csv("output\CBR_PCC_2150.csv")

CBR_PCC_2150
251/5:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
252/7:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
241/11:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
241/12:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
241/13:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
241/14:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
241/15:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
241/16:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
241/17:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
249/7:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF_2150.reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
241/18:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
241/19:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2150',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
253/1:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
253/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
253/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
253/4:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
253/5:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
253/6:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
253/7:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
253/8:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150
253/9:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2150',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
253/10:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150.to_csv('CBRs_2150')
253/11:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
253/12:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150.to_csv('CBRs_2150.csv')
254/1:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
CBRs
254/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
254/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
254/4:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
254/5:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
254/6:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
257/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
257/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
257/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
257/4:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
257/5:
# #new mitigation costs 2150 

PCC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_PCC_2150 = AD/PCC_NPV
CBR_PCC_2150= CBR_PCC_2150.reset_index()
CBR_PCC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC_2150.columns = ['Region','CBR']

CBR_PCC_2150.to_csv("output\CBR_PCC_2150.csv")

CBR_PCC_2150
258/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
258/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
258/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
258/4:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
258/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
258/6:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
258/7:
# #new mitigation costs 2150 

IPC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_IEPC_2150.csv")

CBR_IEPC_2150
254/7:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
254/8:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
254/9:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
254/10:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
254/11:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150.to_csv('CBRs_2150.csv')
254/12:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2150',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
260/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )

al_mit
260/2:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "ATP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_mit = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit ["Burden sharing"] = "none"
260/3:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
260/4:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
260/5:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
260/6:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100,
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
260/7:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
260/8:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
260/9:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
260/10:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1
260/11:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
# al_PCC_re = al_PCC.reset_index().melt("Region")
# al_PCC_re ["Burden sharing"] = "PCC"
# al_IEPC_re= al_IEPC.reset_index().melt("Region")
# al_IEPC_re ["Burden sharing"] = "IEPC"
# al_ATP_re = al_ATP.reset_index().melt("Region")
# al_ATP_re ["Burden sharing"] = "AP"
# al_GDR_re = al_GDR.reset_index().melt("Region")
# al_GDR_re ["Burden sharing"] = "GDR"

# al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_GF_re
260/12:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
# al_IEPC_re= al_IEPC.reset_index().melt("Region")
# al_IEPC_re ["Burden sharing"] = "IEPC"
# al_ATP_re = al_ATP.reset_index().melt("Region")
# al_ATP_re ["Burden sharing"] = "AP"
# al_GDR_re = al_GDR.reset_index().melt("Region")
# al_GDR_re ["Burden sharing"] = "GDR"

# al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_GF_re
260/13:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
# al_ATP_re = al_ATP.reset_index().melt("Region")
# al_ATP_re ["Burden sharing"] = "AP"
# al_GDR_re = al_GDR.reset_index().melt("Region")
# al_GDR_re ["Burden sharing"] = "GDR"

# al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_GF_re
260/14:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
# al_GDR_re = al_GDR.reset_index().melt("Region")
# al_GDR_re ["Burden sharing"] = "GDR"

# al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_GF_re
260/15:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

# al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_GF_re
260/16:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_GF_re
260/17:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

# al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_mit_re
260/18:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index()#.melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_mit_re
260/19:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )

al_mit
260/20:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index()#.melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_mit_re
260/21:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
# al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_mit_re
260/22:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

# frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
# regional_allowances = pd.concat(frames_re, axis = 0)

# regional_allowances = regional_allowances[regional_allowances.variable < '2101']

# fig1 = px.line(
#     regional_allowances,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Allowances per burden sharing regime for 2020-2100',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=900
    
# )
# fig1

al_mit_re
260/23:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1

al_mit_re
260/24:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
260/25:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline_emissions.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )

al_atp
260/26:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )

al_atp
260/27:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
260/28:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re, al_BAU]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
260/29:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
260/30:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re, al_BAU]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
260/31:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
260/32:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ mititgation_baseline).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
260/33:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ mitigation_baseline).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
260/34:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
260/35:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
260/36:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
260/37:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re, al_BAU]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
260/38:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
260/39:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
261/2:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re, al_BAU]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
261/3:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
261/4:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/5:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"

al_mit_pc
261/6:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"

al_BAU_pc
261/7:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/8:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tones per capita',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
261/9:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
261/10:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re, al_BAU]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
261/11:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
261/12:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/13:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
#per_capita_allowance
261/14:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/15:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/16:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc, al_BAU_pc]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/17:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
261/18:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
261/19:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2

#gdp per capita
261/20:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re, al_BAU]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
261/21:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
262/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
262/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
262/3:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)

MCGs
262/4:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2100',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
262/5:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2100',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
262/6:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
262/7:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
262/8:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
259/1:

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
259/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigaztion.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
259/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
259/4:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
259/5:

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
259/6:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
259/7:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP).set_index('Region')

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
259/8:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

mitigation_costs
259/9:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

mitigation_costs
259/10:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime until 2100'
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
259/11:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime until 2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
259/12:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
259/13:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
#damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig2
259/14:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined.update_layout(
    title="CO2 emissions by climate category"
)
259/15:
fig_combined = go.Figure(data=fig.data + fig2.data, layout=fig.layout)
fig_combined.update_layout(
    title="BSR mitigation costs compared with the avoided damages and damage costs of the baseline (BAU) scenario "
)
259/16:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)

# costs_GF_pc = costs_GF/mitigation_population
# costs_IEPC_pc = costs_IEPC/mitigation_population
# costs_PCC_pc = costs_PCC/mitigation_population
# costs_AP_pc = costs_AP/mitigation_population
# costs_GDR_pc = costs_GDR/mitigation_population


costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
259/17:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
259/18:
#plot avoided damages 
avoided_damages_perc ['Costs'] = 'Avoided damages'
damage_costs_baseline_perc ['Costs'] = 'Baseline'
damage_costs_mitigation_perc ['Costs'] = 'Mitigation'
damages = [ avoided_damages_perc, damage_costs_baseline_perc, damage_costs_mitigation_perc]
damages = pd.concat(damages, axis= 0)
#damages = damages[damages.variable < '2101']

fig2 = px.line(
    damages,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Costs",
    color_discrete_sequence= px.colors.qualitative.Pastel, 
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
259/19:
#sum of costs 

sum_costs_GF
sum_costs_GF
sum_costs_GF
sum_costs_GF
259/20:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1)
sum_costs_IEPC = costs_IEPC(axis=1)
sum_costs_PCC = costs_PCC(axis=1)
sum_costs_AP = costs_AP(axis=1)
sum_costs_GDR = costs_GDR(axis=1)
sum_mitigation_costs = mitigation_costs(axis= 1 )


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/21:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1)
sum_costs_IEPC = costs_IEPC.sum(axis=1)
sum_costs_PCC = costs_PCC.sum(axis=1)
sum_costs_AP = costs_AP.sum(axis=1)
sum_costs_GDR = costs_GDR.sum(axis=1)
sum_mitigation_costs = mitigation_costs.sum(axis= 1 )


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/22:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 )
sum_costs_mit ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/23:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 )
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/24:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 )
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/25:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame()
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 )
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/26:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame()
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame()
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame()
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_IEPC
259/27:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().melt('Region')
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().melt('Region')
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().melt('Region')
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().melt('Region')
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().melt('Region')
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().melt('Region')
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_IEPC
259/28:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region')
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_IEPC
259/29:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region')
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region')
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/30:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP,, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)
259/31:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)
259/32:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
# fig0 = px.scatter(
#     sums, 
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )
# fig0
259/33:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_mitigation_costs
259/34:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GDR
259/35:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/36:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_PCC
259/37:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_IEPC
259/38:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_mitigation_costs
259/39:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
fig0 = px.scatter(
    sums, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
259/40:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
# fig0 = px.scatter(
#     sums, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
254/13: CBRs = CBRs.loc [( CBRs[])]
259/41:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
259/42:
#sum of costs 

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
259/43:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = sum_costs_GF[sum_costs_GF.]
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_AP
259/44:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = sum_costs_GF[sum_costs_GF.]
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_AP
259/45:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[sum_costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/46:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
259/47:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
259/48:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
264/1:

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
264/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
264/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
265/1:

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
265/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
265/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
265/4:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
265/5:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF|
265/6:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
266/1:

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
266/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
266/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.value<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
266/4:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
266/5:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_IEPC
266/6:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_IEPC
266/7:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
#sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

#sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_IEPC
267/1:

import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
267/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"

avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_IEPC
267/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
267/4:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
267/5:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
267/6:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

costs_GF
267/7:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')

sum_costs_GF
268/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
268/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"



mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"
268/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"



mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"
268/4:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"
268/5:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"
268/6:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
268/7:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
268/8:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
268/9:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
268/10:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
268/11:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
268/12:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
274/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"



mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"
274/3:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/4:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

costs_GF


# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"
274/5:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

costs_GF


# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"
274/6:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/7:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable') 
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/8:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/9:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region')#.drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/10:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/11:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
#sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


# AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
# AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
# AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 



# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable< '2101']
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"

sum_costs_GF
274/12:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
274/13:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
274/14:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().lt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')


# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

costs_IEPC
274/15:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')


# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

costs_IEPC
274/16:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
274/17:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_costs_AP
274/18:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF
274/19:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
274/20:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GF
274/21:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR
274/22:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
274/23:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR
276/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
276/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')


# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"

costs_IEPC
276/3:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
276/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR
276/5:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR
276/6:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
276/7:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).drop(columns = ['index'], axis =1)

sum_costs_GDR
276/8:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
276/9:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR
276/10:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
276/11:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
276/12:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
276/13:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
276/14:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_IEPC, sum_costs_AP, sum_costs_GDR, sum_mitig]
276/15:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_IEPC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums
276/16:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_IEPC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums.to_frame()
276/17:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_IEPC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
276/18:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_IEPC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
276/19:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
276/20:
#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
276/21:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
276/22:
#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
276/23:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
267/8:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"




avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
267/9:
#sum of costs until 2150

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
267/10:
#sum of costs until 2150

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF

# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
267/11:
#sum of costs until 2150

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF

# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
267/12:
#sum of costs until 2150

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF

# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
267/13: %history
267/14: %history -g
267/15: %history
267/16:
#sum of costs until 2150

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
#sum_costs_GF = costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF

# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
267/17:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"



avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/18:
#sum of costs until 2150

#sum over rows 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
#sum_costs_GF = costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
267/19:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


#melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs ["Burden sharing"] = "none"



avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/20:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = sum_costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# # mitigation_costs = mitigation_costs.reset_index().melt('Region')
# # mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/21:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1)#.to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# # mitigation_costs = mitigation_costs.reset_index().melt('Region')
# # mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/22:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# # mitigation_costs = mitigation_costs.reset_index().melt('Region')
# # mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/23:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"
# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# # mitigation_costs = mitigation_costs.reset_index().melt('Region')
# # mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/24:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_GF ["Burden sharing"] = "GF"
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_IEPC ["Burden sharing"] = "IEPC"
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_PCC["Burden sharing"] = "PCC"
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_AP ["Burden sharing"] = "AP"
# costs_GDR = costs_GDR.reset_index().melt('Region')
# costs_GDR ["Burden sharing"] = "GDR"

# # mitigation_costs = mitigation_costs.reset_index().melt('Region')
# # mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')


sum_costs_GF
267/25:
#sum of costs until 2150

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
267/26:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
272/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
272/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

#data CBRs
CBR_GF = pd.read_csv ('CBR_GF.csv')
CBR_AP = pd.read_csv ('CBR_AP.csv')
CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
CBR_PCC = pd.read_csv ('CBR_PCC.csv')
CBR_GDR = pd.read_csv ('CBR_GDR.csv')

#summed data
CBRs = pd.read_csv('CBRs_plot')
MCGs = pd.read_csv('MCGs_data')

#mitigation allowances 
al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_AP = al_ATP.melt('Region')
al_AP ["Burden sharing"] = "AP"

al_PCC = al_PCC.melt('Region')
al_PCC["Burden sharing"] = "PCC"

al_GDR = al_GDR.melt('Region')
al_GDR ["Burden sharing"] = "GDR"

al_GF = al_GF.melt('Region')
al_GF ["Burden sharing"] = "GF"

al_IEPC = al_IEPC.melt('Region')
al_IEPC ["Burden sharing"] = "IEPC"

frames = [ al_GF, al_PCC, al_IEPC, al_AP, al_GDR ]
allowances= pd.concat(frames, axis =0 )

allowances= allowances[allowances.variable < '2101']

fig2 = px.line(
    allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)

fig2.update_layout(
    title = "Regional allowance per capita per burden sharing over time"
)
269/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
269/2:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
269/3:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"

al_BAU_pc
269/4:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
per_capita_allowance
269/5:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
269/6:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU')| (regional_allowances['Region'] == 'CAN') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig3
269/7:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU')| (regional_allowances['Region'] == 'CAN') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)
fig3
269/8:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU')| (regional_allowances['Region'] == 'CAN') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=300
    
)
fig3
269/9:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
269/10:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU')| (regional_allowances['Region'] == 'CAN') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=30
    
)
fig3
269/11:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU')| (regional_allowances['Region'] == 'CAN') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=300
    
)
fig3
269/12:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU')| (regional_allowances['Region'] == 'CAN') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig3
269/13:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CEU') | (regional_allowances [ 'Region'] == 'WEU') | (regional_allowances [ 'Region'] == 'USA')| (regional_allowances['Region'] == 'JAP')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig3
269/14:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig3
269/15:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
269/16:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig3
269/17:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",

fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/18:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/19:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/20:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
269/21:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/22:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/23:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') | (regional_allowances['Region'] == 'JAP') | (regional_allowances['Region'] == 'WEU') |  (regional_allowances['Region'] == 'CEU')


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/24:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') | (regional_allowances['Region'] == 'JAP') | (regional_allowances['Region'] == 'WEU') |  (regional_allowances['Region'] == 'CEU')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/25:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') | (regional_allowances['Region'] == 'JAP') | (regional_allowances['Region'] == 'WEU') |  (regional_allowances['Region'] == 'CEU')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/26: %history
269/27:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'RUS') | (regional_allowances['Region'] == 'SAF') | (regional_allowances['Region'] == 'INDIA') |  (regional_allowances['Region'] == 'CHN') |  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/28:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RSAF') 
                                | (regional_allowances['Region'] == 'WAF')] 
                                #|  (regional_allowances['Region'] == 'CHN') 
                                #|  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
269/29:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RSAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                |  (regional_allowances['Region'] == 'NAF')] 
                                #|  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
278/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
278/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
278/3:
global_mit_costs = costs_AP.sum(axis=0)
global_mit_costs
278/4:
# Che

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
278/5:
# Che

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)
278/6:
# Che

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

global_gdp
278/7:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
279/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/4:
# 

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

global_gdp
279/5:
# 

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

global_GF
279/6:
# here we have the sum of all 

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

global_gdp
279/7:
# here we have the sum of all 

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

global_mit
279/8:
# here we have the sum of all 

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

global_MIT
279/9:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0)
global_IEPC = costs_IEPC.sum(axis=0)
global_PCC = costs_PCC.sum(axis=0)
global_AP = costs_AP.sum(axis=0)
global_GDR = costs_AP.sum(axis=0)
global_MIT = costs_AP.sum(axis=0)
global_gdp = GDP.sum(axis= 0)

type(global_AP)
279/10:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_IEPC = costs_IEPC.sum(axis=0)to_frame()
global_PCC = costs_PCC.sum(axis=0)to_frame()
global_AP = costs_AP.sum(axis=0)to_frame()
global_GDR = costs_AP.sum(axis=0)to_frame()
global_MIT = costs_AP.sum(axis=0)to_frame()
global_gdp = GDP.sum(axis= 0)to_frame()
279/11:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_AP = costs_AP.sum(axis=0).to_frame()
global_GDR = costs_AP.sum(axis=0).to_frame()
global_MIT = costs_AP.sum(axis=0).to_frame()
global_gdp = GDP.sum(axis= 0).to_frame()
279/12:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

global_AP
279/13:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

global_IEPC
279/14:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs
279/15:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs.reset_index()
279/16:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs.reset_index(names = ['years'])
279/17:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs.reset_index().rename(columns={"index":'years'})
279/18:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= '0',
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0
279/19:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= '0',
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0
279/20:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0
279/21:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
279/22:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= mitigation_costs/GDP)



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/23:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP#*100
mitigation_costs= mitigation_costs/GDP



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/24:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_GF = costs_GF.sum(axis=0).to_frame()
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()
global_MIT ['Burden sharing'] = 'none'
global_gdp = GDP.sum(axis= 0).to_frame()

frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
279/25:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_gdp = GDP.sum(axis= 0).to_frame()
global_GF = costs_GF.sum(axis=0).to_frame()/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()/global_gdp
global_MIT ['Burden sharing'] = 'none'


# frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
# global_costs = pd.concat(frames, axis =0)
# global_costs =global_costs.reset_index().rename(columns={"index":'years'})

# fig0 = px.scatter(
#     global_costs, 
#     x='years',
#     y= 0,
#     color="Burden sharing",
#     title = ' global mitigation costs per burden sharing regime 2020-2150',
    
# )

# fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
279/26:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_gdp = GDP.sum(axis= 0).to_frame()
global_GF = costs_GF.sum(axis=0).to_frame()/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
279/27:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP



# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/28:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp

global_gdp = GDP.sum(axis= 0).to_frame()
global_GF = costs_GF.sum(axis=0).to_frame()/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
279/29:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame()

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/30:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame()

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/31:
gdp_df = pd.DataFrame({

    year: global_gdp 

    for year in global_gdp.index

})

gdp_df
279/32:
gdp_df = pd.DataFrame({

    0 : global_gdp 

    for year in global_gdp.index

})

gdp_df
279/33:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().set_name('years')


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/34:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().Index.set_names('years')


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/35:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().set_names('years')


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/36:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index()#.rename(columns = {''})


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/37:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years'})


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/38:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years'})
global_gdp = global_gdp.set_index('years')

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/39:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/40:
gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for year in global_gdp.index

})

gdp_df
279/41:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years').squeeze()

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs

global_gdp
279/42:
gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for year in global_gdp.index

})

gdp_df
279/43:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years').squeeze()

# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/44:
gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for year in global_gdp.index

})

gdp_df
279/45:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP

global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()

global_gdp
# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
279/46:
gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for years in global_gdp.index

})

gdp_df
279/47:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for years in global_gdp.index

})

gdp_df
279/48:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for years in global_GF.index

})

gdp_df
279/49:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
282/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
282/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
282/3:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp
global_GF = costs_GF.sum(axis=0).to_frame()/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
282/4:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp
global_GF = costs_GF.sum(axis=0).to_frame()#/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()#/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()#/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
282/5:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    GDP : global_gdp 

    for years in global_GF.index

})

gdp_df
282/6:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    years : global_gdp 

    for years in global_GF.index

})

gdp_df
282/7:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    years : global_gdp 

    for years in global_GF.index

})
282/8:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df
282/9:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

GF_per_glo
282/10:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    years : global_gdp 

    for years in global_GF.index

})

gdp_df
282/11:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    years : global_gdp 

    for Region in global_GF.index

})

gdp_df
282/12:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    years : global_gdp 

    for region in costs_GF.index

})

gdp_df
282/13:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df
282/14:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df.pivot()
282/15:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df.tranpose()
282/16:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df.transpose()
282/17:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

GF_per_glo
282/18:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

costs_GF
GF_per_glo
282/19:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

costs_GF
#GF_per_glo
282/20:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'years': 'Region'})
282/21:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'years': 'Region'})
gdp_df
282/22:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
gdp_df.set_index
282/23:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
282/24:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
gdp_df
282/25:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
gdp_df = gdp_df.set_index("Region")
gdp_df
282/26:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
gdp_df = gdp_df.set_index("Region")
gdp_df
282/27:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
gdp_df = gdp_df.set_index('Region)
gdp_df
282/28:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
gdp_df = gdp_df.set_index('Region')
gdp_df
282/29:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
#gdp_df = gdp_df.set_index('Region')
gdp_df
282/30:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index ': 'Region'})
#gdp_df = gdp_df.set_index('Region')
gdp_df
283/1:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
283/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
283/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
283/4:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp
global_GF = costs_GF.sum(axis=0).to_frame()#/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()#/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()#/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
283/5:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index().rename({'index': 'Region'})
#gdp_df = gdp_df.set_index('Region')
gdp_df
283/6:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index()
gdp_df = gdp_df.rename({'index': 'Region'}) #gdp_df.set_index('Region')
gdp_df
283/7:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index()
gdp_df = gdp_df.rename({ 0: 'Region'}) #gdp_df.set_index('Region')
gdp_df
283/8:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index()
gdp_df = gdp_df.rename(columns ={'index': 'Region'}) #gdp_df.set_index('Region')
gdp_df
283/9:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index()
gdp_df = gdp_df.rename(columns ={'index': 'Region'}).set_index('Region')
gdp_df
283/10:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

costs_GF
#GF_per_glo
283/11:
GF_per_glo = costs_GF/gdp_df
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

GF_per_glo
#GF_per_glo
283/12:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
IEPC_per_glo = costs_IEPC/gdp_df
PCC_per_glo = costs_PCC/gdp_df
AP_per_glo = costs_AP/gdp_df
GDR_per_glo = costs_GDR/gdp_df
Mit_per_glo = mitigation_costs/gdp_df

GF_per_glo
283/13:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
GF_per_glo ['Burden sharing'] = 'GF'
IEPC_per_glo = costs_IEPC/gdp_df.reset_index().melt('Region')
IEPC_per_glo ['Burden sharing'] = 'IEPC'
PCC_per_glo = costs_PCC/gdp_df.reset_index().melt('Region')
PCC_per_glo ['Burden sharing'] = 'PCC'
AP_per_glo = costs_AP/gdp_df.reset_index().melt('Region')
AP_per_glo ['Burden sharing'] = 'AP'
GDR_per_glo = costs_GDR/gdp_df.reset_index().melt('Region')
GDR_per_glo ['Burden sharing'] = 'GDR'
Mit_per_glo = mitigation_costs/gdp_df.reset_index().melt('Region')
Mit_per_glo ['Burden sharing'] = 'none'

frames1 = [ GF_per_glo, IEPC_per_glo, PCC_per_glo, AP_per_glo, GDR_per_glo, Mit_per_glo]
data = pd.concat(frames1, axis = 0)

fig1 = px.scatter(
    data, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
fig1
283/14:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
GF_per_glo ['Burden sharing'] = 'GF'
IEPC_per_glo = costs_IEPC/gdp_df.reset_index().melt('Region')
IEPC_per_glo ['Burden sharing'] = 'IEPC'
PCC_per_glo = costs_PCC/gdp_df.reset_index().melt('Region')
PCC_per_glo ['Burden sharing'] = 'PCC'
AP_per_glo = costs_AP/gdp_df.reset_index().melt('Region')
AP_per_glo ['Burden sharing'] = 'AP'
GDR_per_glo = costs_GDR/gdp_df.reset_index().melt('Region')
GDR_per_glo ['Burden sharing'] = 'GDR'
Mit_per_glo = mitigation_costs/gdp_df.reset_index().melt('Region')
Mit_per_glo ['Burden sharing'] = 'none'

frames1 = [ GF_per_glo, IEPC_per_glo, PCC_per_glo, AP_per_glo, GDR_per_glo, Mit_per_glo]
data = pd.concat(frames1, axis = 0)

fig1 = px.scatter(
    data, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
data
283/15:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
GF_per_glo ['Burden sharing'] = 'GF'
IEPC_per_glo = (costs_IEPC/gdp_df).reset_index().melt('Region')
IEPC_per_glo ['Burden sharing'] = 'IEPC'
PCC_per_glo = (costs_PCC/gdp_df).reset_index().melt('Region')
PCC_per_glo ['Burden sharing'] = 'PCC'
AP_per_glo = (costs_AP/gdp_df).reset_index().melt('Region')
AP_per_glo ['Burden sharing'] = 'AP'
GDR_per_glo = (costs_GDR/gdp_df).reset_index().melt('Region')
GDR_per_glo ['Burden sharing'] = 'GDR'
Mit_per_glo = (mitigation_costs/gdp_df).reset_index().melt('Region')
Mit_per_glo ['Burden sharing'] = 'none'

frames1 = [ GF_per_glo, IEPC_per_glo, PCC_per_glo, AP_per_glo, GDR_per_glo, Mit_per_glo]
data = pd.concat(frames1, axis = 0)

fig1 = px.scatter(
    data, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
data
283/16:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
GF_per_glo ['Burden sharing'] = 'GF'
IEPC_per_glo = (costs_IEPC/gdp_df).reset_index().melt('Region')
IEPC_per_glo ['Burden sharing'] = 'IEPC'
PCC_per_glo = (costs_PCC/gdp_df).reset_index().melt('Region')
PCC_per_glo ['Burden sharing'] = 'PCC'
AP_per_glo = (costs_AP/gdp_df).reset_index().melt('Region')
AP_per_glo ['Burden sharing'] = 'AP'
GDR_per_glo = (costs_GDR/gdp_df).reset_index().melt('Region')
GDR_per_glo ['Burden sharing'] = 'GDR'
Mit_per_glo = (mitigation_costs/gdp_df).reset_index().melt('Region')
Mit_per_glo ['Burden sharing'] = 'none'

frames1 = [ GF_per_glo, IEPC_per_glo, PCC_per_glo, AP_per_glo, GDR_per_glo, Mit_per_glo]
data = pd.concat(frames1, axis = 0)

fig1 = px.scatter(
    data, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
fig1
283/17:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
GF_per_glo ['Burden sharing'] = 'GF'
IEPC_per_glo = (costs_IEPC/gdp_df).reset_index().melt('Region')
IEPC_per_glo ['Burden sharing'] = 'IEPC'
PCC_per_glo = (costs_PCC/gdp_df).reset_index().melt('Region')
PCC_per_glo ['Burden sharing'] = 'PCC'
AP_per_glo = (costs_AP/gdp_df).reset_index().melt('Region')
AP_per_glo ['Burden sharing'] = 'AP'
GDR_per_glo = (costs_GDR/gdp_df).reset_index().melt('Region')
GDR_per_glo ['Burden sharing'] = 'GDR'
Mit_per_glo = (mitigation_costs/gdp_df).reset_index().melt('Region')
Mit_per_glo ['Burden sharing'] = 'none'

frames1 = [ GF_per_glo, IEPC_per_glo, PCC_per_glo, AP_per_glo, GDR_per_glo, Mit_per_glo]
data = pd.concat(frames1, axis = 0)

fig1 = px.scatter(
    data, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' mitigation costs in % of global GDP per year  per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
fig1
284/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
284/2:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
284/3:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
284/4:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
284/5:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
284/6:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
284/7:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RSAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                |  (regional_allowances['Region'] == 'NAF')] 
                                #|  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
284/8:
Reg_of_inter=  per_capita[( per_capita_allowance['Region'] == 'SAF') 
                                | ( per_capita_allowance['Region'] == 'RSAF') 
                                | ( per_capita_allowances['Region'] == 'WAF') 
                                |  (per_capita_allowances['Region'] == 'NAF')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
284/9:
Reg_of_inter=  per_capita[( per_capita_allowance['Region'] == 'SAF') 
                                | ( per_capita_allowance['Region'] == 'RSAF') 
                                | ( per_capita_allowances['Region'] == 'WAF') 
                                |  (per_capita_allowances['Region'] == 'NAF')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]
    #|  (per_capita_allowances['Region'] == 'BRA')]




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
284/10:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
284/11:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
284/12:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
284/13:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
284/14:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
284/15:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
285/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
285/2:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
285/3:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RSAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                |  (regional_allowances['Region'] == 'NAF')] 
                                #|  (regional_allowances['Region'] == 'BRA')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
285/4:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CHN') 
                                | (regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'INDIA') 
                                |  (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RUS')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
286/2:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
286/3:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CHN') 
                                | (regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'INDIA') 
                                |  (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RUS')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/4:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
286/5:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CHN') 
                                | (regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'INDIA') 
                                |  (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RUS')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/6:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'CHN') 
                                | (regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'INDIA') 
                                |  (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RUS')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/7:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') 
                                | (regional_allowances['Region'] == 'WEU') 
                                | (regional_allowances['Region'] == 'CEU') 
                                |  (regional_allowances['Region'] == 'JAP')] 
                                #|  (regional_allowances['Region'] == 'RUS')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/8:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')] 
                                #|  (regional_allowances['Region'] == 'RUS')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/9:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
286/10:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
286/11:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
286/12:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'USA') 
                                | ( per_capita_allowance['Region'] == 'WEU') 
                                | ( per_capita_allowances['Region'] == 'CEU') 
                                |  (per_capita_allowances['Region'] == 'JAP')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
286/13:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'USA') 
                                | ( per_capita_allowance['Region'] == 'WEU') 
                                | ( per_capita_allowance['Region'] == 'CEU') 
                                |  (per_capita_allowance['Region'] == 'JAP')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2
286/14:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'USA') 
                                | ( per_capita_allowance['Region'] == 'WEU') 
                                | ( per_capita_allowance['Region'] == 'CEU') 
                                |  (per_capita_allowance['Region'] == 'JAP')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=500
    
)
fig2
286/15:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'USA') 
                                | ( per_capita_allowance['Region'] == 'WEU') 
                                | ( per_capita_allowance['Region'] == 'CEU') 
                                |  (per_capita_allowance['Region'] == 'JAP')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/16:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'USA') 
                                | ( per_capita_allowance['Region'] == 'WEU') 
                                | ( per_capita_allowance['Region'] == 'CEU') 
                                |  (per_capita_allowance['Region'] == 'JAP')] 
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/17:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'BRA') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                | ( per_capita_allowance['Region'] == 'RUS') 
                                |  (per_capita_allowance['Region'] == 'INDIA') 
                                |  (per_capita_allowances['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/18:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'BRA') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                | ( per_capita_allowance['Region'] == 'RUS') 
                                |  (per_capita_allowance['Region'] == 'INDIA') 
                                |  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/19:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RUS') 
                                |  (regional_allowances['Region'] == 'INDIA')
                                |  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/20:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
286/21:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RUS') 
                                |  (regional_allowances['Region'] == 'INDIA')
                                |  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/22:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'NAF') 
                                | ( per_capita_allowance['Region'] == 'WAF') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                |  (per_capita_allowance['Region'] == 'RSAF')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/23:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/24:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
286/25:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
286/26:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
286/27:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
286/28:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
286/29:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
286/30:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'NAF') 
                                | ( per_capita_allowance['Region'] == 'WAF') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                |  (per_capita_allowance['Region'] == 'RSAF')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/31:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'NAF') 
                                | ( per_capita_allowance['Region'] == 'WAF') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                |  (per_capita_allowance['Region'] == 'RSAF')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig2 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)
fig2
286/32:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
286/33:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2
286/34:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance.to_csv('per capita allowances.csv')

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
286/35:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
286/36:
# per capit sums over time to determine the total emissions per person until 2150 

# GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region")
# GF_al_pc ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region")
# GDR_al_pc ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region")
# ATP_al_pc ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1)#.reset_index().melt("Region")
#PCC_al_pc ["Burden sharing"] = "PCC"

# al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
# al_BAU_pc ["Burden sharing"] = 'BAU'


# al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc ["Burden sharing"] = "none"
PCC_al_pc_sum
286/37:
# per capit sums over time to determine the total emissions per person until 2150 

# GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region")
# GF_al_pc ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region")
# GDR_al_pc ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region")
# ATP_al_pc ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index().melt("Region")
#PCC_al_pc ["Burden sharing"] = "PCC"

# al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
# al_BAU_pc ["Burden sharing"] = 'BAU'


# al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc ["Burden sharing"] = "none"
PCC_al_pc_sum
286/38:
# per capit sums over time to determine the total emissions per person until 2150 

# GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region")
# GF_al_pc ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region")
# GDR_al_pc ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region")
# ATP_al_pc ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
#PCC_al_pc ["Burden sharing"] = "PCC"

# al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
# al_BAU_pc ["Burden sharing"] = 'BAU'


# al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc ["Burden sharing"] = "none"
PCC_al_pc_sum
286/39:
# per capit sums over time to determine the total emissions per person until 2150 

# GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region")
# GF_al_pc ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region")
# GDR_al_pc ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region")
# ATP_al_pc ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1)#.reset_index()#.melt("Region")
#PCC_al_pc ["Burden sharing"] = "PCC"

# al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
# al_BAU_pc ["Burden sharing"] = 'BAU'


# al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc ["Burden sharing"] = "none"
PCC_al_pc_sum
286/40:
# per capit sums over time to determine the total emissions per person until 2150 

# GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# GF_al_pc ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# GDR_al_pc ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# ATP_al_pc ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1)#.reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
# al_BAU_pc ["Burden sharing"] = 'BAU'


# al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc ["Burden sharing"] = "none"
PCC_al_pc_sum
286/41:
# per capit sums over time to determine the total emissions per person until 2150 

# GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# GF_al_pc ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# GDR_al_pc ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# ATP_al_pc ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1)#reset_index().melt("Region")
# IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
# al_BAU_pc ["Burden sharing"] = 'BAU'


# al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc ["Burden sharing"] = "none"
PCC_al_pc_sum
286/42:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1)reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1)reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1)reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1)reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

# CBRs_plot = px.scatter(CBRs, 
#                        x= 'Region',
#                        y= 'CBR', 
#                        color = 'Burden sharing regime',
#                        title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
#                       labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "CBR"
# )

# CBRs_plot
286/43:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

# CBRs_plot = px.scatter(CBRs, 
#                        x= 'Region',
#                        y= 'CBR', 
#                        color = 'Burden sharing regime',
#                        title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
#                       labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "CBR"
# )

# CBRs_plot
286/44:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= '0', 
                       color = 'Burden sharing',
                       title = 'sum of the mitigation costs per region',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "CBR"
# )

sums_plot
286/45:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the mitigation costs per region',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "CBR"
# )

sums_plot
286/46:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the mitigation costs per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

# CBRs_plot.update_yaxes(
#    title = "CBR"
# )

sums_plot
286/47:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the mitigation costs per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation costs in Trillion US Dollars"
)

sums_plot
286/48:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the mitigation costs per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation costs in Trillion US Dollars"
)

sums_plot
286/49:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation costs in Trillion US Dollars"
)

sums_plot
286/50:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population)
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/51:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population)
#GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/52:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).melt("Region") 
#GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/53:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
#GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/54:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/55:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/56:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum = GF_al_pc_sum .sum(axis=1).reset_index()#.melt("Region")
# GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation costs in Trillion US Dollars"
# )

# sums_plot
GF_al_pc_sum
286/57:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"
# GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum ["Burden sharing"] = "GDR"
# ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# ATP_al_pc_sum ["Burden sharing"] = "AP"
# IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
GF_al_pc_sum
286/58:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GF_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population)
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
GF_al_pc_sum
286/59:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GF_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population)
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
GDR_al_pc_sum
286/60:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population)
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
GDR_al_pc_sum
286/61:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
286/62:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population)
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
GDR_al_pc_sum
286/63:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
GDR_al_pc_sum
286/64:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
286/65:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
sums = pd.concat(sums)


sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',)

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

sums_plot.update_yaxes(
   title = "Total per capita emissions in GT/CO2"
)

sums_plot
286/66:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
sums = pd.concat(sums)


sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',)

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

sums_plot.update_yaxes(
   title = "Total per capita emissions in GT/CO2"
)

sums_plot
286/67:
# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')
GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum ["Burden sharing"] = "GF"

GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum["Burden sharing"] = "GF"

ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
ATP_al_pc_sum ["Burden sharing"] = "AP"


IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
sums = pd.concat(sums)


sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',)

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

sums_plot.update_yaxes(
   title = "Total per capita emissions in GT/CO2"
)

sums_plot
288/1:
#sum over rows 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
288/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
286/68:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')

GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
286/69:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')

GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
289/2:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')

GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/3:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable').droplevel('value')

GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/4:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable').droplevel('value', axis =1)

GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/5:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable')#.droplevel('value', axis =1)

# GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/6:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable').drop(columns = {'value'}, axis =1)

# GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/7:
# per capit sums over time to determine the total emissions per person until 2150 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

GF_al_pc_sum = (al_GF/mitigation_population).reset_index().melt("Region") 
GF_al_pc_sum = GF_al_pc_sum[GF_al_pc_sum.variable < '2101']
GF_al_pc_sum= GF_al_pc_sum.pivot(index='Region', columns='variable').drop(columns = {'value'}, axis =0)

# GF_al_pc_sum= GF_al_pc_sum.join(Image_region)
#GF_al_pc_sum = GF_al_pc_sum.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


# GF_al_pc_sum= GF_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GF_al_pc_sum ["Burden sharing"] = "GF"

# GDR_al_pc_sum = (al_GDR/mitigation_population).reset_index().melt("Region") 
# GDR_al_pc_sum = GDR_al_pc_sum[GDR_al_pc_sum.variable < '2101']
# GDR_al_pc_sum= GDR_al_pc_sum.pivot(index='Region', columns='variable')
# GDR_al_pc_sum= GDR_al_pc_sum.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# GDR_al_pc_sum["Burden sharing"] = "GF"

# ATP_al_pc_sum = (al_ATP/mitigation_population).reset_index().melt("Region") 
# ATP_al_pc_sum = ATP_al_pc_sum[ATP_al_pc_sum.variable< '2101']
# ATP_al_pc_sum =ATP_al_pc_sum.pivot(index='Region', columns='variable')
# ATP_al_pc_sum= ATP_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# ATP_al_pc_sum ["Burden sharing"] = "AP"


# IEPC_al_pc_sum = (al_IEPC/mitigation_population).reset_index().melt("Region")
# IEPC_al_pc_sum = IEPC_al_pc_sum[ IEPC_al_pc_sum.variable< '2101']
# IEPC_al_pc_sum = IEPC_al_pc_sum.pivot(index='Region', columns='variable')
# IEPC_al_pc_sum = IEPC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
                                
                                
# PCC_al_pc_sum = (al_PCC/mitigation_population).reset_index().melt("Region")
# PCC_al_pc_sum = PCC_al_pc_sum[ PCC_al_pc_sum.variable < '2101']  
# PCC_al_pc_sum = PCC_al_pc_sum.pivot(index='Region', columns='variable')
# PCC_al_pc_sum = PCC_al_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1)
# PCC_al_pc_sum ["Burden sharing"] = "PCC"

                            
# # al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# # al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = al_mit_pc_sum.sum(axis=1).reset_index().melt("Region").drop(['variable'], axis =1) 
# al_mit_pc_sum ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum]
# sums = pd.concat(sums)


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',)

# # # CBRs_plot.update_xaxes(
# # #    title = "Region"
# # # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot

GF_al_pc_sum
289/8: %history
289/9: %history -g
289/10:
# per capit sums over time to determine the total emissions per person until 2150 

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation costs in Trillion US Dollars"
)

sums_plot
                            
# al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum ["Burden sharing"] = 'BAU'


# al_mit_pc_sum = (al_mit/mitigation_population).reset_index().melt("Region")
# al_mit_pc_sum = al_mit_pc_sum[al_mit_pc_sum.variable< '2101']
# al_mit_pc_sum = al_mit_pc_sum.pivot(index='Region', columns='variable')
# al_mit_pc_sum = 
# al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)

# sums = sums[sums.variable < '2101']


# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Total per capita emissions in GT/CO2"
# )

# sums_plot
289/11:
# per capit sums over time to determine the total emissions per person until 2150 

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation costs in Trillion US Dollars"
)

sums_plot
290/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
290/2:
# per capit sums over time to determine the total emissions per person until 2150 

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation costs in Trillion US Dollars"
)

sums_plot
290/3:
# per capit sums over time to determine the total emissions per person until 2150 

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
o
290/4:
# per capit sums over time to determine the total emissions per person until 2150 

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
290/5:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

# GDR_al_pc_sum100 = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum100 = GDR_al_pc_sum100 
# GDR_al_pc_sum100 ["Burden sharing"] = "GDR"
# ATP_al_pc_sum100 = (al_ATP/mitigation_population).sum(axis=1).reset_index().#melt("Region")
# ATP_al_pc_sum100 ["Burden sharing"] = "AP"
# IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).sum(axis=1).reset_index().#melt("Region")
# IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum100 = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum100 ["Burden sharing"] = "PCC"

# al_BAU_pc_sum100 = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum100 ["Burden sharing"] = 'BAU'


# al_mit_pc_sum100 = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum100 ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
290/6:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

# GDR_al_pc_sum100 = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# GDR_al_pc_sum100 = GDR_al_pc_sum100 
# GDR_al_pc_sum100 ["Burden sharing"] = "GDR"
# ATP_al_pc_sum100 = (al_ATP/mitigation_population).sum(axis=1).reset_index().#melt("Region")
# ATP_al_pc_sum100 ["Burden sharing"] = "AP"
# IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).sum(axis=1).reset_index().#melt("Region")
# IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum100 = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum100 ["Burden sharing"] = "PCC"

# al_BAU_pc_sum100 = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum100 ["Burden sharing"] = 'BAU'


# al_mit_pc_sum100 = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum100 ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
290/7:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"


# ATP_al_pc_sum100 = (al_ATP/mitigation_population).sum(axis=1).reset_index().#melt("Region")
# ATP_al_pc_sum100 ["Burden sharing"] = "Ap"
# IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).sum(axis=1).reset_index().#melt("Region")
# IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"
# PCC_al_pc_sum100 = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
# PCC_al_pc_sum100 ["Burden sharing"] = "PCC"

# al_BAU_pc_sum100 = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
# al_BAU_pc_sum100 ["Burden sharing"] = 'BAU'


# al_mit_pc_sum100 = (al_mit/mitigation_population).reset_index()#.melt("Region")
# al_mit_pc_sum100 ["Burden sharing"] = "none"

# sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
# sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
290/8:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PPC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 =PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 =PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 =PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
290/9:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
290/10:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PPC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 =PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 =PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 =PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
292/2:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
292/3:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PPC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 =PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 =PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 =PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/4:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
292/5:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PPC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 =PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 =PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 =PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/6:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 =PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 =PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 =PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/7:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/8:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
292/9:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/10:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, PCC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/11:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums = pd.concat(sums)


# sums

# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 0, 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2150',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "allocations per capita in GT of CO2"
# )

# sums_plot

GF_al_pc_sum100
292/12:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
292/13:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
292/14:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
292/15:
# per capit sums over time to determine the total emissions per person until 2100

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"


GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"



al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
292/16:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )

al_PCC
292/17:
# per capit sums over time to determine the total emissions per person until 2100

PPC_al_pc_sum10 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum10 = PPC_al_pc_sum10[PCC_al_pc_sum10.variable< '2100']
PPC_al_pc_sum10 = PPC_al_pc_sum10.pivot(index='Region', columns='variable') 
PPC_al_pc_sum10 = PPC_al_pc_sum10.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum10 ["Burden sharing"] = "PCC"

GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"



al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('regional_allowance_ATP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
294/2:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/3:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/4:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/5:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/6:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

# PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
# PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
# PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
# PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/7:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PCC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/8:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/9:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/10:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot100
294/11:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot100
294/12:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot100
294/13:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "GDR"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

AP_al_pc_sum100
294/14:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

AP_al_pc_sum100
294/15:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
294/16:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums100.to_csv('sums allowances per capita 2100')

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
294/17:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/18:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums100.to_csv('sums allowances per capita 2100.csv')

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
294/19:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum ]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
294/20:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum ]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
296/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
296/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
296/3:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
296/4:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'NAF') 
                                | (mitigation_costs_BSR['Region'] == 'WAF') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                |  (mitigation_costs_BSR['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/5:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'NAF') 
                                | (mitigation_costs_BSR['Region'] == 'WAF') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                |  (mitigation_costs_BSR['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'costs per burden sharing regime for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/6:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'NAF') 
                                | (mitigation_costs_BSR['Region'] == 'WAF') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                |  (mitigation_costs_BSR['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/7:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'NAF') 
                                | (mitigation_costs_BSR['Region'] == 'WAF') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                |  (mitigation_costs_BSR['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="Trillion USD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/8:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
296/9:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'NAF') 
                                | (mitigation_costs_BSR['Region'] == 'WAF') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                |  (mitigation_costs_BSR['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="Trillion USD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/10:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="Trillion USD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/11:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/12:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'BRA') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                | (mitigation_costs_BSR['Region'] == 'RUS') 
                                |  (mitigation_costs_BSR['Region'] == 'INDIA')
                                |  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/13:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'BRA') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                | (mitigation_costs_BSR['Region'] == 'RUS') 
                                |  (mitigation_costs_BSR['Region'] == 'INDIA')
                                |  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/14:
# plots costs

frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
296/15:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'BRA') 
                                | (mitigation_costs_BSR['Region'] == 'SAF') 
                                | (mitigation_costs_BSR['Region'] == 'RUS') 
                                |  (mitigation_costs_BSR['Region'] == 'INDIA')
                                |  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
296/16:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
297/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
297/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
297/3:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
297/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
297/5:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
297/6:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP
297/7:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)


sum_costs_GF
297/8:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')#.drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)


sum_costs_GF
297/9:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)


Image_region
298/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
298/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
298/3:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
298/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
298/5:

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)


Image_region
298/6:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'}).drop(columns={'Region'})
#Image_region = Image_region.set_index('Region').drop(columns={'Region'})
298/7:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'}).drop(columns={'Region'})
#Image_region = Image_region.set_index('Region').drop(columns={'Region'})
Image_region
298/8:

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
298/9:

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
298/10:

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').#drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
298/11:

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
298/12:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv')#.drop(columns={'Unnamed: 0'}).drop(columns={'Region'})
#Image_region = Image_region.set_index('Region').drop(columns={'Region'})
Image_region
298/13:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
#Image_region = Image_region.set_index('Region').drop(columns={'Region'})
Image_region
299/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
299/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
299/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
299/4:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
299/5:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})
299/6:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
299/7:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
300/1:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
300/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
300/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
300/4:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
300/5:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
301/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
301/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
300/6:
CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
300/7:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
300/8:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
#sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
302/1:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
302/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
302/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
302/4:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
302/5:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
302/6:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
#sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
302/7:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
303/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
303/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/3:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
303/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
303/6:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/7:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/8:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/9:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
    costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region'))#/GDP)#*100
    costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region'))#/GDP)#*100
    costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region'))#/GDP)#*100
    costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region'))#/GDP)#*100
    costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region'))#/GDP)#*100
mitigation_costs= (mitigation_costs)#/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/10:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
    costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
    costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
    costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
    costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
    costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/11:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)



costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/12:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/13:
#sum over rows 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"


sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/14:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
303/15:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/16:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/17:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = (sum_costs_GF.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/18:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GPD..reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/19:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GPD.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/20:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/21:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = (sum_costs_GF.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/22:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = (sum_costs_GF.sum(axis=1)/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/23:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = ((sum_costs_GF.sum(axis=1))/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/24:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = ((sum_costs_GF.sum(axis=1))/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/25:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = ((sum_costs_GF.sum(axis=1))#/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/26:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = (sum_costs_GF.sum(axis=1))#/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/27:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = (sum_costs_GF.sum(axis=1))#/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_GDP
303/28:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = ((sum_costs_GF.sum(axis=1).to_frame())/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_GDP
303/29: sum_costs_AP
303/30: sum_costs_AP/sum_GDP
303/31: sum_costs_AP
303/32: sum_GDP
303/33:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = ((sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/34:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/35: sum_GDP
303/36:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/37:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/38:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0:'value'})
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/39:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
#sum_GDP= sum_GDP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0:'value'})
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/40: sum_GDP
303/41:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().set_index('Region')#reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0:'value'})
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/42:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
303/43:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame().set_index('Region')#reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0:'value'})
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/44:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()#.set_index('Region')#reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0:'value'})
# sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/45: sum_GDP
303/46:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"


# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR= sum_costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig= sum_mitig.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/47:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IECP = sum_costs_IECP.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IECP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/48:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IECP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/49:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IECP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/50:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/51:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/52:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_AP
303/53:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/54:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_AP
303/55:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/56:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
303/57:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
303/58:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/59:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
303/60:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
303/61:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
303/62:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
303/63:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
304/1:
#sum of costs until 2150

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
304/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
304/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = (pd.read_csv('mitig_costs_GF.csv').set_index('Region')/GDP)#*100
costs_IEPC = (pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')/GDP)#*100
costs_PCC = (pd.read_csv('mitig_costs_PCC.csv').set_index('Region')/GDP)#*100
costs_AP = (pd.read_csv('mitig_costs_AP.csv').set_index('Region')/GDP)#*100
costs_GDR = (pd.read_csv('mitig_costs_GDR.csv').set_index('Region')/GDP)#*100
mitigation_costs= (mitigation_costs/GDP)



#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
304/4:
#sum of costs until 2150

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
304/5:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]


# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs


#sums 


sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
304/6:
#sum of costs until 2150

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
304/7:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs


#sums 

sum_GDP= GDP.sum(axis=1).to_frame()

sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


# #melting 

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
304/8:
# sum in percentage of GDP 

sum_costs_GF_pc = (costs_GF.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF_pc ["Burden sharing"] = "GF"
sum_costs_IEPC_pc = (costs_IEPC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"
sum_costs_PCC_pc = (costs_PCC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"
sum_costs_AP_pc = (costs_AP.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP_pc ["Burden sharing"] = "AP"
sum_costs_GDR_pc = (costs_GDR.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"
sum_mitigation_costs_pc = (mitigation_costs.sum(axis= 1 )/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs_pc ["Burden sharing"] = "none"
304/9:
# sum in percentage of GDP 

sum_costs_GF_pc = (costs_GF.sum(axis=1).to_frame()#/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF_pc = sum_costs_GF_pc/sum_GDP
sum_costs_GF_pc ["Burden sharing"] = "GF"
# sum_costs_IEPC_pc = (costs_IEPC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"
# sum_costs_PCC_pc = (costs_PCC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"
# sum_costs_AP_pc = (costs_AP.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP_pc ["Burden sharing"] = "AP"
# sum_costs_GDR_pc = (costs_GDR.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"
# sum_mitigation_costs_pc = (mitigation_costs.sum(axis= 1 )/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs_pc ["Burden sharing"] = "none"

sum_costs_GF_pc
304/10:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()#/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF_pc = sum_costs_GF_pc/sum_GDP
sum_costs_GF_pc ["Burden sharing"] = "GF"
# sum_costs_IEPC_pc = (costs_IEPC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"
# sum_costs_PCC_pc = (costs_PCC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"
# sum_costs_AP_pc = (costs_AP.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP_pc ["Burden sharing"] = "AP"
# sum_costs_GDR_pc = (costs_GDR.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"
# sum_mitigation_costs_pc = (mitigation_costs.sum(axis= 1 )/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs_pc ["Burden sharing"] = "none"

sum_costs_GF_pc
304/11:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
304/12:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()#/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF_pc = sum_costs_GF_pc/sum_GDP
sum_costs_GF_pc ["Burden sharing"] = "GF"
# sum_costs_IEPC_pc = (costs_IEPC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"
# sum_costs_PCC_pc = (costs_PCC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"
# sum_costs_AP_pc = (costs_AP.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP_pc ["Burden sharing"] = "AP"
# sum_costs_GDR_pc = (costs_GDR.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"
# sum_mitigation_costs_pc = (mitigation_costs.sum(axis= 1 )/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs_pc ["Burden sharing"] = "none"

sum_costs_GF_pc
304/13:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()#/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)#.reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF_pc ["Burden sharing"] = "GF"
# sum_costs_IEPC_pc = (costs_IEPC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"
# sum_costs_PCC_pc = (costs_PCC.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"
# sum_costs_AP_pc = (costs_AP.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP_pc ["Burden sharing"] = "AP"
# sum_costs_GDR_pc = (costs_GDR.sum(axis=1)/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"
# sum_mitigation_costs_pc = (mitigation_costs.sum(axis= 1 )/sum_GDP).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs_pc ["Burden sharing"] = "none"

sum_costs_GF_pc
304/14:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"
304/15:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= sum_mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)
304/16:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)
304/17:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)

# graph 

sums_graph.to_csv('sum costs 2150.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
304/18:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)

# graph 

sums_graph.to_csv('sum costs 2150.csv')

sums_graph
fig0 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
304/19:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig0 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
304/20:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig0 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
306/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
306/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
306/3:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()

sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
306/4:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums, axis = 0)

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
306/5:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sums_costs_GF_pc
306/6:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sums_costs_GF_pc
306/7:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sums_costs_GF_pc
306/8:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sum_costs_GF_pc
306/9:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sum_costs_IPPC_pc
306/10:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sum_costs_IEPC_pc
306/11:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sum_costs_PCC_pc
306/12:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sum_costs_AP_pc
306/13:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums, axis = 0)

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150

sum_costs_GDR_pc
306/14:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0)

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
306/15:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0)

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 0,
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
306/16:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0)

sum_graph_pc

# graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
306/17:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0)

sums_graph_pc

# graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
306/18:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0)

sums_graph_pc

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 0,
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
306/19:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

sums_graph_pc

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 0,
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
306/20:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()

sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"
sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"
sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"
sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"
sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"


sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0

GDP
305/1:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
305/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
305/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
305/4:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
sum_mitig ["Burden sharing"] = "none"
305/5:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
305/6:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
305/7:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
307/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
307/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
307/3:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_mitig ["Burden sharing"] = "none"
307/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
307/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')##drop(columns = ['IMAGE_region_num'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
308/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
308/2:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
308/3:

MCG_GF_2100 = MCG_GF[MCG_GF_2100 variable< '2101']
MCG_GDR_2100 = MCG_GDR[MCG_GDR_2100 variable< '2101']
MCG_AP_2100 = MCG_AP[MCG_AP_2100 variable< '2101']
MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC_2100 variable< '2101']
MCG_PCC_2100 = MCG_PCC[MCG_PCC_2100 variable< '2101']

MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames, axis=1)
MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs2100 = MCGs2100.reset_index()
MCGs2100
308/4:

MCG_GF_2100 = MCG_GF[MCG_GF_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR[MCG_GDR_2100.variable< '2101']
MCG_AP_2100 = MCG_AP[MCG_AP_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC[MCG_PCC_2100.variable< '2101']

MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames, axis=1)
MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs2100 = MCGs2100.reset_index()
MCGs2100
308/5:

MCG_GF_2100 = MCG_GF[MCG_GF.variable< '2101']
MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames, axis=1)
MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs2100 = MCGs2100.reset_index()
MCGs2100
308/6:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")

MCG_GF
308/7:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
 MCG_GF_2100 = MCG_GF[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
308/8:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
308/9:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
308/10:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
308/11:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF2100[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
308/12:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
308/13:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')

MCG_GF_2100
#MCG_GF_2100 = MCG_GF_2100[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
308/14:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
309/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
309/2:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
309/3:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
309/4:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
# MCG_GDR_2100 = MCG_GDR[MCG_GDR.variable< '2101']
# MCG_AP_2100 = MCG_AP[MCG_AP.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC[MCG_IEPC.variable< '2101']
# MCG_PCC_2100 = MCG_PCC[MCG_PCC.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
309/5:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)


MCG_GF_2100

# MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']

# MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']

# MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']

# MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']

# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()

# frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
# MCGs2100 = pd.concat(frames, axis=1)
# MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
# MCGs2100 = MCGs2100.reset_index()
# MCGs2100
309/6:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)


MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames, axis=1)
MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs2100 = MCGs2100.reset_index()
MCGs2100
309/7:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)


MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames2100, axis=1)
MCGs2100 = MCGs2100.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs2100 = MCGs2100.reset_index()
MCGs2100
309/8:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100 ['Burden sharing'] = 'GF' 

MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100 ['Burden sharing'] = 'GDR' 

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100 ['Burden sharing'] = 'AP'

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100 ['Burden sharing'] = 'IEC'

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100 ['Burden sharing'] = 'PCC'


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames2100, axis=1)
MCGs2100
309/9:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100 ['Burden sharing'] = 'GF' 

MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100 ['Burden sharing'] = 'GDR' 

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100 ['Burden sharing'] = 'AP'

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100 ['Burden sharing'] = 'IEC'

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100 ['Burden sharing'] = 'PCC'


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames2100, axis=0)
MCGs2100
309/10:
MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100 ['Burden sharing'] = 'GF' 

MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100 ['Burden sharing'] = 'GDR' 

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100 ['Burden sharing'] = 'AP'

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100 ['Burden sharing'] = 'IEC'

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100 ['Burden sharing'] = 'PCC'


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames2100, axis=0)
MCGs2100.to_csv('MCG 2100.csv')
309/11:
fig0 = px.scatter(
    MCGs2100, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' Mitigation cost gap per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
fig0
309/12:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs = MCGs.reset_index()
MCGs
309/13:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'IEPC','PCC', 'AP', 'GDR'],
                  title = 'Mitigation Cost GAP per region per burden sharing regime', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
309/14:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'IEPC','PCC', 'AP', 'GDR'],
                  title = 'Mitigation Cost per burden sharing regime 2150', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
309/15:

MCG_GF_g = MCG_GF_g.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR_g.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP_g.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC_g.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC_g.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'
309/16:

MCG_GF_g = MCG_GF.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'
309/17:

MCG_GF_g = MCG_GF.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
309/18:

MCG_GF_g = MCG_GF.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
309/19:

MCG_GF_g = MCG_GF.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

# fig = px.line(
#     MGCS_Plots,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )
309/20:

MCG_GF_g = MCG_GF.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGC_GF

# fig = px.line(
#     MGCS_Plots,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )
309/21:

MCG_GF_g = MCG_GF.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MCG_GF

# fig = px.line(
#     MGCS_Plots,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )
309/22:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MCG_GF

# fig = px.line(
#     MGCS_Plots,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )
309/23:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

# fig = px.line(
#     MGCS_Plots,
#     x='variable',
#     y= 'value',
#     line_group="Region",
#     color="Burden sharing",
#     title = 'Mitigation costs per burden sharing regime 2020-2150',
#     facet_col = "Region",
#     facet_col_wrap=5,
#     height=1500
    
# )
309/24:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
309/25:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
309/26:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline
309/27:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
# MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
# MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
# MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
# MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
# MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/28:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline
309/29:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
 MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
# MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
# MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
# MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/30:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
# MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
# MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
# MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/31:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100[MCG_GF_2100_line.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100_line = MCG_GDR_2100[MCG_GDR_2100_line.variable< '2101']
# MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100_line = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100_line = MCG_AP_2100[MCG_AP_2100_line.variable< '2101']
# MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100_line = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100_line = MCG_IEPC_2100[MCG_IEPC_2100_line.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100_line = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100_line = MCG_PCC_2100[MCG_PCC_2100_line.variable< '2101']
# MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100_line = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/32:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100_line = MCG_PCC_210_line[MCG_PCC_2100_line.variable< '2101']
# MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/33:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
# MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/34:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

# MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# # MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# # MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

# MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# # MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# # MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_AP_2100_line ['Burden sharing'] = 'AP'

# MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# # MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# # MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

# MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
# # MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# # MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


# frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
# MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/35:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
309/36:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

# MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# # MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# # MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

# MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# # MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# # MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_AP_2100_line ['Burden sharing'] = 'AP'

# MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# # MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# # MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

# MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
# # MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# # MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


# frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
# MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/37:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line #['Burden sharing'] = 'GF' 

# MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# # MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# # MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

# MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# # MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# # MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_AP_2100_line ['Burden sharing'] = 'AP'

# MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# # MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# # MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

# MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
# # MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# # MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


# frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
# MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/38:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

# MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# # MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# # MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

# MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# # MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# # MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_AP_2100_line ['Burden sharing'] = 'AP'

# MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# # MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# # MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

# MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
# # MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# # MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


# frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
# MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/39:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
# MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
# MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame(MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100_line ['Burden sharing'] = 'GF' 
MCG_GF_2100_line
# MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
# MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
# # MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
# # MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
# MCG_GDR_2100_line = MCG_GDR_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

# MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
# MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
# # MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
# # MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
# MCG_AP_2100_line = MCG_AP_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_AP_2100_line ['Burden sharing'] = 'AP'

# MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
# MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
# # MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
# # MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
# MCG_IEPC_2100_line = MCG_IEPC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

# MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
# MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
# # MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
# # MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
# MCG_PCC_2100_line = MCG_PCC_2100_line.reset_index().melt('Region').drop(['variable'], axis =1)
# MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


# frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
# MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/40:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
309/41:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline
309/42:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs = MCGs.reset_index()
MCGs.to_csv('MCG 2150.csv')
301/3:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
301/4:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
301/5:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
301/6:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
301/7:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
301/8:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
301/9:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
301/10:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
301/11:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
301/12:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
301/13:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
301/14:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
301/15:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
301/16:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
301/17:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
301/18:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBR_AP
301/19:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBR_PCC
301/20:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBR_IEPC
301/21:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)#.set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
301/22:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
301/23:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)#.set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
301/24:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
301/25:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
301/26:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
310/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
310/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
310/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
310/4:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
310/5:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
310/6:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBR_IEPC
311/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
311/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
311/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GF
311/4:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC
312/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
312/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
312/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
312/4:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
312/5:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
313/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
313/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
313/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
313/4:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)#.set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
313/5:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
#CBRs.to_csv('CBRs.csv')
CBRs
313/6:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
313/7:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150.to_csv('CBRs_2150.csv')
313/8:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2150',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
313/9:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
CBRs
313/10:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region

CBR_GF
313/11:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region

CBR_IEPC
314/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
314/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region

CBR_IEPC
314/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
314/4:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)#.set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
CBR_mit
314/5:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
CBRs
314/6:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)

CBRs_plot
314/7:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150.to_csv('CBRs_2150.csv')
314/8:
#CBR 
CBRs_plot_2150 = px.scatter(CBRs_2150, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2150',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot_2150.update_xaxes(
   title = "Region"
)

CBRs_plot_2150.update_yaxes(
   title = "CBR"
)

CBRs_plot_2150
315/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.to_csv("output/avoided_damages_ineqav.csv")
315/2:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?

mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs

#NPV 
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
315/3:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR.to_csv("output/cbr_inequal_aversion.csv")
CBR
315/4:
Image = CBR.reset_index().rename(columns={'index': 'IMAGE_region_num'}).drop(columns = 'CBR', axis =1)
Image.to_csv('output/Image_region.csv')
Image
307/6:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
307/7:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
307/8:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
307/9:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_mitig ["Burden sharing"] = "none"
307/10:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
307/11:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num')drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sum_costs_GF
316/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
316/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
316/3:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_mitig ["Burden sharing"] = "none"
316/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
316/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"


sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
317/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
317/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
317/3:
#sum over rows 

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()


sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame()
sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_mitig ["Burden sharing"] = "none"
317/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
317/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
# sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
320/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
320/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
320/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
320/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
320/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV
320/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('output\NPV_AP.csv')
322/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
322/2:
global_emissions = mitigation_emissions.sum(axis=0)
global_emissions_2020 = mitigation_emissions.sum(axis=0)
global_emissions_2020 = np.asarray(global_emissions_2020)
global_emissions_2020 = global_emissions_2020[0]


#data selection for 2020 
mitigation_emissions_2020 = mitigation_emissions.loc[:,'2020']
#check if this was the right way 

# calculations of the regional allowance for 2020
#regional allowance GF, alleen van 2020 
GF_fractions = pd.DataFrame({
    str(year): mitigation_emissions_2020/global_emissions_2020
    for year in range(2020, 2151, 5)
})
GF2020= GF_fractions * global_emissions
GF2020.to_csv('GF2020.csv')


#check if this was the right way
322/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - GF2020

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_GF.csv")
322/4:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("output\NPV_GF.csv")

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("output\CBR_GF.csv")

CBR_GF
322/5:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("output\NPV_GF.csv")

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("CBR_GF.csv")

CBR_GF
322/6:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("output\NPV_GF.csv")

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("CBR_GF.csv") 

CBR_GF
322/7:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("NPV_GF.csv")

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("CBR_GF.csv") 

CBR_GF
321/1:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
321/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
321/3:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
321/4:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
321/5:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
321/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
321/7:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")
321/8:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
322/8:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("NPV_GF_2150.csv")

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF_2150.reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
323/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
323/2:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
323/3:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
323/4:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
regional_allowance_GDR
323/5:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
323/6:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)
AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
323/7:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)

GDR_NPV.to_csv("NPV_GDR.csv")

AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
CBR_GDR
323/8:
#new mitigation costs 2150 

GDR_mitigationcosts= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)

GDR_NPV.to_csv("NPV_GDR_2150.csv")
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GDR_2150.csv")

CBR_GDR_2150
324/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
324/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
324/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
324/4:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
324/5:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
PCC_NPV.to_csv("NPV_PCC.csv")

AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
324/6:
# #new mitigation costs 2150 

PCC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
PCC_NPV.to_csv("NPV_PCC_2100.csv")
AD= npv(avoided_damages)

## CBR 
CBR_PCC_2150 = AD/PCC_NPV
CBR_PCC_2150= CBR_PCC_2150.reset_index()
CBR_PCC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC_2150.columns = ['Region','CBR']

CBR_PCC_2150.to_csv("output\CBR_PCC_2150.csv")

CBR_PCC_2150
325/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
325/2:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
325/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
325/4:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC_NPV.to_csv("NPV_IEPC.csv")
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
325/5:
# #new mitigation costs 2150 

IPC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC_NPV.to_csv("NPV_IEPC_2100.csv")
AD= npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_IEPC_2150.csv")

CBR_IEPC_2150
318/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
318/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
318/3:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150')
# sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
318/4:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
318/5:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
326/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
326/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
326/3:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150')
# sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/4:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150.csv')
# sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/5:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}.set_index('Region')
# sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/6:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
# sum_costs_GF = costs_GF.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/7:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/8:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region')
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/9:
#sum of costs until 2150

#sums 

sum_GDP= GDP.sum(axis=1).to_frame()
sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC =
# sum_costs_IEPC = costs_IEPC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC
# sum_costs_PCC = costs_PCC.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP =
# sum_costs_AP = costs_AP.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = 
# sum_costs_GDR = costs_GDR.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
327/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
327/2:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
GDP = mitigation.loc["GDP_gross"]
327/3:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
GDP = mitigation.loc["GDP_gross"]
327/4:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
GDP = mitigation.loc["GDP_gross"]
327/5:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100

sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
327/6:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
GDP = GDP.reset_index().melt('Region')
sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
327/7:
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go
327/8:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
GDP = mitigation.loc["GDP_gross"]
327/9:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
GDP = GDP.reset_index().melt('Region')
sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
327/10:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
GDP = mitigation.loc["GDP_gross"]
327/11:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/1:
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go
328/2:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
GDP = mitigation.loc["GDP_gross"]
328/3:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/4:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/5:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/6:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')

NPV_GDP
328/7:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')

NPV_GDP_2150
319/1:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
319/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
319/3:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
319/4:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
328/8:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.rename(columns = {'Unname:0 ': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.rename(columns = {'Unname:0 ': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/9:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')


#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
319/5:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
329/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
329/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
328/10:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/11: NPV_GDP
328/12:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/13: NPV_GDP
328/14:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'index ': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/15: NPV_GDP
328/16:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'index': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().rename(columns = {'Unname:0 ': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/17: NPV_GDP
328/18:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'index': "Region"})
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().reset_index().rename(columns = {'index': "Region"})
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
329/4:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/5:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').drop(columns = 'Unnamed 0')
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/6:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').drop(columns = 'Unnamed 0', axis =1)
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/7:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').drop(columns = 'Unnamed 0', axis =)
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/8:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').drop(columns = 'Unnamed 0', axis =0)
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/9:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')#.drop(columns = 'Unnamed 0', axis =0)
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/10:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').drop(columns = 'Unnamed: 0', axis =1)
# sum_GDP_2100 = sum_GDP.pivot(index='Region', columns='variable')
# sum_GDP_2100= sum_GDP.sum(axis=1).to_frame()

sum_GDP_2100 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/11:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').drop(columns = 'Unnamed: 0', axis =1)

 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
#sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
328/19:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
328/20: NPV_GDP
329/12:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv')#.drop(columns = 'Unnamed: 0', axis =1).set
sum_GDP_2100
 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# #sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/13:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region')
sum_GDP_2100
 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# #sum_costs_GF = (sum_costs_GF/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/14:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region')
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/15:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {0: 'value'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index().melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/16:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {0: 'value'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/17:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {0: 'value'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
#sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
#sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/18:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {0: 'value'})
sum_GDP_2100
 
# sum_costs_GF = costs_GF[costs_GF.variable<'2101']
# sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
# sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# #sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/19:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {0: 'value'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
# #sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
328/21: NPV_GDP
329/20:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region')
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/21:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region')
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
#sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/22:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region')
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
#sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF
sum_GDP_2100

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/23:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame()
#sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF
sum_GDP_2100

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/24:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = {'0': 'values'})
#sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF
sum_GDP_2100

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/25:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = {'0': 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/26:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100)#.reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/27:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/28:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/29:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
# #sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/30:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_GF

# sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
# sum_costs_IEPC= sum_costs_IEPC.pivot(index='Region', columns='variable')
# sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame()
# sum_costs_IEPC = (sum_costs_IEPC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
# sum_costs_PCC= sum_costs_PCC.pivot(index='Region', columns='variable')
# sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame()
# sum_costs_PCC = (sum_costs_PCC/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = costs_AP[costs_AP.variable<'2101']
# sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
# sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame()
# sum_costs_AP = (sum_costs_AP/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
# sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
# sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame()
# sum_costs_GDR= (sum_costs_GDR/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
# sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
# sum_mitig = sum_mitig.sum(axis=1).to_frame()
# sum_mitig= (sum_mitig/sum_GDP).reset_index().melt('Region').drop(['variable'], axis =1)
# #sum_mitig ["Burden sharing"] = "none"
329/31:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costsIEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
329/32:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
329/33:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
329/34:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.join(Image_region)
# sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
329/35:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
# sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
330/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
330/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
330/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
330/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
330/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

# sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
# sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
330/6:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
# sum_costs_PCC = sum_costs_PCC.join(Image_region)
# sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_GF = sum_costs_GF.set_index('Region')
# sum_costs_AP = sum_costs_AP.join(Image_region)
# sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GF = sum_costs_GF.set_index('Region')
# sum_costs_GDR = sum_costs_GDR.join(Image_region)
# sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
331/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
331/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
331/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
331/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
331/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.set_index('Region')
sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.set_index('Region')
sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

# sum_mitig = sum_mitig..set_index('Region')
# sum_mitig = sum_mitig.join(Image_region)
# sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
331/6:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
332/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
332/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
332/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"
332/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
332/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.set_index('Region')
sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.set_index('Region')
sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = sum_mitig..set_index('Region')
sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
332/6:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.set_index('Region')
sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.set_index('Region')
sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = sum_mitig.set_index('Region')
sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
332/7:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
332/8:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
332/9:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
333/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
333/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
333/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
333/4:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
333/5:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
334/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
334/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
334/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = mitigation_costs[mitigation_costs.variable<'2101']
sum_mitig = sum_mitig.pivot(index='Region', columns='variable')
sum_mitig = sum_mitig.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
334/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
334/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.set_index('Region')
sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.set_index('Region')
sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = sum_mitig.set_index('Region')
sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
334/6:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)

sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
334/7:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph
# sums_graph.to_csv('sum costs.csv')

# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2100',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
334/8:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph = sums_graph.reset_index()
sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
334/9:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph = sums_graph.reset_index()
sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'values',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
326/10:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
326/11:
#sum of costs until 2150

#sums 

sum_GDP= pd.read_csv('NPV_GDP_2150.csv')


sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/12:
#sum of costs until 2150

#sums 

sum_GDP= pd.read_csv('NPV_GDP_2150.csv')


sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/13:
#sum of costs until 2150

#sums 

sum_GDP= pd.read_csv('NPV_GDP_2150.csv')


sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"


# sum_mitigation_costs = mitigation_costs.sum(axis= 1 ).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
# sum_mitigation_costs ["Burden sharing"] = "none"


# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
328/22:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

NPV_mitigation = npv(sum_mitigation)
NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation.to_csv('NPV_mitigation.csv')


#2150

NPV_mitigation_2150 = npv(mitigation)
NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')
335/1:
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go
335/2:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
GDP = mitigation.loc["GDP_gross"]
335/3:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
335/4:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

NPV_mitigation = npv(sum_mitigation)
NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation.to_csv('NPV_mitigation.csv')


#2150

NPV_mitigation_2150 = npv(mitigation)
NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')
335/5:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
# sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
# sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

# NPV_mitigation = npv(sum_mitigation)
# NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation.to_csv('NPV_mitigation.csv')


# #2150

# NPV_mitigation_2150 = npv(mitigation)
# NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')

sum_mitigation
336/1:
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go
336/2:
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
GDP = mitigation.loc["GDP_gross"]
336/3:
#Sum of discounted GDP (NPV)

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_GDP = GDP.reset_index().melt('Region')
sum_GDP = sum_GDP[sum_GDP.variable<'2101']
sum_GDP = sum_GDP.pivot(index='Region', columns='variable')
sum_GDP= sum_GDP.sum(axis=1).to_frame()

NPV_GDP = npv(sum_GDP)
NPV_GDP = NPV_GDP.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_GDP.to_csv('NPV_GDP.csv')

NPV_GDP

#2150

NPV_GDP_2150 = npv(GDP)
NPV_GDP_2150 = NPV_GDP_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_GDP_2150.to_csv('NPV_GDP_2150.csv')
336/4:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation_costs.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
# sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
# sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

# NPV_mitigation = npv(sum_mitigation)
# NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation.to_csv('NPV_mitigation.csv')


# #2150

# NPV_mitigation_2150 = npv(mitigation)
# NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')

sum_mitigation
336/5:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation_costs.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
# sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

# NPV_mitigation = npv(sum_mitigation)
# NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation.to_csv('NPV_mitigation.csv')


# #2150

# NPV_mitigation_2150 = npv(mitigation)
# NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')

sum_mitigation
336/6:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation_costs.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

# NPV_mitigation = npv(sum_mitigation)
# NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation.to_csv('NPV_mitigation.csv')


# #2150

# NPV_mitigation_2150 = npv(mitigation)
# NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
# NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')

sum_mitigation
336/7:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation_costs.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

NPV_mitigation = npv(sum_mitigation)
NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation.to_csv('NPV_mitigation.csv')


#2150

NPV_mitigation_2150 = npv(mitigation)
NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')

sum_mitigation
334/10:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = pd.read_csv('NPV_mitig.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
336/8:
#mitigation
mitigation_costs= mitigation.loc["abatement_costs"]


discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


#2100
sum_mitigation = mitigation_costs.reset_index().melt('Region')
sum_mitigation = sum_mitigation[sum_mitigation.variable<'2101']
sum_mitigation = sum_mitigation.pivot(index='Region', columns='variable')
sum_mitigation= sum_mitigation.sum(axis=1).to_frame()

NPV_mitigation = npv(sum_mitigation)
NPV_mitigation = NPV_mitigation.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation.to_csv('NPV_mitigation.csv')


#2150

NPV_mitigation_2150 = npv(mitigation_costs)
NPV_mitigation_2150 = NPV_mitigation_2150.to_frame().reset_index().rename(columns = {'index': "Region"}).set_index("Region")
NPV_mitigation_2150.to_csv('NPV_mitigation_2150.csv')

sum_mitigation
334/11:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = pd.read_csv('NPV_mitigation.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
326/14:
#sum of costs until 2150

#sums 

sum_GDP= pd.read_csv('NPV_GDP_2150.csv')


sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "none"
# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/15:
#sum of costs until 2150

#sums 

sum_GDP= pd.read_csv('NPV_GDP_2150.csv')


sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "none"
# sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
# sums_graph = pd.concat(sums, axis = 0)

# #sums_graph = sums_graph[sums_graph.variable<'2101']


# sums_graph
# fig0 = px.scatter(
#     sums_graph, 
#     x='Region',
#     y= 'value',
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
# fig0
326/16:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

sums_graph_pc

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 0,
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
326/17:
#sum of costs until 2150

#sums 

sum_GDP= pd.read_csv('NPV_GDP_2150.csv')


sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "no"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
326/18:
# sum in percentage of GDP 

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

sums_graph_pc

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 0,
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
326/19:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_GDP


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/20:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = costs_GF.sum(axis=1).to_frame()
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = costs_IEPC.sum(axis=1).to_frame()
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = costs_PCC.sum(axis=1).to_frame()
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = costs_AP.sum(axis=1).to_frame()
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = costs_GDR.sum(axis=1).to_frame()
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= mitigation_costs.sum(axis =1).to_frame()
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_AP_pc


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/21:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF")

sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_AP_pc


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/22:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_AP_pc


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/23:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
# sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_AP_pc


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/24:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
# sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_GF_pc


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/25:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
# sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_GF_pc
sum_GDP


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/26:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
# sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
# sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_GF_pc
sum_GDP


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/27:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
# sum_costs_GF_pc ["Burden sharing"] = "GF"

# sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
# sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

# sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
# sum_costs_PCC_pc ["Burden sharing"] = "PCC"

# sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
# sum_costs_AP_pc ["Burden sharing"] = "AP"

# sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
# sum_costs_GDR_pc ["Burden sharing"] = "GDR"

# sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
# sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
# sum_mitigation_costs_pc ["Burden sharing"] = 'none'

sum_costs_GF_pc
sum_GDP


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/28:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


# sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
# sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# sums_graph_pc

# # graph 

# sums_graph_pc.to_csv('sum costs 2150.csv')


# fig2150 = px.scatter(
#     sums_graph_pc, 
#     x='Region',
#     y= 0,
#     color="Burden sharing",
#     title = ' total mitigation costs per burden sharing regime 2020-2150',
    
# )

#            #labels = { "variable": "Burden Sharing Regime"})

# fig2150.update_xaxes(
#    title = "Region"
# )

# fig2150.update_yaxes(
#    title = "mitigation costs"
# )
# fig2150
326/29:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= 0,
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
326/30:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
326/31:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
326/32:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "mitigation costs"
)
fig2150
321/9:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
321/10:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
321/11:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
338/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('allowance_AP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
338/2:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums100.to_csv('sums allowances per capita 2100.csv')

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
338/3:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum ]
sums = pd.concat(sums)


sums

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
338/4:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
338/5:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig1
338/6:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
338/7:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1.update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
338/8:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="GTCO2", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
338/9:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums100.to_csv('sums allowances per capita 2100.csv')

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
338/10:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1.update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
338/11:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
338/12:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance.to_csv('per capita allowances.csv')

#per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
338/13:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)

fig2
338/14:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2.update_yaxes(col=1, title="tonnes/capita/year")
338/15:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2.update_yaxes(col=1, title="T/capita/year")
338/16:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2.update_yaxes(col=1, title="T/capita/year")
338/17:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance.to_csv('per capita allowances.csv')

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
338/18:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2.update_yaxes(col=1, title="T/capita/year")
338/19:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') 
                                | (regional_allowances['Region'] == 'WEU') 
                                | (regional_allowances['Region'] == 'CEU') 
                                |  (regional_allowances['Region'] == 'JAP')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/20:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') 
                                | (regional_allowances['Region'] == 'WEU') 
                                | (regional_allowances['Region'] == 'CEU') 
                                |  (regional_allowances['Region'] == 'JAP')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/21:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') 
                                | (regional_allowances['Region'] == 'WEU') 
                                | (regional_allowances['Region'] == 'CEU') 
                                |  (regional_allowances['Region'] == 'JAP')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/22:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

#regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1.update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
338/23:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'USA') 
                                | (regional_allowances['Region'] == 'WEU') 
                                | (regional_allowances['Region'] == 'CEU') 
                                |  (regional_allowances['Region'] == 'JAP')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/24:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/25:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1.update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
338/26:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2150 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/27:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'NAF') 
                                | (regional_allowances['Region'] == 'WAF') 
                                | (regional_allowances['Region'] == 'SAF') 
                                |  (regional_allowances['Region'] == 'RSAF')]
                                #|  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/28:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RUS') 
                                |  (regional_allowances['Region'] == 'INDIA')
                                |  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
338/29:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'NAF') 
                                | ( per_capita_allowance['Region'] == 'WAF') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                |  (per_capita_allowance['Region'] == 'RSAF')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig3 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year"

fig3.update_yaxes(col=1, title="T/capita/year")
338/30:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'NAF') 
                                | ( per_capita_allowance['Region'] == 'WAF') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                |  (per_capita_allowance['Region'] == 'RSAF')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig3 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year")

fig3.update_yaxes(col=1, title="T/capita/year")
326/33:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
341/1:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
341/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
341/3:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
341/4:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "mitigation costs"
)
fig0
341/5:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
342/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
342/3:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/4:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

#sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/5:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

sums_graph = sums_graph[sums_graph.variable<'2101']


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/6:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/7:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/8:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP"
)
fig2150
337/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
337/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
337/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = pd.read_csv('NPV_mitigation.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
337/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
337/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.set_index('Region')
sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.set_index('Region')
sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = sum_mitig.set_index('Region')
sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
337/6:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph = sums_graph.reset_index()
sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'values',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "percentage of GDP"
)
fig0
343/1:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.sum(axis =0 )
avoided_damages
343/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
343/3:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.sum(axis =0 )
avoided_damages
343/4:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
#avoided_damages = avoided_damages.sum(axis =0 )
avoided_damages
343/5:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
#avoided_damages = avoided_damages.sum(axis =0 )
avoided_damages
343/6:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =0 )
avoided_damages
343/7:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 )
avoided_damages
337/7:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph = sums_graph.reset_index()
sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'values',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.31]
)
fig0
337/8:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph = sums_graph.reset_index()
sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'values',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.031]
)
fig0
342/9:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP"
    range = [0,0.025]
)
fig2150
342/10:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
342/11:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
    range = [0,14.2]
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/12:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    range = [0,14.2]
)

fig0.update_yaxes(
   title = "TUSD"
)
fig0
342/13:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.2]
)
fig0
342/14:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.4]
)
fig0
343/8:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)

sum_costs_AP
343/9:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 )
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')
343/10:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 )
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
343/11:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame()
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
343/12:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = {'0': 'Value'})
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
343/13:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = { 0: 'Value'})
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
343/14:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = { 0: 'value'})
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
343/15:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums
343/16:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
343/17:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = { 0: 'value'}).reset_index()
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
343/18:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
343/19:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
             facet_row="Region", facet_col="value",)
            
fig
343/20:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
             facet_row="Region", facet_col="value",
            facet_col_spacing = 0.07)
fig
343/21:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
             facet_row="Region", facet_col="value",
            facet_col_spacing = 0.003)
fig
344/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
344/2:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = { 0: 'value'}).reset_index()
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
344/3:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
344/4:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group")
fig
344/5:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD'
    rane = [0, 300])
fig
344/6:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD'
    range = [0, 300])
fig
344/7:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 300])
fig
344/8:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 150])
fig
344/9:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/10:
# regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]

fig = px.bar(Reg_of_int, x="Region", y="value", color="Burden sharing", barmode="group"
     facet_col = "Region",
    facet_col_wrap=5,
    height=350)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/11:
# regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]

fig = px.bar(Reg_of_int, x="Region", y="value", color="Burden sharing", barmode="group",
     facet_col = "Region",
    facet_col_wrap=5,
    height=350)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/12:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
    facet_col = "Region",
    facet_col_wrap=5,
    height=350)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/13:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
    facet_col = "Region",
    facet_col_wrap=5,
    height=900)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/14:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
    facet_col = "Region",
    facet_col_wrap=3,
    height=900)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/15:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
    facet_col = "Region",
    facet_col_wrap=3,
    height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/16:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
    facet_col = "Region",
    facet_col_wrap=3,
    height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 30])
fig
344/17:
# regional selection 

Reg_of_int= sums_graph [(sums_graph['Region'] == 'USA') 
                                | (sums_graph['Region'] == 'WEU') 
                                | (sums_graph['Region'] == 'CEU') 
                                |  (sums_graph['Region'] == 'JAP')]

fig = px.bar(Reg_of_int, x="Region", y="value", color="Burden sharing", barmode="group",
     facet_col = "Region",
    facet_col_wrap=5,
    height=350)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
344/18:
# regional selection 

Reg_of_int= sums_graph [(sums_graph['Region'] == 'USA') 
                                | (sums_graph['Region'] == 'WEU') 
                                | (sums_graph['Region'] == 'CEU') 
                                |  (sums_graph['Region'] == 'JAP')]

fig = px.bar(Reg_of_int, x="Region", y="value", color="Burden sharing", barmode="group",
     facet_col = "Region",
    facet_col_wrap=5,
    height=350)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 60])
fig
344/19:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 30])
fig
344/20:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 150])
fig
344/21:
# regional selection 

Reg_of_int= sums_graph [(sums_graph['Region'] == 'USA') 
                                | (sums_graph['Region'] == 'WEU') 
                                | (sums_graph['Region'] == 'CEU') 
                                |  (sums_graph['Region'] == 'JAP')]

fig = px.bar(Reg_of_int, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 60])
fig
340/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
340/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')
340/3:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
340/4:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
340/5:
MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
340/6:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
340/7:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_AP
339/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
339/2:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
339/3:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
339/4:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline
339/5:
#sums

MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100 ['Burden sharing'] = 'GF' 

MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100 ['Burden sharing'] = 'GDR' 

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100 ['Burden sharing'] = 'AP'

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100 ['Burden sharing'] = 'IEPC'

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100 ['Burden sharing'] = 'PCC'


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames2100, axis=0)
MCGs2100.to_csv('MCG 2100.csv')
339/6:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
339/7:
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_AP


MCG_GF = MCG_GF.set_index("Region")
MCG_GDR = MCG_GDR.set_index("Region")
MCG_AP = MCG_AP.set_index("Region")
MCG_IEPC = MCG_IEPC.set_index("Region")
MCG_PCC = MCG_PCC.set_index("Region")
339/8:
MCG_GF_2100_line = MCG_GF.reset_index().melt('Region')
MCG_GF_2100_line = MCG_GF_2100_line[MCG_GF_2100_line.variable< '2101']
MCG_GF_2100_line ['Burden sharing'] = 'GF' 

MCG_GDR_2100_line = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100_line = MCG_GDR_2100_line[MCG_GDR_2100_line.variable< '2101']
MCG_GDR_2100_line ['Burden sharing'] = 'GDR' 

MCG_AP_2100_line = MCG_AP.reset_index().melt('Region')
MCG_AP_2100_line = MCG_AP_2100_line[MCG_AP_2100_line.variable< '2101']
MCG_AP_2100_line ['Burden sharing'] = 'AP'

MCG_IEPC_2100_line = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100_line = MCG_IEPC_2100_line[MCG_IEPC_2100_line.variable< '2101']
MCG_IEPC_2100_line ['Burden sharing'] = 'IEPC'

MCG_PCC_2100_line = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100_line = MCG_PCC_2100_line[MCG_PCC_2100_line.variable< '2101']
MCG_PCC_2100_line ['Burden sharing'] = 'PCC'


frames2100_line = [MCG_GF_2100_line, MCG_IEPC_2100_line, MCG_PCC_2100_line, MCG_AP_2100_line, MCG_GDR_2100_line, ] 
MCGs2100_line = pd.concat(frames2100_line, axis=0)
339/9:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline
342/15:
# plots costs

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"


mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
342/16:
# plots costs

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"


mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="TUSD/year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
342/17:
# plots costs

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"


mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig.update_yaxes(
    title="TUSD/year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig
339/10:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline

figline.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
figline.update_yaxes(
    title="TUSD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
figline
339/11:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline

figline.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
figline.update_yaxes(
    col =1,title="TUSD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
figline
339/12:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation cost gap burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline

figline.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
figline.update_yaxes(
    col =1,title="TUSD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
figline
339/13:
figline = px.line(
    MCGs2100_line,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation cost gap burden sharing regime 2020-2100',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
figline

figline.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
figline.update_yaxes(
    col =1,title="TUSD", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
figline
339/14:
#sums

MCG_GF_2100 = MCG_GF.reset_index().melt('Region')
MCG_GF_2100 = MCG_GF_2100[MCG_GF_2100.variable< '2101']
MCG_GF_2100 = MCG_GF_2100.pivot(index='Region', columns='variable')
MCG_GF_2100 = MCG_GF_2100.sum(axis=1).to_frame()
MCG_GF_2100 = MCG_GF_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_2100 ['Burden sharing'] = 'GF' 

MCG_GDR_2100 = MCG_GDR.reset_index().melt('Region')
MCG_GDR_2100 = MCG_GDR_2100[MCG_GDR_2100.variable< '2101']
MCG_GDR_2100 = MCG_GDR_2100.pivot(index='Region', columns='variable')
MCG_GDR_2100 = MCG_GDR_2100.sum(axis=1).to_frame()
MCG_GDR_2100 = MCG_GDR_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_2100 ['Burden sharing'] = 'GDR' 

MCG_AP_2100 = MCG_AP.reset_index().melt('Region')
MCG_AP_2100 = MCG_AP_2100[MCG_AP_2100.variable< '2101']
MCG_AP_2100 = MCG_AP_2100.pivot(index='Region', columns='variable')
MCG_AP_2100 = MCG_AP_2100.sum(axis=1).to_frame()
MCG_AP_2100 = MCG_AP_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_2100 ['Burden sharing'] = 'AP'

MCG_IEPC_2100 = MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_2100 = MCG_IEPC_2100[MCG_IEPC_2100.variable< '2101']
MCG_IEPC_2100 = MCG_IEPC_2100.pivot(index='Region', columns='variable')
MCG_IEPC_2100 = MCG_IEPC_2100.sum(axis=1).to_frame()
MCG_IEPC_2100 = MCG_IEPC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_2100 ['Burden sharing'] = 'IEPC'

MCG_PCC_2100 = MCG_PCC.reset_index().melt('Region')
MCG_PCC_2100 = MCG_PCC_2100[MCG_PCC_2100.variable< '2101']
MCG_PCC_2100 = MCG_PCC_2100.pivot(index='Region', columns='variable')
MCG_PCC_2100 = MCG_PCC_2100.sum(axis=1).to_frame()
MCG_PCC_2100 = MCG_PCC_2100.reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_2100 ['Burden sharing'] = 'PCC'


frames2100 = [MCG_GF_2100, MCG_IEPC_2100, MCG_PCC_2100, MCG_AP_2100, MCG_GDR_2100, ] 
MCGs2100 = pd.concat(frames2100, axis=0)
MCGs2100.to_csv('MCG 2100.csv')
339/15:
fig0 = px.scatter(
    MCGs2100, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' Mitigation cost gap per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
fig0
339/16:
fig0 = px.scatter(
    MCGs2100, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' Mitigation cost gap per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

 fig0.update_yaxes(
    title = "TUSD"
 )
fig0
339/17:
fig0 = px.scatter(
    MCGs2100, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' Mitigation cost gap per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

fig0.update_yaxes(
    title = "TUSD"
 )
fig0
339/18:
MCG_APsum = MCG_AP.sum(axis=1).to_frame()
MCG_IEPCsum = MCG_IEPC.sum(axis=1).to_frame()
MCG_PCCsum = MCG_PCC.sum(axis=1).to_frame()
MCG_GDRsum = MCG_GDR.sum(axis=1).to_frame()
MCG_GFsum = MCG_GF.sum(axis=1).to_frame()

frames = [MCG_GFsum, MCG_IEPCsum, MCG_PCCsum, MCG_APsum, MCG_GDRsum, ] 
MCGs = pd.concat(frames, axis=1)
MCGs = MCGs.set_axis([ 'GF', 'IEPC','PCC', 'AP', 'GDR'], axis= 1)
MCGs = MCGs.reset_index()
MCGs.to_csv('MCG 2150.csv')
339/19:
MCGs_plot = px.scatter(MCGs,
                  x="Region",
                 y= [ 'GF', 'IEPC','PCC', 'AP', 'GDR'],
                  title = 'Mitigation Cost per burden sharing regime 2150', 
                 labels = {"variable":"Burden Sharing Regime"})



MCGs_plot.update_xaxes(
    title = "Region"
)

MCGs_plot.update_yaxes(
    title = "Mitigation Cost Gap",
   range = [-5,4],
)
MCGs_plot
339/20:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs GAP per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig
339/21:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs GAP per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig0.update_yaxes(
    title = "TUSD"
 )
339/22:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs GAP per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig.update_yaxes(
    title = "TUSD"
 )
339/23:

MCG_GF_g = MCG_GF.reset_index().melt('Region')
MCG_GF_g ['Burden sharing'] = 'GF'
MCG_GDR_g = MCG_GDR.reset_index().melt('Region')
MCG_GDR_g ['Burden sharing'] = 'GDR'
MCG_AP_g =MCG_AP.reset_index().melt('Region')
MCG_AP_g ['Burden sharing'] = 'AP'
MCG_IEPC_g =MCG_IEPC.reset_index().melt('Region')
MCG_IEPC_g ['Burden sharing'] = 'IEPC'
MCG_PCC_g = MCG_PCC.reset_index().melt('Region')
MCG_PCC_g ['Burden sharing'] = 'PCC'

MGCS_Plots= [MCG_GF_g,MCG_GDR_g,MCG_AP_g,MCG_IEPC_g,MCG_PCC_g ]
MGCS_Plots= pd.concat(MGCS_Plots, axis=0)
MGCS_Plots

fig = px.line(
    MGCS_Plots,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs GAP per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig.update_yaxes(
    col = 1,title = "TUSD"
 )
346/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.to_csv("output/avoided_damages_ineqav.csv")
346/2:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?

mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs

#NPV 
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
346/3:
# global CBR 

Mitglobal = mitigation_costs.sum(axis= 0 )
ADglobal = avoided_damages.sum(axis=0)
346/4:
# global CBR 

Mitglobal = mitigation_costs.sum(axis= 0 )
ADglobal = avoided_damages.sum(axis=0)
ADglobal
346/5:
# global CBR 

Mitglobal = mitigation_costs.sum(axis= 0 )
ADglobal = avoided_damages.sum(axis=0)
Mitglobal
346/6:
# global CBR 

Mitglobal = mitigation_costs.sum(axis= 0 )
ADglobal = avoided_damages.sum(axis=0)

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)
346/7:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, row)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 )
ADglobal = avoided_damages.sum(axis=0)

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)
346/8:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 )
ADglobal = avoided_damages.sum(axis=0)

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)
346/9:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

# Mitglobal = npv(Mitglobal)
# ADglobal = npv(ADglobal)
Mit
346/10:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

# Mitglobal = npv(Mitglobal)
# ADglobal = npv(ADglobal)
Mitglobal
346/11:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)
346/12:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

Mitglobal
346/13:
# global CBR 

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit
346/14:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv(CBR_global_mit.csv)
346/15:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)

Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit.csv')
321/12:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
347/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
347/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
347/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
347/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
347/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
347/6:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_AP_2100.csv')
347/7:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
347/8:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
347/9:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_AP_2150
347/10:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_global_mit
347/11:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')

avoided_damages
347/12:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_AP_2100.csv')
CBR_global_mit
347/13:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_global_mit
347/14:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
347/15:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
347/16:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_AP_2100.csv')
CBR_global_mit
347/17:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
347/18:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_global_mit
322/9:
#new mitigation costs 2100

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")
GF_mitigationcosts = GF_mitigationcosts.reset_index()
GF_mitigationcosts= GF_mitigationcosts.melt('Region')
GF_mitigationcosts = GF_mitigationcosts[GF_mitigationcosts.variable<'2101']
GF_mitigationcosts = GF_mitigationcosts.pivot(index ='Region', columns='variable')


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')
# avoided_damages


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("NPV_GF.csv")

## CBR 
CBR_GF = AD/GF_NPV
CBR_GF = CBR_GF.to_frame().reset_index()
CBR_GF.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF.columns = ['Region','CBR']

CBR_GF.to_csv("CBR_GF.csv")
322/10:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = GF_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_GF2100.csv')
CBR_global_mit
322/11:
#new mitigation costs 2150 

GF_mitigationcosts = mitigation_costs + MCG 
GF_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')


#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GF_NPV= npv(GF_mitigationcosts)
AD = npv(avoided_damages)

GF_NPV.to_csv("NPV_GF_2150.csv")

## CBR 
CBR_GF_2150 = AD/GF_NPV
CBR_GF_2150= CBR_GF_2150.reset_index()
CBR_GF_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GF_2150.columns = ['Region','CBR']

CBR_GF_2150.to_csv("output\CBR_GF_2150.csv")

CBR_GF_2150
322/12:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = GF_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_GF2150.csv')
CBR_global_mit
323/9:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
323/10:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
323/11:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
348/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)

global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)

regional_allowance_ATP= pd.read_csv('allowance_AP.csv')

regional_allowance_ATP =regional_allowance_ATP.set_index('Region')
rci = pd.read_csv('rci 2020 2030.csv')
rci.set_index('Region', inplace = True)
rci2020 = rci["2020"]/rci["2020"].sum()
rci2030 = rci["2030"]/rci["2030"].sum()
rci2020.to_frame()
rci2030.to_frame()
348/2:
#dataframe

rci_df = pd.DataFrame({

    year: rci2020

    for year in global_baseline.index

})

# allowance before 2030
alGDR_2030 = mitigation_baseline - (rci_df*(global_baseline-global_emissions))
regional_al_p1 = alGDR_2030.iloc[:, 0:2]
regional_al_p1
348/3:
#rci data frame 

rci_df2030 = pd.DataFrame({

    year: rci2030

    for year in global_population.index

})

rci_df2030
#allowance after 2030
years = global_emissions.index.astype(int)
percentage_GDR = ((2100 - years)/70)

al2100_gdr = mitigation_baseline- (global_baseline-global_emissions)*rci_df2030
al2100 = percentage_GDR * al2100_gdr + (1- percentage_GDR)*regional_allowance_ATP
al2100.sum(axis=0)
regional_al_p2 = al2100.iloc [:, 2:]
348/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
348/5:
regional_allowance_GDR = pd.concat([regional_al_p1, regional_al_p2],axis =1)
regional_allowance_GDR.sum(axis=0)
regional_allowance_GDR.to_csv("allowance_GDR.csv")
regional_allowance_GDR
348/6:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance_GDR
EAG 

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions
Emission_reduction

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)
GER

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG

MCG.to_csv("output\MCG_GDR.csv")
348/7:
#new mitigation costs

GDR_mitigationcosts = mitigation_costs + MCG 

GDR_mitigationcosts.to_csv("output\mitig_costs_GDR.csv")

GDR_mitigationcosts = GDR_mitigationcosts.reset_index().melt('Region')
GDR_mitigationcosts = GDR_mitigationcosts[GDR_mitigationcosts.variable< '2101']
GDR_mitigationcosts = GDR_mitigationcosts.pivot(index='Region', columns='variable',) 

#avoided damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)

GDR_NPV.to_csv("NPV_GDR.csv")

AD = npv(avoided_damages)

#CBR 

CBR_GDR = AD/GDR_NPV
CBR_GDR = CBR_GDR.to_frame().reset_index()
CBR_GDR.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR.columns = ['Region','CBR']

CBR_GDR.to_csv("output\CBR_GDR.csv")
348/8:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = GDR_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_GDR2100.csv')
CBR_global_mit
348/9:
#new mitigation costs 2150 

GDR_mitigationcosts= mitigation_costs + MCG 
GDR_mitigationcosts.to_csv("output\mitig_costs_GF.csv")

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


GDR_NPV= npv(GDR_mitigationcosts)

GDR_NPV.to_csv("NPV_GDR_2150.csv")
AD = npv(avoided_damages)

## CBR 
CBR_GDR_2150 = AD/GDR_NPV
CBR_GDR_2150= CBR_GDR_2150.reset_index()
CBR_GDR_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_GDR_2150.columns = ['Region','CBR']

CBR_GDR_2150.to_csv("output\CBR_GDR_2150.csv")
348/10:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = GDR_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_GDR2150.csv')
CBR_global_mit
325/6:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
349/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
349/2:
#piechart current emissions distribution 

current_emissions = mitigation_emissions["2020"]
current_emissions

current_emissions= current_emissions.to_frame().reset_index()
current_emissions.rename(columns = {'index':'Region'},
          inplace = True )
current_emissions.columns = ['Region','emissions']

fig = px.pie(current_emissions, values='emissions', names='Region', title='emissions share per region in 2020 (baseline)')
fig.show()

fig.write_image("baseline emissions 2020.svg")
fig.write_image("baseline emissions 2020.png")
349/3:
## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_emissions

## world population 

global_population = mitigation_population.sum(axis=0)
global_population

#regional allowance IEPC
regional_allowance= mitigation_population/global_population*global_emissions
regional_allowance 
regional_allowance.to_csv("allowance_IEPC.csv")

# #RA 
# allowance_2020 = regional_allowance["2020"]

# allowance_2020= allowance_2020.to_frame().reset_index()
# allowance_2020.rename(columns = {'index':'Region'},
#         inplace = True )
# allowance_2020.columns = ['Region','emissions']

# IEPC = allowance_2020

# fig = px.pie(allowance_2020, values='emissions', names='Region', title='emissions per region in 2020 (IEPC)')
# fig.show()
# fig.write_image("IEPC emissions 2020.svg")
# fig.write_image("IEPC emissions 2020.png")
349/4:
# Emission allowance gap calculation 

EAG = mitigation_emissions - regional_allowance

#Emission reduction 

Emission_reduction= mitigation_baseline-mitigation_emissions

#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)

#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_IEPC.csv")
349/5:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC_NPV.to_csv("NPV_IEPC.csv")
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
349/6:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = IEPC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_IEPC2150.csv')
CBR_global_mit
349/7:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = IPC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_IEPC2150.csv')
CBR_global_mit
349/8:
# #new mitigation costs 2150 

IPC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC_NPV.to_csv("NPV_PC_2100.csv")
AD= npv(avoided_damages)

## CBR 
CBR_IEPC_2150 = AD/IEPC_NPV
CBR_IEPC_2150= CBR_IEPC_2150.reset_index()
CBR_IEPC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC_2150.columns = ['Region','CBR']

CBR_IEPC_2150.to_csv("output\CBR_IEPC_2150.csv")

CBR_IEPC_2150
349/9:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = IPC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_IEPC2150.csv')
CBR_global_mit
350/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px
import plotly.graph_objects as go 

#data 
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]


GF2020 = pd.read_csv('GF2020.csv')


## total emissions per year 

global_emissions = mitigation_emissions.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
350/2:


# min max 
time_in_percentage = (global_emissions.index.astype(int) - 2020) / (2050 - 2020)
minimum= np.minimum(time_in_percentage,1)
maximum = np.maximum(1 - time_in_percentage, 0)

minimum= np.asarray(minimum)
maximum = np.asarray(maximum)
# calculations
population = mitigation_population/global_population
GF2020 =GF2020.drop(columns = ["Region"])
GF2020= np.asarray(GF2020)

PCC = global_emissions*((minimum* population) + (maximum*(mitigation_emissions/global_emissions))) 
PCC.to_csv("PCC.csv")
PCC
350/3:
# Emission allowance gap calculation 

EAG = mitigation_emissions - PCC

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG.to_csv("output\MCG_PCC.csv")
350/4:
#new mitigation costs

PCC_mitigationcosts = mitigation_costs + MCG
PCC_mitigationcosts.to_csv('output/mitig_costs_PCC') 

PCC_mitigationcosts = PCC_mitigationcosts.reset_index().melt('Region')
PCC_mitigationcosts = PCC_mitigationcosts[PCC_mitigationcosts.variable< '2101']
PCC_mitigationcosts = PCC_mitigationcosts.pivot(index='Region', columns='variable',) 


# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
PCC_NPV.to_csv("NPV_PCC.csv")

AD = npv(avoided_damages)

#CBR
CBR_PCC = AD/PCC_NPV
CBR_PCC = CBR_PCC.to_frame().reset_index()
CBR_PCC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC.columns = ['Region','CBR']

CBR_PCC.to_csv("output\CBR_PCC.csv")
CBR_PCC
350/5:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = PCC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_PCC2100.csv')
CBR_global_mit
350/6:
# #new mitigation costs 2150 

PCC_mitigationcosts= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


PCC_NPV= npv(PCC_mitigationcosts)
PCC_NPV.to_csv("NPV_PCC_2100.csv")
AD= npv(avoided_damages)

## CBR 
CBR_PCC_2150 = AD/PCC_NPV
CBR_PCC_2150= CBR_PCC_2150.reset_index()
CBR_PCC_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_PCC_2150.columns = ['Region','CBR']

CBR_PCC_2150.to_csv("output\CBR_PCC_2150.csv")

CBR_PCC_2150
350/7:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = PPC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_PPC2150.csv')
CBR_global_mit
350/8:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = PCC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_PPC2150.csv')
CBR_global_mit
349/10:
#new mitigation costs

IPC_mitigationcosts = mitigation_costs + MCG 

IPC_mitigationcosts.to_csv("output\mitig_costs_IEPC.csv")

IPC_mitigationcosts = IPC_mitigationcosts.reset_index().melt('Region')
IPC_mitigationcosts = IPC_mitigationcosts[IPC_mitigationcosts.variable < '2101']
IPC_mitigationcosts = IPC_mitigationcosts.pivot(index ='Region', columns='variable')

# avoided_damages

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)                                              

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


IEPC_NPV= npv(IPC_mitigationcosts)
IEPC_NPV.to_csv("NPV_IEPC.csv")
AD = npv(avoided_damages)

#CBR
CBR_IEPC = AD/IEPC_NPV
CBR_IEPC = CBR_IEPC.to_frame().reset_index()
CBR_IEPC.rename(columns = {'index':'Region'},
          inplace = True )
CBR_IEPC.columns = ['Region','CBR']

CBR_IEPC.to_csv("output\CBR_IEPC.csv")

CBR_IEPC
349/11:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = IPC_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_IEPC2100.csv')
CBR_global_mit
346/16:
mitigationcosts2100 = mitigationcosts.reset_index()
mitigationcosts2100= mitigationcosts2100.melt('Region')
mitigationcosts2100 = mitigationcosts2100[mitigationcosts2100.variable<'2101']
mitigationcosts2100 = mitigationcosts2100.pivot(index ='Region', columns='variable')

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']
avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit2100.csv')
346/17:
mitigation2100 = mitigation.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100 = mitigation2100[mitigationcosts2100.variable<'2101']
mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']
avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit2100.csv')
346/18:
mitigation2100 = mitigation.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100 = mitigation2100[mitigation2100.variable<'2101']
mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']
avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit2100.csv')
352/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.to_csv("output/avoided_damages_ineqav.csv")
352/2:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?

mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs

#NPV 
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
352/3:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR.to_csv("output/cbr_inequal_aversion.csv")
CBR
352/4:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit.csv')
352/5:
mitigation2100 = mitigation.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100 = mitigation2100[mitigation2100.variable<'2101']
mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']
avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit2100.csv')
352/6:
mitigation2100 = mitigation.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100
# mitigation2100 = mitigation2100[mitigation2100.variable<'2101']
# mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages = avoided_damages.melt('Region')
# avoided_damages = avoided_damages[avoided_damages.variable< '2101']
# avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


# discount_rate = 0.03

# def npv(dataframe):
#     NPV_values=pd.Series({
#         column: npf.npv(discount_rate, values)
#         for column, values in dataframe.iteritems()
#     })
#     return NPV_values



# Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
# ADglobal = avoided_damages.sum(axis=0).to_frame()

# Mitglobal = npv(Mitglobal)
# ADglobal = npv(ADglobal)

# CBR_global_mit = ADglobal/Mitglobal
# CBR_global_mit.to_csv('CBR_global_mit2100.csv')
352/7:
mitigation = mitigation.loc['abatement_costs']
mitigation2100 = mitigation.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100
# mitigation2100 = mitigation2100[mitigation2100.variable<'2101']
# mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

# avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
# avoided_damages = avoided_damages.melt('Region')
# avoided_damages = avoided_damages[avoided_damages.variable< '2101']
# avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


# discount_rate = 0.03

# def npv(dataframe):
#     NPV_values=pd.Series({
#         column: npf.npv(discount_rate, values)
#         for column, values in dataframe.iteritems()
#     })
#     return NPV_values



# Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
# ADglobal = avoided_damages.sum(axis=0).to_frame()

# Mitglobal = npv(Mitglobal)
# ADglobal = npv(ADglobal)

# CBR_global_mit = ADglobal/Mitglobal
# CBR_global_mit.to_csv('CBR_global_mit2100.csv')
352/8:
mitigation = mitigation.loc['abatement_costs']
mitigation2100 = mitigation.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100 = mitigation2100[mitigation2100.variable<'2101']
mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']
avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit2100.csv')
353/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline = baseline.loc["damage_costs"]
damage_costs_baseline = damage_costs_baseline * baseline.loc["GDP_gross"]

damage_costs_baseline

#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation = mitigation.loc["damage_costs"]
damage_costs_mitigation = damage_costs_mitigation * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages.to_csv("output/avoided_damages_ineqav.csv")
353/2:
# calculation of the NPV of benefits
# questions: need to be turned into arrays? Results per region? The calcultions need to be done by colum? if by colum, does it need to be put in a 2D array? 
discount_rate = 0.03

#NPV_benefits = npf.npv(discount_rate, avoided_damages) works but need to select the row manually 
# thus put in a fuction where this is done automatically and yields a table?

mitigation_costs = mitigation.loc['abatement_costs']
mitigation_costs

#NPV 
def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values

Mit= npv(mitigation_costs)
AD = npv(avoided_damages)
353/3:
CBR = AD/Mit
CBR = CBR.to_frame().reset_index()
CBR.rename(columns = {'index':'Region'},
          inplace = True )
CBR.columns = ['Region','CBR']

CBR.to_csv("output/cbr_inequal_aversion.csv")
CBR
353/4:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation_costs.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit.csv')
353/5:
mitigation2100 = mitigation.loc['abatement_costs']
mitigation2100 = mitigation2100.reset_index()
mitigation2100= mitigation2100.melt('Region')
mitigation2100 = mitigation2100[mitigation2100.variable<'2101']
mitigation2100 = mitigation2100.pivot(index ='Region', columns='variable')

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']
avoided_damages = avoided_damages.pivot(index ='Region', columns='variable')


discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values



Mitglobal = mitigation2100.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit2100.csv')
351/1:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
351/2:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
351/3:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region

CBR_IEPC
351/4:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
351/5:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
351/6:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)#.set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
351/7:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
CBRs
351/8:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)
351/9:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
351/10: CBR_global_AP
351/11: CBR_global_AP
351/12:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(column = ['Unnamed:0'])
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
351/13:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0'], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
351/14: CBR_global_AP
351/15:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
351/16: CBR_global_AP
351/17:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0'], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
354/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
354/2:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0'], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
354/3: CBR_global_AP
354/4:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")#.drop(['Unnamed:0'], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
354/5: CBR_global_AP
354/6:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0'], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
354/7:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
354/8:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv").drop(['Unnamed:0 '], axis =1)
354/9:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").#drop(['Unnamed:0 '], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv").drop(['Unnamed:0 '], axis =1)
354/10:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")#drop(['Unnamed:0 '], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv").drop(['Unnamed:0 '], axis =1)
354/11: CBR_global_GF
354/12:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")#drop(['Unnamed:0 '], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv").drop(['Unnamed:0 '], axis =0)
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv").drop(['Unnamed:0 '], axis =1)
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv").drop(['Unnamed:0 '], axis =1)
354/13:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop([0], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv").drop([0], axis =1)
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv").drop([0], axis =1)
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv").drop([0], axis =1)
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv").drop([0], axis =1)
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv").drop([0], axis =1)
355/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
355/2:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv").drop([0], axis =1)
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv").drop([0], axis =1)
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv").drop([0], axis =1)
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv").drop([0], axis =1)
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv").drop([0], axis =1)
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv").drop([0], axis =1)
355/3:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
355/4: CBR_global_GF
355/5:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR]
CBRs2100 = pd.concat(CBRs2100)
355/6:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR]
CBRs2100 = pd.concat(CBRs2100)
CBRs2100
355/7:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR]
CBRs2100 = pd.concat(CBRs2100)
CBRs2100
355/8:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR]
CBRs2100 = pd.concat(CBRs2100, axis =1)
CBRs2100
355/9:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_AP
# CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
# CBR_global_GF ['Burden sharing'] = "GF"
# CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
# CBR_global_IEPC ['Burden sharing'] = "IEPC"
# CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
# CBR_global_PCC ['Burden sharing'] = "PCC"
# CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
# CBR_global_GDR ['Burden sharing'] = "GDR"
# CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
# CBR_global_mit ['Burden sharing'] = "none"
355/10:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
CBR_global_mit ['Burden sharing'] = "none"
355/11:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR]
CBRs2100 = pd.concat(CBRs2100, axis =1)
CBRs2100
355/12:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR]
CBRs2100 = pd.concat(CBRs2100, axis =0)
CBRs2100
355/13:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR, CBR_global_mit]
CBRs2100 = pd.concat(CBRs2100, axis =0)
CBRs2100
355/14:
CBR_global_AP = pd.read_csv("CBR_global_AP_2150.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2150.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2150.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2150.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2150.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit2150.csv")
CBR_global_mit ['Burden sharing'] = "none"
355/15:
CBR_global_AP = pd.read_csv("CBR_global_mit_AP2150.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2150.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2150.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2150.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2150.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit2150.csv")
CBR_global_mit ['Burden sharing'] = "none"
355/16:
CBR_global_AP = pd.read_csv("CBR_global_mit_AP2150.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2150.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2150.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PPC2150.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2150.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit2150.csv")
CBR_global_mit ['Burden sharing'] = "none"
355/17:
CBR_global_AP = pd.read_csv("CBR_global_mit_AP2150.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2150.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2150.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PPC2150.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2150.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit.csv")
CBR_global_mit ['Burden sharing'] = "none"
355/18:
CBRs2150 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR, CBR_global_mit]
CBRs2150 = pd.concat(CBRs2150, axis =0)
CBRs2150
356/1:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts_.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_global_mit
356/2:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts_)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
361/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
361/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
361/3:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
361/4:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
361/5:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
361/6:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
361/7:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_AP_2100.csv')
CBR_global_mit
361/8:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts_)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
361/9:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 


# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts_)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
361/10:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts_.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_global_mit
364/1:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum ]
sums = pd.concat(sums)


sums.to_csv('allowances per capita summed 2150')

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
364/2:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('allowance_AP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
364/3:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums100.to_csv('sums allowances per capita 2100.csv')

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
364/4:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum ]
sums = pd.concat(sums)


sums.to_csv('allowances per capita summed 2150.csv')

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
365/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('allowance_AP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
365/2:
# per capit sums over time to determine the total emissions per person until 2100
GF_al_pc_sum100= (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc_sum100 = GF_al_pc_sum100[GF_al_pc_sum100.variable< '2100']
GF_al_pc_sum100 = GF_al_pc_sum100.pivot(index='Region', columns='variable')
GF_al_pc_sum100 = GF_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GF_al_pc_sum100 ["Burden sharing"] = "GF"

GDR_al_pc_sum100 = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc_sum100 = GDR_al_pc_sum100[GDR_al_pc_sum100.variable< '2100']
GDR_al_pc_sum100 = GDR_al_pc_sum100.pivot(index='Region', columns='variable') 
GDR_al_pc_sum100 = GDR_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
GDR_al_pc_sum100 ["Burden sharing"] = "GDR"

AP_al_pc_sum100 = (al_ATP/mitigation_population).reset_index().melt("Region")
AP_al_pc_sum100 = AP_al_pc_sum100[AP_al_pc_sum100.variable< '2100']
AP_al_pc_sum100 = AP_al_pc_sum100.pivot(index='Region', columns='variable') 
AP_al_pc_sum100 = AP_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
AP_al_pc_sum100 ["Burden sharing"] = "AP"

IEPC_al_pc_sum100 = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc_sum100 =IEPC_al_pc_sum100[IEPC_al_pc_sum100.variable< '2100']
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.pivot(index='Region', columns='variable') 
IEPC_al_pc_sum100 =IEPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
IEPC_al_pc_sum100 ["Burden sharing"] = "IEPC"

PPC_al_pc_sum100 = (al_PCC/mitigation_population).reset_index().melt("Region")
PPC_al_pc_sum100 = PPC_al_pc_sum100[PPC_al_pc_sum100.variable< '2100']
PPC_al_pc_sum100 = PPC_al_pc_sum100.pivot(index='Region', columns='variable') 
PPC_al_pc_sum100 = PPC_al_pc_sum100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
PPC_al_pc_sum100 ["Burden sharing"] = "PCC"

al_BAU_pc_100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc_100 =al_BAU_pc_100[al_BAU_pc_100.variable< '2100']
al_BAU_pc_100 =al_BAU_pc_100.pivot(index='Region', columns='variable') 
al_BAU_pc_100 =al_BAU_pc_100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_BAU_pc_100 ["Burden sharing"] = "BAU"

al_mit_pc_2100 = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_mit_pc_2100 =al_mit_pc_2100[al_mit_pc_2100.variable< '2100']
al_mit_pc_2100 =al_mit_pc_2100.pivot(index='Region', columns='variable') 
al_mit_pc_2100 =al_mit_pc_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
al_mit_pc_2100 ["Burden sharing"] = "none"


sums100 = [GF_al_pc_sum100,IEPC_al_pc_sum100,PPC_al_pc_sum100, AP_al_pc_sum100, GDR_al_pc_sum100, al_mit_pc_2100]
sums100 = pd.concat(sums100)

sums100.to_csv('sums allowances per capita 2100.csv')

sums_plot100 = px.scatter(sums100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "allocations per capita in GT of CO2"
)
365/3:

# per capit sums over time to determine the total emissions per person until 2150 

GF_al_pc_sum = (al_GF/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GF_al_pc_sum ["Burden sharing"] = "GF"
GDR_al_pc_sum = (al_GDR/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
GDR_al_pc_sum ["Burden sharing"] = "GDR"
ATP_al_pc_sum = (al_ATP/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
ATP_al_pc_sum ["Burden sharing"] = "AP"
IEPC_al_pc_sum = (al_IEPC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
IEPC_al_pc_sum ["Burden sharing"] = "IEPC"
PCC_al_pc_sum = (al_PCC/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
PCC_al_pc_sum ["Burden sharing"] = "PCC"

al_BAU_pc_sum = (baseline_emissions/ baseline_population).reset_index()#.melt("Region")
al_BAU_pc_sum ["Burden sharing"] = 'BAU'


al_mit_pc_sum = (al_mit/mitigation_population).sum(axis=1).reset_index()#.melt("Region")
al_mit_pc_sum ["Burden sharing"] = "none"

sums = [GF_al_pc_sum,IEPC_al_pc_sum, PCC_al_pc_sum, ATP_al_pc_sum, GDR_al_pc_sum, al_mit_pc_sum ]
sums = pd.concat(sums)


sums.to_csv('allowances per capita summed 2150.csv')

sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "allocations per capita in GT of CO2"
)

sums_plot
365/4:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1.update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
365/5:
Reg_of_int= regional_allowances[(regional_allowances['Region'] == 'BRA') 
                                | (regional_allowances['Region'] == 'SAF') 
                                | (regional_allowances['Region'] == 'RUS') 
                                |  (regional_allowances['Region'] == 'INDIA')
                                |  (regional_allowances['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(col=1, title="GtCO2/yr"
)
fig3
365/6:
GF_al_pc = (al_GF/mitigation_population).reset_index().melt("Region")
GF_al_pc ["Burden sharing"] = "GF"
GDR_al_pc = (al_GDR/mitigation_population).reset_index().melt("Region")
GDR_al_pc ["Burden sharing"] = "GDR"
ATP_al_pc = (al_ATP/mitigation_population).reset_index().melt("Region")
ATP_al_pc ["Burden sharing"] = "AP"
IEPC_al_pc = (al_IEPC/mitigation_population).reset_index().melt("Region")
IEPC_al_pc ["Burden sharing"] = "IEPC"
PCC_al_pc = (al_PCC/mitigation_population).reset_index().melt("Region")
PCC_al_pc ["Burden sharing"] = "PCC"

al_BAU_pc = (baseline_emissions/ baseline_population).reset_index().melt("Region")
al_BAU_pc ["Burden sharing"] = 'BAU'


al_mit_pc = (al_mit/mitigation_population).reset_index().melt("Region")
al_mit_pc ["Burden sharing"] = "none"
365/7:
frames = [GF_al_pc,  IEPC_al_pc, PCC_al_pc,  ATP_al_pc, GDR_al_pc,al_mit_pc,]
per_capita_allowance = pd.concat(frames, axis= 0 )

per_capita_allowance.to_csv('per capita allowances.csv')

per_capita_allowance = per_capita_allowance[per_capita_allowance.variable < '2101']
365/8:
fig2 = px.line(
    per_capita_allowance,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)
fig2.update_yaxes(col=1, title="T/capita/year")
365/9:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'NAF') 
                                | ( per_capita_allowance['Region'] == 'WAF') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                |  (per_capita_allowance['Region'] == 'RSAF')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig3 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year")

fig3.update_yaxes(col=1, title="T/capita/year")
365/10:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'BRA') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                | ( per_capita_allowance['Region'] == 'RUS') 
                                |  (per_capita_allowance['Region'] == 'INDIA')
                                |  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig3 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2150 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year")

fig3.update_yaxes(col=1, title="T/capita/year")
365/11:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'BRA') 
                                | ( per_capita_allowance['Region'] == 'SAF') 
                                | ( per_capita_allowance['Region'] == 'RUS') 
                                |  (per_capita_allowance['Region'] == 'INDIA')
                                |  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig3 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year")

fig3.update_yaxes(col=1, title="T/capita/year")
365/12:
Reg_of_inter=  per_capita_allowance[( per_capita_allowance['Region'] == 'USA') 
                                | ( per_capita_allowance['Region'] == 'WEU') 
                                | ( per_capita_allowance['Region'] == 'CEU') 
                                |  (per_capita_allowance['Region'] == 'JAP')]
                                #|  (per_capita_allowance['Region'] == 'CHN')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
                                #|  (per_capita_allowances['Region'] == 'BRA')]
    




fig3 = px.line(
    Reg_of_inter,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per capita per burden sharing regime for 2020-2100 in tonnes/capita/year',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year")

fig3.update_yaxes(col=1, title="T/capita/year")
367/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
367/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_AP
367/3:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
367/4:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
367/5:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/6:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/7:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing regime",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/8:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing regime",
    title = 'Mitigation Cost Gap for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/9:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing regime",
    title = 'Mitigation Cost Gap for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    col = 1,
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/10:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF
MCG_IEPC_sum = MCG_IEPC
MCG_PCC_sum = MCG_PCC
MCG_AP_sum = MCG_AP
MCG_GDR_sum = MCG_GDR_


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# # #data CBRs
# # CBR_GF = pd.read_csv ('CBR_GF.csv')
# # CBR_AP = pd.read_csv ('CBR_AP.csv')
# # CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# # CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# # CBRs = pd.read_csv('output')

MCG_AP_sum
367/11:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF
MCG_IEPC_sum = MCG_IEPC
MCG_PCC_sum = MCG_PCC
MCG_AP_sum = MCG_AP
MCG_GDR_sum = MCG_GDR


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# # #data CBRs
# # CBR_GF = pd.read_csv ('CBR_GF.csv')
# # CBR_AP = pd.read_csv ('CBR_AP.csv')
# # CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# # CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# # CBRs = pd.read_csv('output')

MCG_AP_sum
367/12:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_IEPC_sum = MCG_IEPC
MCG_PCC_sum = MCG_PCC
MCG_AP_sum = MCG_AP
MCG_GDR_sum = MCG_GDR


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# # #data CBRs
# # CBR_GF = pd.read_csv ('CBR_GF.csv')
# # CBR_AP = pd.read_csv ('CBR_AP.csv')
# # CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# # CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# # CBRs = pd.read_csv('output')

MCG_GF_sum
367/13:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']

# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# # #data CBRs
# # CBR_GF = pd.read_csv ('CBR_GF.csv')
# # CBR_AP = pd.read_csv ('CBR_AP.csv')
# # CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# # CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# # CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/14:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# # #data CBRs
# # CBR_GF = pd.read_csv ('CBR_GF.csv')
# # CBR_AP = pd.read_csv ('CBR_AP.csv')
# # CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# # CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# # CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/15:
#sum of the MCGs 

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0)
367/16:
#sum of the MCGs 

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0)

sums2100
367/17:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0)

sums2100
367/18:
sums_plot100 = px.scatter(sums2100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'Mitigation Cost Gap until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "TUSD"
)
367/19:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0)

sums2100
367/20:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"


# MCG_AP = MCG_AP.melt('Region')
# MCG_AP ["Burden sharing regime"] = 'AP'
# MCG_IEPC = MCG_IEPC.melt('Region')
# MCG_IEPC ["Burden sharing regime"] = 'IEPC'
# MCG_GDR = MCG_GDR.melt('Region')
# MCG_GDR ["Burden sharing regime"] = 'GDR'
# MCG_GF = MCG_GF.melt('Region')
# MCG_GF ["Burden sharing regime"] = 'GF'
# MCG_PCC = MCG_PCC.melt('Region')
# MCG_PCC["Burden sharing regime"] = 'PCC'


# # #data CBRs
# # CBR_GF = pd.read_csv ('CBR_GF.csv')
# # CBR_AP = pd.read_csv ('CBR_AP.csv')
# # CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# # CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# # CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/21:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0)

sums2100
367/22:
sums_plot100 = px.scatter(sums2100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'Mitigation Cost Gap until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "TUSD"
)
367/23:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/24:
# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation Cost Gap until 2150"
# )

sums
367/25:
# sums_plot = px.scatter(sums, 
#                        x= 'Region',
#                        y= 'value', 
#                        color = 'Burden sharing',
#                        title = 'sum of the allowances per capita per region until 2100',
#                       labels = { "variable": "Burden Sharing Regime"})

# # CBRs_plot.update_xaxes(
# #    title = "Region"
# # )

# sums_plot.update_yaxes(
#    title = "Mitigation Cost Gap until 2150"
# )

sums.to_frame()
367/26:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/27:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= '0', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/28:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()
367/29:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= '0', 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/30:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/31:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/32:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/33:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
367/34:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
367/35:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing regime",
    title = 'Mitigation Cost Gap for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    col = 1,
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/36:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()
367/37:
sums_plot100 = px.scatter(sums2100, 
                       x= 'Region',
                       y= 'value', 
                       color = 'Burden sharing',
                       title = 'Mitigation Cost Gap until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot100.update_yaxes(
   title = "TUSD"
)
367/38:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/39:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/40:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"


MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/41:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_IEPC_sum ["Burden sharing"] = "IEPC"
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_PCC_sum ["Burden sharing"] = "PCC"
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_AP_sum ["Burden sharing"] = "AP"
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)
MCG_GDR_sum ["Burden sharing"] = "GDR"

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"IEPC
MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/42:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_IEPC_sum ["Burden sharing"] = "IEPC"
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_PCC_sum ["Burden sharing"] = "PCC"
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_AP_sum ["Burden sharing"] = "AP"
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)
MCG_GDR_sum ["Burden sharing"] = "GDR"

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"
MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum_2100
367/43:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
367/44:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing regime",
    title = 'Mitigation Cost Gap for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    col = 1,
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
367/45:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()
367/46:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
367/47:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()

sums
367/48:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1)
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1)
MCG_IEPC_sum ["Burden sharing"] = "IEPC"
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1)
MCG_PCC_sum ["Burden sharing"] = "PCC"
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1)
MCG_AP_sum ["Burden sharing"] = "AP"
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1)
MCG_GDR_sum ["Burden sharing"] = "GDR"

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"
MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum
367/49:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1).to_frame()
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1).to_frame()
MCG_IEPC_sum ["Burden sharing"] = "IEPC"
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1).to_frame()
MCG_PCC_sum ["Burden sharing"] = "PCC"
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1).to_frame()
MCG_AP_sum ["Burden sharing"] = "AP"
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1).to_frame()
MCG_GDR_sum ["Burden sharing"] = "GDR"

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"
MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum
367/50:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
371/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
371/2:
#data MCGs
MCG_GF = pd.read_csv('MCG_GF.csv')
MCG_IEPC = pd.read_csv ('MCG_IEPC.csv')
MCG_PCC =  pd.read_csv ('MCG_PCC.csv')
MCG_AP = pd.read_csv ('MCP_AP.csv')
MCG_GDR = pd.read_csv ('MCG_GDR.csv')

MCG_GF_sum = MCG_GF.set_index('Region').sum(axis = 1).to_frame()
MCG_GF_sum ["Burden sharing"] = "GF"
MCG_IEPC_sum = MCG_IEPC.set_index('Region').sum(axis = 1).to_frame()
MCG_IEPC_sum ["Burden sharing"] = "IEPC"
MCG_PCC_sum = MCG_PCC.set_index('Region').sum(axis = 1).to_frame()
MCG_PCC_sum ["Burden sharing"] = "PCC"
MCG_AP_sum = MCG_AP.set_index('Region').sum(axis = 1).to_frame()
MCG_AP_sum ["Burden sharing"] = "AP"
MCG_GDR_sum = MCG_GDR.set_index('Region').sum(axis = 1).to_frame()
MCG_GDR_sum ["Burden sharing"] = "GDR"

MCG_GF_sum_2100 = MCG_GF.melt('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100[MCG_GF_sum_2100.variable< '2101']
MCG_GF_sum_2100 = MCG_GF_sum_2100.pivot(index='Region', columns='variable')
MCG_GF_sum_2100 = MCG_GF_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GF_sum_2100 ["Burden sharing"] = "GF"

MCG_IEPC_sum_2100 = MCG_IEPC.melt('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100[MCG_IEPC_sum_2100.variable< '2101']
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.pivot(index='Region', columns='variable')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_IEPC_sum_2100 ["Burden sharing"] = "IEPC"

MCG_PCC_sum_2100= MCG_PCC.melt('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100[MCG_PCC_sum_2100.variable< '2101']
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.pivot(index='Region', columns='variable')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_PCC_sum_2100 ["Burden sharing"] = "PCC"

MCG_AP_sum_2100 = MCG_AP.melt('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100[MCG_AP_sum_2100.variable< '2101']
MCG_AP_sum_2100 = MCG_AP_sum_2100.pivot(index='Region', columns='variable')
MCG_AP_sum_2100 = MCG_AP_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_AP_sum_2100 ["Burden sharing"] = "AP"

MCG_GDR_sum_2100 = MCG_GDR.melt('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100[MCG_GDR_sum_2100.variable< '2101']
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.pivot(index='Region', columns='variable')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sum(axis=1).to_frame().reset_index().melt('Region').drop(['variable'], axis =1)
MCG_GDR_sum_2100 ["Burden sharing"] = "GDR"
MCG_AP = MCG_AP.melt('Region')
MCG_AP ["Burden sharing regime"] = 'AP'
MCG_IEPC = MCG_IEPC.melt('Region')
MCG_IEPC ["Burden sharing regime"] = 'IEPC'
MCG_GDR = MCG_GDR.melt('Region')
MCG_GDR ["Burden sharing regime"] = 'GDR'
MCG_GF = MCG_GF.melt('Region')
MCG_GF ["Burden sharing regime"] = 'GF'
MCG_PCC = MCG_PCC.melt('Region')
MCG_PCC["Burden sharing regime"] = 'PCC'


# #data CBRs
# CBR_GF = pd.read_csv ('CBR_GF.csv')
# CBR_AP = pd.read_csv ('CBR_AP.csv')
# CBR_IEPC = pd.read_csv ('CBR_IEPC.csv')
# CBR_PCC = pd.read_csv ('CBR_PCC.csv')

# CBRs = pd.read_csv('output')

MCG_GF_sum
371/3:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
371/4:
frames = [ MCG_GF , MCG_IEPC, MCG_PCC,MCG_AP, MCG_GDR,]
MCGs = pd.concat(frames, axis =0)
371/5:
#MCGs= MCGs[MCGs.variable < '2101']

MCGs_plot = px.line(MCGs,
                x="variable",
                y= "value",
                color = "Burden sharing regime",
                facet_col = "Region",
                facet_col_wrap=5,
                height=900,
                title = 'Mitigation Cost Gap per region per burden sharing regime for 2020-2150',) 



# MCGs.update_xaxes(
#     title = "Region"
# )

# MCGs.update_yaxes(
#     title = "Mitigation Cost Gap",
#    range = [-10,3],
# )
MCGs_plot
371/6:
#regional selection 

Reg_of_int=MCGs[(MCGs['Region'] == 'USA') 
                | (MCGs['Region'] == 'WEU') 
                | (MCGs['Region'] == 'CEU') 
                |  (MCGs['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing regime",
    title = 'Mitigation Cost Gap for 2020-2150 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    col = 1,
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
371/7:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()

sums
371/8:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'sum of the allowances per capita per region until 2100',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "Mitigation Cost Gap until 2150"
)
371/9:
sums_plot = px.scatter(sums, 
                       x= 'Region',
                       y= 0, 
                       color = 'Burden sharing',
                       title = 'Mitigation Cost Gap until 2150',
                      labels = { "variable": "Burden Sharing Regime"})

# CBRs_plot.update_xaxes(
#    title = "Region"
# )

sums_plot.update_yaxes(
   title = "TUSD"
)
371/10:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()

sums.to_csv('output\MCGs2150.csv')
371/11:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()

sums.to_csv('MCGs2150.csv')
371/12:
#sum of the MCGs 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')

MCG_GF_sum_2100 = MCG_GF_sum_2100.set_index('Region')
MCG_GF_sum_2100 = MCG_GF_sum_2100.join(Image_region)
MCG_GF_sum_2100 = MCG_GF_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()


MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.set_index('Region')
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.join(Image_region)
MCG_IEPC_sum_2100 = MCG_IEPC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_PCC_sum_2100 = MCG_PCC_sum_2100.set_index('Region')
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.join(Image_region)
MCG_PCC_sum_2100 = MCG_PCC_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_AP_sum_2100 = MCG_AP_sum_2100.set_index('Region')
MCG_AP_sum_2100 = MCG_AP_sum_2100.join(Image_region)
MCG_AP_sum_2100 = MCG_AP_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

MCG_GDR_sum_2100 = MCG_GDR_sum_2100.set_index('Region')
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.join(Image_region)
MCG_GDR_sum_2100 = MCG_GDR_sum_2100.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sums2100 = [MCG_GF_sum_2100, MCG_IEPC_sum_2100, MCG_PCC_sum_2100, MCG_AP_sum_2100, MCG_GDR_sum_2100]
sums = [MCG_GF_sum, MCG_IEPC_sum, MCG_PCC_sum, MCG_IEPC_sum,MCG_AP_sum, MCG_GDR_sum]

sums2100= pd.concat(sums2100, axis =0)
sums= pd.concat(sums, axis =0).reset_index()

sums.to_csv('MCGs2150.csv')
sums2100.to_csv('MCGs2100.csv')
372/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
372/2:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = { 0: 'value'}).reset_index()
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
372/3:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
372/4:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 150])
fig
372/5:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 200])
fig
372/6:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
372/7:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 300])
fig
372/8:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 350])
fig
372/9:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",)
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
372/10:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
            title = "Cost per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
372/11:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 1)

sums_graph
373/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
373/2:
#data 

avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')
avoided_damages = avoided_damages.sum(axis =1 ).to_frame().rename(columns = { 0: 'value'}).reset_index()
avoided_damages ["Burden sharing"] = "AD"

costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')

avoided_damages
373/3:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 1)

sums_graph
373/4:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
            title = "Cost per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
373/5:
# regional selection 

Reg_of_int= sums_graph [(sums_graph['Region'] == 'USA') 
                                | (sums_graph['Region'] == 'WEU') 
                                | (sums_graph['Region'] == 'CEU') 
                                |  (sums_graph['Region'] == 'JAP')]

fig = px.bar(Reg_of_int, x="Region", y="value", color="Burden sharing", barmode="group")
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 60])
fig
373/6:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
373/7:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
            title = "Cost per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
373/8:
# sum of the costs 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR]#, avoided_damages]
sums_graph = pd.concat(sums, axis = 0)

sums_graph
373/9:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
            title = "Cost per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 100])
fig
373/10:
fig = px.bar(sums_graph, x="Region", y="value", color="Burden sharing", barmode="group",
            title = "Cost per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'TUSD',
    range = [0, 20])
fig
374/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
374/2:
#data

CBR_GF = pd.read_csv('CBR_GF.csv')
CBR_IEPC = pd.read_csv('CBR_IEPC.csv')
CBR_PCC = pd.read_csv('CBR_PCC.csv')
CBR_AP = pd.read_csv('CBR_AP.csv')
CBR_GDR = pd.read_csv('CBR_GDR.csv')

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')


Image_region =  pd.read_csv('Image_region.csv')
Image_region = Image_region.set_index('Region').drop(columns={'Unnamed: 0'})

Image_region
374/3:

CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF = CBR_GF.join(Image_region)
CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_IEPC = CBR_IEPC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC = CBR_IEPC.join(Image_region)
CBR_IEPC = CBR_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_PCC = CBR_PCC.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC = CBR_PCC.join(Image_region)
CBR_PCC = CBR_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_AP = CBR_AP.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP = CBR_AP.join(Image_region)
CBR_AP = CBR_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

CBR_GDR = CBR_GDR.drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR = CBR_GDR.join(Image_region)
CBR_GDR = CBR_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
374/4:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
CBRs
374/5:
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)#.set_index('Region')
CBR_mit[ "Burden sharing regime"] = 'none'
374/6:
CBR_GF ["Burden sharing regime"] = 'GF'
CBR_IEPC ["Burden sharing regime"] = 'IEPC'
CBR_PCC ["Burden sharing regime"] = 'PCC'
CBR_AP ["Burden sharing regime"] = 'AP'
CBR_GDR ["Burden sharing regime"] = 'GDR'


frames = [CBR_GF, CBR_IEPC, CBR_PCC, CBR_AP, CBR_GDR, CBR_mit]
CBRs = pd.concat(frames)
CBRs.to_csv('CBRs.csv')
CBRs
374/7:
#CBR 
CBRs_plot = px.scatter(CBRs, 
                       x= 'Region',
                       y= 'CBR', 
                       color = 'Burden sharing regime',
                       title = 'Cost Benefit Ratio per region per burden sharing regime for 2020-2100',
                      labels = { "variable": "Burden Sharing Regime"})

CBRs_plot.update_xaxes(
   title = "Region"
)

CBRs_plot.update_yaxes(
   title = "CBR"
)
374/8:
fig = px.bar(CBRs, x="Region", y="value", color="Burden sharing", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 20])
fig
374/9:
fig = px.bar(CBRs, x="Region", y="CBR", color="Burden sharing", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 20])
fig
374/10:
fig = px.bar(CBRs, x="Region", y="CBR", color="Burden sharing regime", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 20])
fig
374/11:
fig = px.bar(CBRs, x="Region", y="CBR", color="Burden sharing regime", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 30])
fig
374/12:
fig = px.bar(CBRs_2150, x="Region", y="CBR", color="Burden sharing regime", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 30])
fig
374/13:
CBR_GF_2150 = pd.read_csv('CBR_GF_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GF_2150 = CBR_GF_2150.join(Image_region)
CBR_GF_2150 = CBR_GF_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GF_2150["Burden sharing"] = "GF"


CBR_IEPC_2150 = pd.read_csv('CBR_IEPC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_IEPC_2150 = CBR_IEPC_2150.join(Image_region)
CBR_IEPC_2150 = CBR_IEPC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_IEPC_2150["Burden sharing"] = "IEPC"

CBR_PCC_2150 = pd.read_csv('CBR_PCC_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_PCC_2150 = CBR_PCC_2150.join(Image_region)
CBR_PCC_2150 = CBR_PCC_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_PCC_2150["Burden sharing"] = "PCC"

CBR_AP_2150 = pd.read_csv('CBR_AP_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_AP_2150 = CBR_AP_2150.join(Image_region)
CBR_AP_2150 = CBR_AP_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_AP_2150["Burden sharing"] = "AP"

CBR_GDR_2150 = pd.read_csv('CBR_GDR_2150.csv').drop(['Unnamed: 0'], axis =1).set_index('Region')
CBR_GDR_2150 = CBR_GDR_2150.join(Image_region)
CBR_GDR_2150 = CBR_GDR_2150.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()
CBR_GDR_2150["Burden sharing"] = "GDR"

CBR_mit = pd.read_csv('cbr_inequal_aversion.csv')
CBR_mit = CBR_mit.drop(['Unnamed: 0'], axis =1)
CBR_mit[ "Burden sharing"] = 'none'




frames = [CBR_GF_2150, CBR_IEPC_2150, CBR_PCC_2150, CBR_AP_2150, CBR_GDR_2150, CBR_mit]
CBRs_2150 = pd.concat(frames)
CBRs_2150.to_csv('CBRs_2150.csv')
374/14:
fig = px.bar(CBRs_2150, x="Region", y="CBR", color="Burden sharing regime", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 30])
fig
374/15:
fig = px.bar(CBRs_2150, x="Region", y="CBR", color="Burden sharing", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 30])
fig
374/16:
fig = px.bar(CBRs_2150, x="Region", y="CBR", color="Burden sharing", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 35])
fig
374/17:
fig = px.bar(CBRs_2150, x="Region", y="CBR", color="Burden sharing", barmode="group",
            title = "CBR per BSR and the avoided damages")
    #facet_col = "Region",
    #facet_col_wrap=3,
    #height=2000)
fig.update_yaxes(
    title = 'CBR',
    range = [0, 40])
fig
374/18:
CBR_global_AP = pd.read_csv("CBR_global_AP_2100.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2100.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2100.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PCC2100.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2100.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit2100.csv")
CBR_global_mit ['Burden sharing'] = "none"
374/19:
CBRs2100 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR, CBR_global_mit]
CBRs2100 = pd.concat(CBRs2100, axis =0)
CBRs2100
374/20:
CBR_global_AP = pd.read_csv("CBR_global_mit_AP2150.csv")
CBR_global_AP ['Burden sharing'] = "AP"
CBR_global_GF = pd.read_csv("CBR_global_mit_GF2150.csv")
CBR_global_GF ['Burden sharing'] = "GF"
CBR_global_IEPC = pd.read_csv("CBR_global_mit_IEPC2150.csv")
CBR_global_IEPC ['Burden sharing'] = "IEPC"
CBR_global_PCC = pd.read_csv("CBR_global_mit_PPC2150.csv")
CBR_global_PCC ['Burden sharing'] = "PCC"
CBR_global_GDR = pd.read_csv("CBR_global_mit_GDR2150.csv")
CBR_global_GDR ['Burden sharing'] = "GDR"
CBR_global_mit = pd.read_csv("CBR_global_mit.csv")
CBR_global_mit ['Burden sharing'] = "none"
374/21:
CBRs2150 = [CBR_global_GF, CBR_global_IEPC, CBR_global_PCC, CBR_global_AP, CBR_global_GDR, CBR_global_mit]
CBRs2150 = pd.concat(CBRs2150, axis =0)
CBRs2150
375/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px


baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
baseline_emissions = baseline.loc['regional_emissions']

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

#population
mitigation_population = mitigation.loc["population"]
baseline_population = baseline.loc["population"]


#mitigation allowances 

al_mit = mitigation.loc['regional_emissions']

al_GF = pd.read_csv('allowance GF 2020.csv')
al_PCC = pd.read_csv('PCC.csv')
al_IEPC = pd.read_csv('allowance_IEPC.csv')
al_ATP = pd.read_csv('allowance_AP.csv')
al_GDR = pd.read_csv("allowance_GDR.csv")

al_GF.set_index('Region', inplace  = True )
al_ATP.set_index('Region', inplace  = True )
al_GDR.set_index('Region', inplace  = True )
al_IEPC.set_index('Region', inplace  = True )
al_PCC.set_index('Region', inplace  = True )
375/2:
al_GF_re = al_GF.reset_index().melt("Region")
al_GF_re ["Burden sharing"] = "GF"
al_PCC_re = al_PCC.reset_index().melt("Region")
al_PCC_re ["Burden sharing"] = "PCC"
al_IEPC_re= al_IEPC.reset_index().melt("Region")
al_IEPC_re ["Burden sharing"] = "IEPC"
al_ATP_re = al_ATP.reset_index().melt("Region")
al_ATP_re ["Burden sharing"] = "AP"
al_GDR_re = al_GDR.reset_index().melt("Region")
al_GDR_re ["Burden sharing"] = "GDR"

al_BAU = baseline_emissions.reset_index().melt("Region")
al_BAU ["Burden sharing"] = 'BAU'

al_mit_re = al_mit.reset_index().melt("Region")
al_mit_re ["Burden sharing"] = "none"

frames_re = [ al_GF_re, al_IEPC_re, al_PCC_re, al_ATP_re, al_GDR_re, al_mit_re,]
regional_allowances = pd.concat(frames_re, axis = 0)

regional_allowances.to_csv( 'regional allowances.csv')

regional_allowances = regional_allowances[regional_allowances.variable < '2101']

fig1 = px.line(
    regional_allowances,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Allowances per burden sharing regime for 2020-2100 in GtCO2/yr',
    facet_col = "Region",
    facet_col_wrap=5,
    height=900
    
)


fig1.update_xaxes(
   title = "Year"
)

fig1.update_yaxes(
   title = "GtCO2/year"
)

fig1
377/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
377/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
377/3:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp
global_GF = costs_GF.sum(axis=0).to_frame()#/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()#/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()#/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
376/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
376/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
376/3:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)



sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.4]
)
fig0
376/4:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
376/5:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
376/6:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
376/7:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
376/8:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.4]
)
fig0
376/9:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
378/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
378/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
378/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
378/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
378/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
379/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
379/2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
379/3:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.4]
)
fig0
379/4:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
380/1:
# data import
import pandas as pd
import numpy as np
import numpy_financial as npf
import plotly.express as px

mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1).csv')
#in this scenario we don't account for the 1,8 target
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
#mitigation.select({"Variable": ["regional_emissions", "baseline", "abatement_costs"]}) werkt niet waarom? 

mitigation_emissions = mitigation.loc["regional_emissions"]
mitigation_baseline=  mitigation.loc["baseline"]
mitigation_costs= mitigation.loc["abatement_costs"]
mitigation_population = mitigation.loc["population"]
regional_gdp = mitigation.loc["GDP_gross"]
global_emissions = mitigation_emissions.sum(axis=0)
global_gdp = regional_gdp.sum(axis=0)
global_baseline= mitigation_baseline.sum(axis=0)
global_population = mitigation_population.sum(axis=0)
380/2:
#regional allowance ATP
region = (regional_gdp/mitigation_population)
globe = (global_gdp/global_population)
cube = region.sum(axis=0)/globe


reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_emissions
reduction_cube

# #correction factor

correction = reduction.sum(axis=0)/(global_baseline-global_emissions)

# #regional allowance 

# regional_allowance_ATP = mitigation_baseline- ((reduction_cube*mitigation_emissions)/correction)
# regional_allowance_ATP
# regional_allowance_ATP.sum(axis=0)
380/3:
#regional allowance ATP
cube = (regional_gdp/mitigation_population)/(global_gdp/global_population)
reduction_cube = np.cbrt(cube)
reduction = reduction_cube*((global_baseline-global_emissions)/global_baseline)*mitigation_baseline

reduction

# #correction factor

correction2 = reduction.sum(axis=0)/(global_baseline-global_emissions)
correction2
# #regional allowance 

regional_allowance_ATP = mitigation_baseline- (reduction/correction2)
regional_allowance_ATP.to_csv("allowance_AP.csv")

regional_allowance_ATP.sum(axis = 0)
380/4:
# Emission allowance gap calculation (all in GT of CO2?)

EAG = mitigation_emissions - regional_allowance_ATP

Emission_reduction= mitigation_baseline-mitigation_emissions


#Total mitigation costs per time step 
TMC = mitigation_costs.sum(axis=0)
 

#total emission reduction (does it have to be per region or year?)

GER = Emission_reduction.sum(axis=0)


#Mitigation cost gap 

MCG= EAG*TMC/GER
MCG
#MCG.to_csv("output\MCP_AP.csv")

# Calculations of the new mititgation costs
380/5:
#new mitigation costs

AP_mitigationcosts = mitigation_costs + MCG 
AP_mitigationcosts.to_csv('output/mitig_costs_AP.csv')

AP_mitigationcosts = AP_mitigationcosts.reset_index().melt('Region')
AP_mitigationcosts = AP_mitigationcosts[AP_mitigationcosts.variable< '2101']
AP_mitigationcosts = AP_mitigationcosts.pivot(index='Region', columns='variable',) 


# potentially plot one against the other in order to see per region for a time step the difference in costs? find a way to plot/ visually present the shift between the mitigation costs before they are redistributed and after
# avoided_damages
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv')
avoided_damages = avoided_damages.melt('Region')
avoided_damages = avoided_damages[avoided_damages.variable< '2101']

avoided_damages = avoided_damages.pivot(index='Region', columns='variable',)
avoided_damages

# #NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts)
AD = npv(avoided_damages)

CBR_AP = AD/AP_NPV
CBR_AP = CBR_AP.to_frame().reset_index()
CBR_AP.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP.columns = ['Region','CBR']
CBR_AP.to_csv("output\CBR_AP.csv")

AP_NPV.to_csv('NPV_AP.csv')
380/6:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_AP_2100.csv')
CBR_global_mit
380/7:
# #new mitigation costs 2150 

AP_mitigationcosts_= mitigation_costs + MCG 

AP_mitigationcosts_.to_csv('AP_mitigation_2150.csv')

# avoided damages 
avoided_damages = pd.read_csv('avoided_damages_ineqav.csv').set_index('Region')

#NPV 

discount_rate= 0.03 

def npv(dataframe):
    NPV_values=pd.Series({
        region: npf.npv(discount_rate, row)
        for region, row in dataframe.iterrows()
    })
    return NPV_values


AP_NPV= npv(AP_mitigationcosts_)
AD= npv(avoided_damages)

## CBR 
CBR_AP_2150 = AD/AP_NPV
CBR_AP_2150= CBR_AP_2150.reset_index()
CBR_AP_2150.rename(columns = {'index':'Region'},
          inplace = True )
CBR_AP_2150.columns = ['Region','CBR']

CBR_AP_2150.to_csv("output\CBR_AP_2150.csv")

AP_NPV.to_csv("NPV_AP_2150.csv")
380/8:
# global CBR 
discount_rate = 0.03

def npv(dataframe):
    NPV_values=pd.Series({
        column: npf.npv(discount_rate, values)
        for column, values in dataframe.iteritems()
    })
    return NPV_values

Mitglobal = AP_mitigationcosts_.sum(axis= 0 ).to_frame()
ADglobal = avoided_damages.sum(axis=0).to_frame()

Mitglobal = npv(Mitglobal)
ADglobal = npv(ADglobal)

CBR_global_mit = ADglobal/Mitglobal
CBR_global_mit.to_csv('CBR_global_mit_AP2150.csv')
CBR_global_mit
379/5:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
379/6:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.4]
)
fig0
379/7:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
379/8:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
379/9:
# plots costs

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"


mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig.update_yaxes(
    title="TUSD/year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig
383/1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
383/2:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP)#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP)#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#/GDP)#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP)#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP)#*100
mitigation_costs= mitigation_costs#/GDP)

GDP = GDP.reset_index().melt('Region')

costs_GF =costs_GF.reset_index().melt('Region')
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_AP = costs_AP.reset_index().melt('Region')
costs_GDR = costs_GDR.reset_index().melt('Region')

mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs
383/3:
#sum over rows 

sum_GDP_2100 = pd.read_csv('NPV_GDP.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_GDP_2100
 
sum_costs_GF = costs_GF[costs_GF.variable<'2101']
sum_costs_GF = sum_costs_GF.pivot(index='Region', columns='variable')
sum_costs_GF = sum_costs_GF.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GF = (sum_costs_GF/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = costs_IEPC[costs_IEPC.variable<'2101']
sum_costs_IEPC = sum_costs_IEPC.pivot(index='Region', columns='variable')
sum_costs_IEPC = sum_costs_IEPC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_IEPC = (sum_costs_IEPC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = costs_PCC[costs_PCC.variable<'2101']
sum_costs_PCC = sum_costs_PCC.pivot(index='Region', columns='variable')
sum_costs_PCC = sum_costs_PCC.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_PCC = (sum_costs_PCC/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = costs_AP[costs_AP.variable<'2101']
sum_costs_AP = sum_costs_AP.pivot(index='Region', columns='variable')
sum_costs_AP = sum_costs_AP.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_AP = (sum_costs_AP/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = costs_GDR[costs_GDR.variable<'2101']
sum_costs_GDR = sum_costs_GDR.pivot(index='Region', columns='variable')
sum_costs_GDR = sum_costs_GDR.sum(axis=1).to_frame().rename(columns = { 0: 'values'})
sum_costs_GDR = (sum_costs_GDR/sum_GDP_2100).reset_index()#.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = pd.read_csv('NPV_mitigation.csv').set_index('Region').rename(columns = {'0': 'values'})
sum_mitig = (sum_mitig/sum_GDP_2100).reset_index()
sum_mitig ["Burden sharing"] = "none"
383/4:
#reorder image 

Image_region =  pd.read_csv('Image_region.csv').drop(columns={'Unnamed: 0'})
Image_region = Image_region.set_index('Region')
Image_region
383/5:
# CBR_GF = CBR_GF.drop(['Unnamed: 0'], axis =1).set_index('Region')
# CBR_GF = CBR_GF.join(Image_region)
# CBR_GF = CBR_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1).reset_index()

sum_costs_GF = sum_costs_GF.set_index('Region')
sum_costs_GF = sum_costs_GF.join(Image_region)
sum_costs_GF = sum_costs_GF.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GF ["Burden sharing"] = "GF"

sum_costs_IEPC = sum_costs_IEPC.set_index('Region')
sum_costs_IEPC = sum_costs_IEPC.join(Image_region)
sum_costs_IEPC = sum_costs_IEPC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = sum_costs_PCC.set_index('Region')
sum_costs_PCC = sum_costs_PCC.join(Image_region)
sum_costs_PCC = sum_costs_PCC.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = sum_costs_AP.set_index('Region')
sum_costs_AP = sum_costs_AP.join(Image_region)
sum_costs_AP = sum_costs_AP.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = sum_costs_GDR.set_index('Region')
sum_costs_GDR = sum_costs_GDR.join(Image_region)
sum_costs_GDR = sum_costs_GDR.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitig = sum_mitig.set_index('Region')
sum_mitig = sum_mitig.join(Image_region)
sum_mitig = sum_mitig.sort_values(by = 'IMAGE_region_num').drop(columns = ['IMAGE_region_num'], axis =1)
# sum_mitig ["Burden sharing"] = "none"

sum_costs_GF
383/6:
# graph 

sums = [sum_costs_GF,sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitig]
sums_graph = pd.concat(sums, axis = 0)
sums_graph = sums_graph.reset_index()
sums_graph.to_csv('sum costs.csv')

sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'values',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2100',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region"
)

fig0.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.031]
)
fig0
   1:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
   2:
#data 
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = mitigation.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#avoided_damages.to_csv("output/avoided_damages_ineqav.csv")



#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#*100
mitigation_costs= mitigation_costs




# avoided_damages_perc = avoided_damages_perc.reset_index().melt('Region')
# damage_costs_baseline_perc = damage_costs_baseline_perc.reset_index().melt('Region')
# damage_costs_mitigation_perc = damage_costs_mitigation_perc.reset_index().melt('Region')
   3:
#sum of costs until 2150

#sums 

sum_costs_GF = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GF = sum_costs_GF.melt('Region').drop(['variable'], axis =1)
sum_costs_GF ["Burden sharing"] = "GF"


sum_costs_IEPC = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_IEPC = sum_costs_IEPC.melt('Region').drop(['variable'], axis =1)
sum_costs_IEPC ["Burden sharing"] = "IEPC"

sum_costs_PCC = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_PCC = sum_costs_PCC.melt('Region').drop(['variable'], axis =1)
sum_costs_PCC ["Burden sharing"] = "PCC"

sum_costs_AP = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_AP = sum_costs_AP.melt('Region').drop(['variable'], axis =1)
sum_costs_AP ["Burden sharing"] = "AP"

sum_costs_GDR = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'})
sum_costs_GDR = sum_costs_GDR.melt('Region').drop(['variable'], axis =1)
sum_costs_GDR ["Burden sharing"] = "GDR"

sum_mitigation_costs = pd.read_csv('NPV_mitigation_2150.csv')
sum_mitigation_costs = sum_mitigation_costs.melt('Region').drop(['variable'], axis =1)
sum_mitigation_costs ["Burden sharing"] = "none"

sums = [ sum_costs_GF, sum_costs_IEPC, sum_costs_PCC, sum_costs_AP, sum_costs_GDR, sum_mitigation_costs]
sums_graph = pd.concat(sums, axis = 0)


sums_graph
fig0 = px.scatter(
    sums_graph, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' total mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig0.update_xaxes(
   title = "Region",
    
)

fig0.update_yaxes(
   title = "TUSD",
    range = [0,14.4]
)
fig0
   4:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
   5:
# sum in percentage of GDP 


sum_GDP= pd.read_csv('NPV_GDP_2150.csv').set_index('Region')

sum_costs_GF_pc = pd.read_csv('NPV_GF_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GF_pc = (sum_costs_GF_pc/sum_GDP)
sum_costs_GF_pc ["Burden sharing"] = "GF"

sum_costs_IEPC_pc = pd.read_csv('NPV_IEPC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_IEPC_pc = (sum_costs_IEPC_pc/sum_GDP)
sum_costs_IEPC_pc ["Burden sharing"] = "IEPC"

sum_costs_PCC_pc = pd.read_csv('NPV_PCC_2100.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_PCC_pc = (sum_costs_PCC_pc/sum_GDP)
sum_costs_PCC_pc ["Burden sharing"] = "PCC"

sum_costs_AP_pc = pd.read_csv('NPV_AP_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_AP_pc = (sum_costs_AP_pc/sum_GDP)
sum_costs_AP_pc ["Burden sharing"] = "AP"

sum_costs_GDR_pc = pd.read_csv('NPV_GDR_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_costs_GDR_pc = (sum_costs_GDR_pc/sum_GDP)
sum_costs_GDR_pc ["Burden sharing"] = "GDR"

sum_mitigation_costs_pc= pd.read_csv('NPV_mitigation_2150.csv').rename(columns= { 'Unnamed: 0' : 'Region'}).set_index('Region')
sum_mitigation_costs_pc = sum_mitigation_costs_pc/sum_GDP
sum_mitigation_costs_pc ["Burden sharing"] = 'none'


sums_pc = [ sum_costs_GF_pc, sum_costs_IEPC_pc, sum_costs_PCC_pc, sum_costs_AP_pc, sum_costs_GDR_pc, sum_mitigation_costs_pc]
sums_graph_pc = pd.concat(sums_pc, axis = 0).reset_index()

# graph 

sums_graph_pc.to_csv('sum costs 2150.csv')


fig2150 = px.scatter(
    sums_graph_pc, 
    x='Region',
    y= '0',
    color="Burden sharing",
    title = ' tota mitigation costs per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

fig2150.update_xaxes(
   title = "Region"
)

fig2150.update_yaxes(
   title = "percentage of GDP",
    range = [0,0.025]
)
fig2150
   6:
# plots costs

costs_GF =costs_GF.reset_index().melt('Region')
costs_GF ["Burden sharing"] = "GF"
costs_IEPC = costs_IEPC.reset_index().melt('Region')
costs_IEPC ["Burden sharing"] = "IEPC"
costs_PCC = costs_PCC.reset_index().melt('Region')
costs_PCC["Burden sharing"] = "PCC"
costs_AP = costs_AP.reset_index().melt('Region')
costs_AP ["Burden sharing"] = "AP"
costs_GDR = costs_GDR.reset_index().melt('Region')
costs_GDR ["Burden sharing"] = "GDR"


mitigation_costs = mitigation_costs.reset_index().melt('Region')
mitigation_costs ["Burden sharing"] = "none"



frames= [ costs_GF, costs_IEPC, costs_PCC, costs_AP, costs_GDR, mitigation_costs ]
mitigation_costs_BSR = pd.concat(frames, axis = 0)

#mitigation_costs_BSR = mitigation_costs_BSR[mitigation_costs_BSR.variable<'2101']

fig = px.line(
    mitigation_costs_BSR,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Mitigation costs per burden sharing regime 2020-2150',
    facet_col = "Region",
    facet_col_wrap=5,
    height=1500
    
)
fig

fig.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig.update_yaxes(
    title="TUSD/year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig
   7:
#regional selection 

Reg_of_int= mitigation_costs_BSR[(mitigation_costs_BSR['Region'] == 'USA') 
                                | (mitigation_costs_BSR['Region'] == 'WEU') 
                                | (mitigation_costs_BSR['Region'] == 'CEU') 
                                |  (mitigation_costs_BSR['Region'] == 'JAP')]
                                #|  (mitigation_costs_BSR['Region'] == 'CHN')]


fig3 = px.line(
    Reg_of_int,
    x='variable',
    y= 'value',
    line_group="Region",
    color="Burden sharing",
    title = 'Costs per burden sharing regime for 2020-2100 in Trillion US Dollars',
    facet_col = "Region",
    facet_col_wrap=5,
    height=350
    
)

fig3.update_xaxes(
    title="year", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
    
fig3.update_yaxes(
    title="percentage of GDP", # Note that HTML commands like <sub>2</sub> can be used for subscript font.
    #ticksuffix=" GtCO<sub>2</sub>",
)
fig3
377/4:
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
377/5:
baseline = pd.read_csv('baseline_ignoredamages_False_p50-Copy1.0_4a005b906.csv')
mitigation = pd.read_csv('cba_inequal_aversion_zero_e307eed12 (1)-Copy1.csv')

baseline = baseline.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation = mitigation.drop(columns="Unit").set_index(["Variable", "Region"])
mitigation_population = mitigation.loc["population"]
mitigation_costs= mitigation.loc["abatement_costs"]

GDP = baseline.loc["GDP_gross"]

# first selects damage costs puts the damage costs in dollars rather than percentage of GDP here in the baseline scenario 
damage_costs_baseline_perc = (baseline.loc["damage_costs"])
damage_costs_baseline = damage_costs_baseline_perc * baseline.loc["GDP_gross"]


#calculate the damage costs of the mitigation scenario, put from percentage of gdp to dollars,
damage_costs_mitigation_perc = (mitigation.loc["damage_costs"])
damage_costs_mitigation = damage_costs_mitigation_perc * mitigation.loc["GDP_gross"]

# susbstraction of the damage costs to the damage costs in mitigation scenario to get the avoided damages (residual damage)
avoided_damages = damage_costs_baseline - damage_costs_mitigation
avoided_damages_perc = (damage_costs_baseline_perc - damage_costs_mitigation_perc)

#data mitigation costs in percentage 
costs_GF = pd.read_csv('mitig_costs_GF.csv').set_index('Region')#/GDP#*100
costs_IEPC = pd.read_csv('mitig_costs_IEPC.csv').set_index('Region')#/GDP#*100
costs_PCC = pd.read_csv('mitig_costs_PCC.csv').set_index('Region')#GDP#*100
costs_AP = pd.read_csv('mitig_costs_AP.csv').set_index('Region')#/GDP#*100
costs_GDR = pd.read_csv('mitig_costs_GDR.csv').set_index('Region')#/GDP#*100
mitigation_costs= mitigation_costs/GDP


# costs_GF =costs_GF.reset_index().melt('Region')
# costs_IEPC = costs_IEPC.reset_index().melt('Region')
# costs_PCC = costs_PCC.reset_index().melt('Region')
# costs_AP = costs_AP.reset_index().melt('Region')
# costs_GDR = costs_GDR.reset_index().melt('Region')

# mitigation_costs = mitigation_costs.reset_index().melt('Region')
# mitigation_costs
377/6:
# for the total costs on percentage of wolrd gdp 
- sum each BSR over colums 
- sum GDP mitigation 
- divide them by each other 
- make a dataframe with the all BSR and mitigation global per year 

# pay attention that the BSR so far does account for changes in GDP that would result in the implementation of the BSR
377/7:
# here we have the sum of all in trillion dollars ,if devided by global GDP get it in percentage, then we can also check how much each region contributes in terms of global gdp
global_GF = costs_GF.sum(axis=0).to_frame()#/global_gdp
global_GF ['Burden sharing'] = 'GF'
global_IEPC = costs_IEPC.sum(axis=0).to_frame()#/global_gdp
global_IEPC ['Burden sharing'] = 'IEPC'
global_PCC = costs_PCC.sum(axis=0).to_frame()#/global_gdp
global_PCC ['Burden sharing'] = 'PCC'
global_AP = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_AP ['Burden sharing'] = 'AP'
global_GDR = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_GDR ['Burden sharing'] = 'GDR'
global_MIT = costs_AP.sum(axis=0).to_frame()#/global_gdp
global_MIT ['Burden sharing'] = 'none'


frames = [global_GF,global_IEPC, global_PCC,global_AP,global_GDR,global_MIT ]
global_costs = pd.concat(frames, axis =0)
global_costs =global_costs.reset_index().rename(columns={"index":'years'})

fig0 = px.scatter(
    global_costs, 
    x='years',
    y= 0,
    color="Burden sharing",
    title = ' global mitigation costs per burden sharing regime 2020-2150',
    
)

fig0

# the results are the same for all BSR, there is no way of checking whether mitigating in one place is cheaper through is
377/8:
global_gdp = GDP.sum(axis= 0).to_frame().reset_index().rename(columns = {'index':'years', 0: 'GDP'})
global_gdp = global_gdp.set_index('years')
global_gdp = global_gdp.squeeze()


gdp_df = pd.DataFrame({

    region : global_gdp 

    for region in costs_GF.index

})

gdp_df = gdp_df.transpose().reset_index()
gdp_df = gdp_df.rename(columns ={'index': 'Region'}).set_index('Region')
377/9:
GF_per_glo = (costs_GF/gdp_df).reset_index().melt('Region')
GF_per_glo ['Burden sharing'] = 'GF'
IEPC_per_glo = (costs_IEPC/gdp_df).reset_index().melt('Region')
IEPC_per_glo ['Burden sharing'] = 'IEPC'
PCC_per_glo = (costs_PCC/gdp_df).reset_index().melt('Region')
PCC_per_glo ['Burden sharing'] = 'PCC'
AP_per_glo = (costs_AP/gdp_df).reset_index().melt('Region')
AP_per_glo ['Burden sharing'] = 'AP'
GDR_per_glo = (costs_GDR/gdp_df).reset_index().melt('Region')
GDR_per_glo ['Burden sharing'] = 'GDR'
Mit_per_glo = (mitigation_costs/gdp_df).reset_index().melt('Region')
Mit_per_glo ['Burden sharing'] = 'none'

frames1 = [ GF_per_glo, IEPC_per_glo, PCC_per_glo, AP_per_glo, GDR_per_glo, Mit_per_glo]
data = pd.concat(frames1, axis = 0)

fig1 = px.scatter(
    data, 
    x='Region',
    y= 'value',
    color="Burden sharing",
    title = ' mitigation costs in % of global GDP per year  per burden sharing regime 2020-2150',
    
)

           #labels = { "variable": "Burden Sharing Regime"})

# fig0.update_xaxes(
#    title = "Region"
# )

# fig0.update_yaxes(
#    title = "mitigation costs"
# )
fig1
   8: %history -g -f Mitigation costs plots
